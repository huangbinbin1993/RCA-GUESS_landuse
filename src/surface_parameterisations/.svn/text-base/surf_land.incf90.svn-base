subroutine surf_land(nhor,kstart,kstop,dtime,month,day, &
                                !     input:
     tsns,                                                &
     sw1opl,sw1for,sw2opl,sw2for,sw3opl,sw3for,           &
     snopl,snfor,svegfor,svegopl,                         &
     snmax,snmaxf,                                        &
     radfns,senfns,latfns,dhdtsns,                        &
     frice,frland,                                        &
     frop,frcw,frsnw,frsnfor,                        &
     draindt,dsnowdt,                                     &
     raincv_kf,snowcv_kf,                                 &
     tc,dhcdtc,dhcdtsc,                                   &
     senfc,latfc,radfc,                                   &
     tsnow,senfsn,latfsn,radfsn,dhdtsn,                   &
     etropl1,etropl2,etropl3,etrfor1,etrfor2,etrfor3,     &
     evhvopl,evhvfor,orosigm,                             &
     conacc,soiltype,                                     &
     tssn,rhosn,swsn,albsnowl,                            &
     tsc,dhscdtc,dhscdtsc,                                &
     senfsc,latfsc,radfsc,latfnsbs,                       &
     tsnc,dhcdtsnc,dhsncdtc,dhsncdtsnc,                   &
     senfsnc,latfsnc,radfsnc,                             &
     tscsn,swsnc,rhosnc,                                  &
                                !     carbon/organic soil
     vsw_mix1,vsw_mix2,vcc_mix1,vcc_mix2,             &
     vfl_mix1,vfl_mix2,psis_mix1,psis_mix2,           &
     bw_mix1,bw_mix2,ks_mix1,ks_mix2,                 &
     zcapdry_mix1,zcapdry_mix2,zcaps_mix1,zcaps_mix2, &
     cs_mix1,cs_mix2,cs_min,cs_w,cs_i,                &
                                !     ---  for soil thermal conductivity output
     ztlambda1_forns,ztlambda2_forns,  &!cj thermal cond layer 1-5 forest no snow
     ztlambda3_forns,ztlambda4_forns, &
     ztlambda5_forns, &
     ztlambda1_oplns,ztlambda2_oplns,  &!cj thermal cond layer 1-5 open land no snow
     ztlambda3_oplns,ztlambda4_oplns, &
     ztlambda5_oplns, &
     ztlambda1_forsn,ztlambda2_forsn, &!cj thermal cond layer 1-5 forest snow
     ztlambda3_forsn,ztlambda4_forsn, &
     ztlambda5_forsn, &
     ztlambda1_oplsn,ztlambda2_oplsn, &!cj thermal cond layer 1-5 open land snow
     ztlambda3_oplsn,ztlambda4_oplsn, &
     ztlambda5_oplsn, &
                                !       ---  
     latsnowcan,snowcan,vegvel, &
     laiopn_int,lai_conif,lai_decid, &
     vegopl,frdecid,vegfor, &
     soil3wopl,soil3wfor, &
     emis_t1,emis_t2,emis_t3, &
     along,coslat,sinlat,kstep, &
                                !     input/output:
     accrunoffopl,accrunofffor, &
                                !     output:
     dtsnsdt, &
     dsw1opldt,dsw1fordt,dsw2opldt,dsw2fordt,dsw3opldt,dsw3fordt,            &
     dsnopldt,dsnfordt,                                                      &
     dsvegfordt,dsvegopldt,dsnmaxdt,dsnmaxfdt,                               &
     dtcdt,dtscdt,dtsndt,                                                    &
     drhosndt,dtssndt,dswsndt,                                               &
     dtsncdt,dtscsndt,dswsncdt,drhosncdt,                                    &
     dsnowcandt,                                                             &
     tsns2,tsns3,tsns4,tsns5,                                                &
     tssn2,tssn3,tssn4,tssn5,                                                &
     tsc2,tsc3,tsc4,tsc5,                                                    &
     tscsn2,tscsn3,tscsn4,tscsn5,                                            &
     dtsns2dt,dtsns3dt,dtsns4dt,dtsns5dt,                                    &
     dtssn2dt,dtssn3dt,dtssn4dt,dtssn5dt,                                    &
     dtsc2dt,dtsc3dt,dtsc4dt,dtsc5dt,                                        &
     dtscsn2dt,dtscsn3dt,dtscsn4dt,dtscsn5dt,                                &
     swaopl,swafor,swa,swaopl12,swafor12,                                    &
     swaopl3,swafor3,soilwmm,soilfrwmm,                                      &
     lwlai,storage_w,flux_w,fr_rain_hrs,                                     &
     emsnowl,snowmeltland,                                                   &
     dzsnowopl,dzsnowfor)                                                    
  !     wjb november 2009: made attempt to make calculations independend of tile fraction
  !                        adjusted albedo formulation. 
  !     version 1.2        use compiler directive wjb_rca to active changes 

  implicit none
  !     
  integer nhor,kstart,kstop,month,day

  integer kstep
  real(kind=realkind) dtime
  !
  real(kind=realkind):: conacc,soiltype(nhor)
  real(kind=realkind):: radfns(nhor),senfns(nhor),latfns(nhor),dhdtsns(nhor), &
       frice(nhor),frland(nhor),                              &
       draindt(nhor),dsnowdt(nhor),                           &
       raincv_kf(nhor),snowcv_kf(nhor),                       &
       along(nhor),coslat(nhor),sinlat(nhor),                 &
       tsns(nhor),                                            &
       sw1opl(nhor),sw1for(nhor),sw2opl(nhor),sw2for(nhor),   &
       sw3opl(nhor),sw3for(nhor),                             &
       snopl(nhor),                                           &
       tsns2(nhor),tsns3(nhor),                                &
       tsns4(nhor),tsns5(nhor),                                &
       tssn2(nhor),tssn3(nhor),                                &
       tssn4(nhor),tssn5(nhor),                                &
       tsc2(nhor),tsc3(nhor),                                  &
       tsc4(nhor),tsc5(nhor),                                  &
       tscsn2(nhor),tscsn3(nhor),                              &
       tscsn4(nhor),tscsn5(nhor),                              &
       dtsns2dt(nhor),dtsns3dt(nhor),                          &
       dtsns4dt(nhor),dtsns5dt(nhor),                          &
       dtssn2dt(nhor),dtssn3dt(nhor),                          &
       dtssn4dt(nhor),dtssn5dt(nhor),                          &
       dtsc2dt(nhor),dtsc3dt(nhor),                            &
       dtsc4dt(nhor),dtsc5dt(nhor),                            &
       dtscsn2dt(nhor),dtscsn3dt(nhor),                        &
       dtscsn4dt(nhor),dtscsn5dt(nhor),                        &
       lwlai(nhor),                                            &
       storage_w(nhor),flux_w(nhor),fr_rain_hrs(nhor),         &
       emsnowl(nhor),snowmeltland(nhor),                       &
       accrunoffopl(nhor),accrunofffor(nhor),                  &
       swaopl(nhor),swafor(nhor),swa(nhor),swaopl12(nhor),     &
       swafor12(nhor),swaopl3(nhor),swafor3(nhor),             &
       soilwmm(nhor),soilfrwmm(nhor),                          &
       snfor(nhor),svegfor(nhor), svegopl(nhor),               &
       snmax(nhor),snmaxf(nhor),                               &
       dtsnsdt(nhor),                                          &
       dsw1opldt(nhor),dsw1fordt(nhor),dsw2opldt(nhor),        &
       dsw2fordt(nhor),dsw3opldt(nhor),dsw3fordt(nhor),        &
       dsnopldt(nhor),dsnfordt(nhor),dsnmaxfdt(nhor),          &
       dsvegfordt(nhor),dsvegopldt(nhor),dsnmaxdt(nhor)
  real(kind=realkind):: etropl1(nhor),etropl2(nhor),etropl3(nhor),etrfor1(nhor),etrfor2(nhor),etrfor3(nhor), &
       evhvopl(nhor),evhvfor(nhor),orosigm(nhor)

  real(kind=realkind):: tsnow(nhor),dtsndt(nhor),senfsn(nhor), latfsn(nhor),radfsn(nhor),dhdtsn(nhor)
  real(kind=realkind):: rhosn(nhor),tssn(nhor),drhosndt(nhor),dtssndt(nhor),swsn(nhor),dswsndt(nhor),albsnowl(nhor)

  real(kind=realkind):: tc(nhor),tcout(nhor),dtcdt(nhor),tsc(nhor),dtscdt(nhor), &
       dhcdtc(nhor),dhcdtsc(nhor),dhscdtc(nhor),dhscdtsc(nhor)

  real(kind=realkind):: senfc(nhor),latfc(nhor),radfc(nhor),senfsc(nhor),latfsc(nhor),radfsc(nhor), &
       latfnsbs(nhor),frop(nhor),frcw(nhor),frsnw(nhor),frsnfor(nhor)

  real(kind=realkind):: laiopn_int(nhor),lai_conif(nhor),lai_decid(nhor),vegopl(nhor),frdecid(nhor),vegfor(nhor), &
       soil3wopl(nhor),soil3wfor(nhor),emis_t1(nhor),emis_t2(nhor),emis_t3(nhor)

  !  new forest snow
  real(kind=realkind):: tsnc(nhor),dhcdtsnc(nhor),dhsncdtc(nhor),dhsncdtsnc(nhor),senfsnc(nhor),latfsnc(nhor),radfsnc(nhor),&
       tscsn(nhor),swsnc(nhor),rhosnc(nhor),dtsncdt(nhor),dtscsndt(nhor),dswsncdt(nhor),drhosncdt(nhor)
  ! snow interception
  real(kind=realkind):: latsnowcan(nhor),snowcan(nhor),dsnowcandt(nhor), vegvel(nhor)
  real(kind=realkind):: dzsnowopl(nhor), dzsnowfor(nhor)

  !     carbon/organic soil
  real(kind=realkind):: vsw_mix1(nhor),vsw_mix2(nhor),vcc_mix1(nhor),vcc_mix2(nhor), &
       vfl_mix1(nhor),vfl_mix2(nhor),                                &
       psis_mix1(nhor),psis_mix2(nhor),bw_mix1(nhor),bw_mix2(nhor),  &
       ks_mix1(nhor),ks_mix2(nhor),                                  &
       zcapdry_mix1(nhor),zcapdry_mix2(nhor),                        &
       zcaps_mix1(nhor),zcaps_mix2(nhor),                            &
       cs_mix1(nhor),cs_mix2(nhor),cs_min,cs_w,cs_i

  !     for soil thermal conductivity output
  real(kind=realkind):: ztlambda1_forns(nhor),ztlambda2_forns(nhor), &!cj thermal cond layer 1-5 forest no snow
       ztlambda3_forns(nhor),ztlambda4_forns(nhor),  ztlambda5_forns(nhor)
  real(kind=realkind):: ztlambda1_oplns(nhor),ztlambda2_oplns(nhor), & !cj thermal cond layer 1-5 open land no snow
       ztlambda3_oplns(nhor),ztlambda4_oplns(nhor), ztlambda5_oplns(nhor)
  real(kind=realkind):: ztlambda1_forsn(nhor),ztlambda2_forsn(nhor), & !cj thermal cond layer 1-5 forest snow
       ztlambda3_forsn(nhor),ztlambda4_forsn(nhor), ztlambda5_forsn(nhor)
  real(kind=realkind):: ztlambda1_oplsn(nhor),ztlambda2_oplsn(nhor),& !cj thermal cond layer 1-5 open land snow
       ztlambda3_oplsn(nhor),ztlambda4_oplsn(nhor), ztlambda5_oplsn(nhor)


  call surf(nhor,kstart,kstop,                         &
       dtime,month,day,                                 &
       tsns,                                            &
       sw1opl,sw1for,sw2opl,sw2for,sw3opl,sw3for,       &
       snopl,snfor,svegfor,svegopl,                     &
       snmax,snmaxf,                                    &
       radfns,senfns,latfns,dhdtsns,                    &
       frice,frland,                                    &
       frop,frcw,frsnw,frsnfor,                    &
       draindt,dsnowdt,                                 &
       raincv_kf,snowcv_kf,                             &
       tc,dhcdtc,dhcdtsc,                               &
       senfc,latfc,radfc,                               &
       tsnow,senfsn,latfsn,radfsn,dhdtsn,               &
       etropl1,etropl2,etropl3,etrfor1,etrfor2,etrfor3, &
       evhvopl,evhvfor,orosigm,                         &
       conacc,soiltype,                                 &
       tssn,rhosn,swsn,albsnowl,                        &
       tsc,dhscdtc,dhscdtsc,                            &
       senfsc,latfsc,radfsc,latfnsbs,                   &
                                !  new forest snow
       tsnc,dhcdtsnc,dhsncdtc,dhsncdtsnc,               &
       senfsnc,latfsnc,radfsnc,                         &
       tscsn,swsnc,rhosnc,                              &
                                ! snow interception
       latsnowcan,snowcan,vegvel,                       &
       laiopn_int,lai_conif,lai_decid,                  &
       vegopl,frdecid,                           &
       soil3wopl,soil3wfor,                             &
       emis_t1,emis_t2,emis_t3,                         &
                                !      carbon/organic soil
       vsw_mix1,vsw_mix2,vcc_mix1,vcc_mix2,             &
       vfl_mix1,vfl_mix2,psis_mix1,psis_mix2,           &
       bw_mix1,bw_mix2,ks_mix1,ks_mix2,                 &
       zcapdry_mix1,zcapdry_mix2,zcaps_mix1,zcaps_mix2, &
       cs_mix1,cs_mix2,cs_min,cs_w,cs_i,                &
                                !     --- for soil thermal conductivity output
       ztlambda1_forns,ztlambda2_forns,& !cj thermal cond layer 1-5 forest no snow
       ztlambda3_forns,ztlambda4_forns,&
       ztlambda5_forns,                &
       ztlambda1_oplns,ztlambda2_oplns,& !cj thermal cond layer 1-5 open land no snow
       ztlambda3_oplns,ztlambda4_oplns,&
       ztlambda5_oplns,                &
       ztlambda1_forsn,ztlambda2_forsn,& !cj thermal cond layer 1-5 forest snow
       ztlambda3_forsn,ztlambda4_forsn,&
       ztlambda5_forsn,                &
       ztlambda1_oplsn,ztlambda2_oplsn,& !cj thermal cond layer 1-5 open land snow
       ztlambda3_oplsn,ztlambda4_oplsn,&
       ztlambda5_oplsn,                &
       along,coslat,sinlat,kstep,     &
                                !     input/output:
       accrunoffopl,accrunofffor,     &
                                !     output:
       dtsnsdt,                                                      &
       dsw1opldt,dsw1fordt,dsw2opldt,dsw2fordt,dsw3opldt,dsw3fordt,  &
       dsnopldt,                                                     &
       dsnfordt,dsvegfordt,dsvegopldt,dsnmaxdt,dsnmaxfdt,            &
       dtcdt,dtscdt,dtsndt,                                          &
       drhosndt,dtssndt,dswsndt,                                     &
                                !  new forest snow
       dtsncdt,dtscsndt,dswsncdt,drhosncdt,                          &
                                ! snow interception
       dsnowcandt,                                                   &
       tsns2,tsns3,tsns4,tsns5,                                      &
       tssn2,tssn3,tssn4,tssn5,                                      &
       tsc2,tsc3,tsc4,tsc5,                                          &
       tscsn2,tscsn3,tscsn4,tscsn5,                                  &
       dtsns2dt,dtsns3dt,dtsns4dt,dtsns5dt,                          &
       dtssn2dt,dtssn3dt,dtssn4dt,dtssn5dt,                          &
       dtsc2dt,dtsc3dt,dtsc4dt,dtsc5dt,                              &
       dtscsn2dt,dtscsn3dt,dtscsn4dt,dtscsn5dt,                      &
       swaopl,swafor,swa,swaopl12,swafor12,                          &
       swaopl3,swafor3,soilwmm,soilfrwmm,                            &
       lwlai,storage_w,flux_w,fr_rain_hrs,                           &
       emsnowl,snowmeltland,                                         &
       dzsnowopl,dzsnowfor)                                         
  return
end subroutine surf_land


  subroutine surf(nhor,kstart,kstop,dtime,month,day,tsns,sw1opl,sw1for,sw2opl,sw2for,sw3opl,sw3for, &    
       snopl,snfor,svegfor,svegopl,snmax,snmaxf, radfns,senfns,latfns,dhdtsns, frice,frland, &
       frop,frcw,frsnw,frsnfor, draindt,dsnowdt, raincv_kf,snowcv_kf, tc,dhcdtc,dhcdtsc, &
       senfc,latfc,radfc, tsnow,senfsn,latfsn,radfsn,dhdtsn, etropl1,etropl2,etropl3,etrfor1,etrfor2,etrfor3, &
       evhvopl,evhvfor,orosigm,conacc,soiltype, tssn,rhosn,swsn,albsnowl, &
       tsc,dhscdtc,dhscdtsc,senfsc,latfsc,radfsc,latfnsbs, &
                                !     new forest snow
       tsnc,dhcdtsnc,dhsncdtc,dhsncdtsnc, senfsnc,latfsnc,radfsnc, tscsn,swsnc,rhosnc, &
                                !     snow interception
       latsnowcan,snowcan,vegvel,laiopn_int,lai_conif,lai_decid,vegopl,frdecid,soil3wopl,soil3wfor, &
       emis_t1,emis_t2,emis_t3, &
                                !     carbon/organic soil
       vsw_mix1,vsw_mix2,vcc_mix1,vcc_mix2, vfl_mix1,vfl_mix2,psis_mix1,psis_mix2, bw_mix1,bw_mix2,ks_mix1,ks_mix2, &
       zcapdry_mix1,zcapdry_mix2,zcaps_mix1,zcaps_mix2, cs_mix1,cs_mix2,cs_min,cs_w,cs_i, &
                                !     --- for soil thermal conductivity output
       ztlambda1_forns,ztlambda2_forns, & !cj thermal cond layer 1-5 forest no snow
       ztlambda3_forns,ztlambda4_forns,ztlambda5_forns, &
       ztlambda1_oplns,ztlambda2_oplns, &!cj thermal cond layer 1-5 open land no snow
       ztlambda3_oplns,ztlambda4_oplns, ztlambda5_oplns, &
       ztlambda1_forsn,ztlambda2_forsn, &!cj thermal cond layer 1-5 forest snow
       ztlambda3_forsn,ztlambda4_forsn,  ztlambda5_forsn, &
       ztlambda1_oplsn,ztlambda2_oplsn, &!cj thermal cond layer 1-5 open land snow
       ztlambda3_oplsn,ztlambda4_oplsn, ztlambda5_oplsn, &
                                !     --- 
       along,coslat,sinlat,kstep,&
                                !     input/output:
       accrunoffopl,accrunofffor,&
                                !     output:
       dtsnsdt,dsw1opldt,dsw1fordt,dsw2opldt,dsw2fordt,dsw3opldt,dsw3fordt,dsnopldt, &
       dsnfordt,dsvegfordt,dsvegopldt,dsnmaxdt,dsnmaxfdt, dtcdt,dtscdt,dtsndt, drhosndt,dtssndt,dswsndt, &
                                !     new forest snow
       dtsncdt,dtscsndt,dswsncdt,drhosncdt, &
                                !     snow interception
       dsnowcandt, tsns2,tsns3,tsns4,tsns5, tssn2,tssn3,tssn4,tssn5, tsc2,tsc3,tsc4,tsc5, tscsn2,tscsn3,tscsn4,tscsn5,&
       dtsns2dt,dtsns3dt,dtsns4dt,dtsns5dt,dtssn2dt,dtssn3dt,dtssn4dt,dtssn5dt,dtsc2dt,dtsc3dt,dtsc4dt,dtsc5dt, &
       dtscsn2dt,dtscsn3dt,dtscsn4dt,dtscsn5dt, swaopl,swafor,swa,swaopl12,swafor12,swaopl3,swafor3,soilwmm,soilfrwmm, &
       lwlai,storage_w,flux_w,fr_rain_hrs, emsnowl,snowmeltland,dzsnowopl,dzsnowfor)
    !     
    !**** surf - subroutine to perform surface and ground calculations
    !     
    !     l.m. hafkenscheid       knmi       861210
    !     
    !     modified for hirlam use            870525
    !     modified again by bb smhi          feb 1991
    !     modified a lot in aug 2000 by s. gollvik, p.samuelsson and b.bringfeldt
    !     
    !     purpose
    !     -------
    !     
    !     surf  calculates new values of surface temperature, moisture
    !     and snow depth and of deep temperature and moisture
    !     
    !     
    !     980316 ulf hansson, rossby centre - added accumulated runoff calculation
    !     980624 ulf hansson, rossby centre - added soiltype
    !     
    !     1998-99 markku rummukainen and bjorn bringfelt, rc - 
    !     new soil and snow thermal properties (the modifications are on an 
    !     experimental stage!!!) as well as some changes in the formulations.

    !     bjorn bringfelt  1998-99: 
    !     - no relaxation to gcm deep soil moisture - hirlam clim soil
    !     moisture not used
    !     - soil freezing according to viterbo ecmwf 
    !     the soil-freezing algorithm should according to viterbo et al.
    !     include the veg-factor but it is excluded here
    !     
    !     s.gollvik, p.samuelsson april 2000 - added snow and canopy temperature
    !     s.gollvik, p.samuelsson aug 2000 - added tsc and new computations of fractions
    !     
    !     
    use comrpar
    use confys
    use config

    implicit none
    integer:: nhor,kstart,kstop, month,day
    integer:: jl,iter,jq
    integer:: kstep
    real(kind=realkind):: zalat
!    logical lprint,lprint2,lprint3,lprint4,lprint5
    logical lprint
    real(kind=realkind):: dtime
    real(kind=realkind):: conacc,soiltype(nhor)
    real(kind=realkind):: ztp3c,ztp3sc,zdsrfcc,zdsrfcsc,zdsrfscc,zdsrfscsc
    real(kind=realkind):: zfrsnopl,zfrsnfor,zsnmel,zfice
    real(kind=realkind):: ztsp,zsw1oplp,zsw1forp,zsw2oplp,zsw2forp,zsw3oplp,zsw3forp,zsnoplp,zsnforp,zfri,zprfl1,zprfl2
    real(kind=realkind):: zsurfl, zdsrfl, ztsflg ,zoneth, zrdt
    real(kind=realkind):: ztsflx,ztsflb,zwsflg,zrsfl,ztp3
    real(kind=realkind):: zsnopldepth,zsnopldi
    real(kind=realkind):: zcsoil,zctq,zsea,zsafe
    real(kind=realkind):: zlatns,zwsflq1
    real(kind=realkind):: zrainf,zrainh,zvegmax,zvegp,zvegp0,zvegmm,zvegmmfor,zvegmaxfor,zvegmaxopl,zthrfor,zthropl, rsa,alfa,alb
    real(kind=realkind):: z13,z23,zveglim,zf0,zfx,zthr,zviewfl
    real(kind=realkind):: zer
    real(kind=realkind):: zi1opl,zi1for, zbet1opl,zbet1for,zbet2opl,zbet2for,zbet3opl,zbet3for,  &
         zbetq1opl,zbetq1for,zbetq2opl,zbetq2for,zbetq3opl,zbetq3for,           &
         zq1opl,zq1for,zq2opl,zq2for,zq3opl,zq3for,                             &
         zflux1opl,zflux2opl,zflux3opl,zflux1for,zflux2for,zflux3for,           &
         dzq1opldww1,dzq2opldww1,dzq2opldww2,dzq3opldww2,dzq3opldww3,           &
         dzq1fordww1,dzq2fordww1,dzq2fordww2,dzq3fordww2,dzq3fordww3,           &
         alphaimpww,                                                            &
         zruno1opl,zruno1for,zrunoopl,zrunofor,zflt
    real(kind=realkind):: accrunoffopl(nhor),accrunofffor(nhor), swaopl(nhor),swafor(nhor),swa(nhor),swaopl12(nhor), &
         swafor12(nhor),swaopl3(nhor),swafor3(nhor),soilwmm(nhor),soilfrwmm(nhor),snowmeltland(nhor)
    real(kind=realkind):: zk,zk1,zk2
    real(kind=realkind):: zdifsn,zfact,ztdifsn,alphaimp
    real(kind=realkind):: zmeltf,ztempp,zamelt,zmeff
    real(kind=realkind):: zmelbs,zfzsnr,zfzbr,zwsat,zcwinv
    real(kind=realkind):: zsqrt12,ztmean,zdeltah,ztti,ztmin,ztmax,zsnmaxp
    real(kind=realkind):: zsnlim,zlandon,zlandoff,zsnwinv,zsnmaxfp
    real(kind=realkind):: zcwinv2,zsfdist,zdsnw,zdfrsnf,zweight,&
         zfrsnp,zfrsnforp,zsnwp,zfropp,zfrsnforpst, &
         zsnwpst,zfroppst
    real(kind=realkind):: zsnoplpdepth,zdsnp,zdsnstp,zdsnstfor,ztsncps,zsnforpdepth,&
         zdsncp,zdsncstp,nc1snc,ztsnps
    integer:: jqsn,jqsnc,jqsnp,jqsncp
    real(kind=realkind)::  zkdf3,zkdf4,ztsns2,ztsns2p,ztsns3,ztsns3p,ztsns4,ztsns4p
    real(kind=realkind)::ztsns5,ztsns5p,ztssn2,ztssn2p,ztssn3,ztssn3p,                     &
         ztssn4,ztssn4p,ztssn5,ztssn5p,ztsc2,ztsc2p,ztsc3,ztsc3p,ztsc4,&
         ztsc4p,ztsc5,ztsc5p,ztscsn2,ztscsn2p,ztscsn3,ztscsn3p,  &
         ztscsn4,ztscsn4p,ztscsn5,ztscsn5p, ro_cgns,ro_cgns2,ro_cgns3,&
         ro_cgns4,ro_cgns5, ro_cgsn,ro_cgsn2,ro_cgsn3,ro_cgsn4,ro_cgsn5,&
         ro_cgc,ro_cgc2,ro_cgc3,ro_cgc4,ro_cgc5,ro_cgcsn,ro_cgcsn2,&
         ro_cgcsn3,ro_cgcsn4,ro_cgcsn5
    real(kind=realkind):: wa(7),wb(7),wc(7),wr(7),wtemp(7)
    real(kind=realkind):: nro_cgns,nro_cgns2,nro_cgns3,nro_cgns4,nro_cgns5,nro_cgsn,&
         nro_cgsn2,nro_cgsn3,nro_cgsn4,nro_cgsn5, &
         nro_cgc,nro_cgc2,nro_cgc3,nro_cgc4,nro_cgc5,nro_cgcsn,nro_cgcsn2,&
         nro_cgcsn3,nro_cgcsn4,nro_cgcsn5
    real(kind=realkind):: nc1sn
    real(kind=realkind):: rhosnow(12),zcsnow
    real(kind=realkind):: rhosnow_int
    real(kind=realkind):: zalpha
    real(kind=realkind):: radfns(nhor),senfns(nhor),latfns(nhor),dhdtsns(nhor), frice(nhor),&
         frland(nhor),draindt(nhor),dsnowdt(nhor), &
         raincv_kf(nhor),snowcv_kf(nhor),along(nhor),coslat(nhor),&
         sinlat(nhor),&
         frclr(nhor),tsns(nhor),&
         sw1opl(nhor),sw1for(nhor),sw2opl(nhor),sw2for(nhor),sw3opl(nhor),&
         sw3for(nhor), snopl(nhor),snfor(nhor), &
         tsns2(nhor),tsns3(nhor), tsns4(nhor),tsns5(nhor), tssn2(nhor),&
         tssn3(nhor), tssn4(nhor),tssn5(nhor), &
         tsc2(nhor),tsc3(nhor), tsc4(nhor),tsc5(nhor),tscsn2(nhor),&
         tscsn3(nhor), tscsn4(nhor),tscsn5(nhor),dtsns2dt(nhor),dtsns3dt(nhor), &
         dtsns4dt(nhor),dtsns5dt(nhor), dtssn2dt(nhor),dtssn3dt(nhor),&
         dtssn4dt(nhor),dtssn5dt(nhor), dtsc2dt(nhor),dtsc3dt(nhor), &
         dtsc4dt(nhor),dtsc5dt(nhor), dtscsn2dt(nhor),dtscsn3dt(nhor), &
         dtscsn4dt(nhor),dtscsn5dt(nhor), lwlai(nhor),fr_rain_hrs(nhor), &
         emsnowl(nhor),svegfor(nhor), svegopl(nhor),snmax(nhor),snmaxf(nhor),&
         dtsnsdt(nhor),dsw1opldt(nhor),dsw1fordt(nhor),dsw2opldt(nhor), &
         dsw2fordt(nhor),dsw3opldt(nhor),dsw3fordt(nhor), dsnopldt(nhor),&
         dsnfordt(nhor),dsnmaxfdt(nhor),dsvegfordt(nhor), dsvegopldt(nhor),&
         dsnmaxdt(nhor)
    real(kind=realkind):: etropl1(nhor),etropl2(nhor),etropl3(nhor),etrfor1(nhor),&
         etrfor2(nhor),etrfor3(nhor),evhvopl(nhor),evhvfor(nhor),orosigm(nhor)
    real(kind=realkind):: tsnow(nhor),dtsndt(nhor),senfsn(nhor),latfsn(nhor),radfsn(nhor),&
         dhdtsn(nhor)
    real(kind=realkind):: rhosn(nhor),tssn(nhor),drhosndt(nhor),dtssndt(nhor),swsn(nhor),&
         dswsndt(nhor),albsnowl(nhor)
    real(kind=realkind):: tc(nhor),tcout(nhor),dtcdt(nhor), dhcdtc(nhor),dhcdtsc(nhor),&
         dhscdtc(nhor),dhscdtsc(nhor)
    real(kind=realkind):: senfc(nhor),latfc(nhor),radfc(nhor)
    real(kind=realkind):: tsc(nhor),dtscdt(nhor)
    real(kind=realkind):: senfsc(nhor),latfsc(nhor),radfsc(nhor),latfnsbs(nhor),&
         frop(nhor),frcw(nhor),frsnw(nhor),frsnfor(nhor)
    !     new forest snow
    real(kind=realkind):: tsnc(nhor),dhcdtsnc(nhor),dhsncdtc(nhor),dhsncdtsnc(nhor),&
         senfsnc(nhor),latfsnc(nhor),radfsnc(nhor),tscsn(nhor),swsnc(nhor),&
         rhosnc(nhor), &
         dtsncdt(nhor),dtscsndt(nhor),dswsncdt(nhor),drhosncdt(nhor)
    !   snow interception
    real(kind=realkind):: latsnowcan(nhor),snowcan(nhor),dsnowcandt(nhor), vegvel(nhor),&
         snowcanmel(nhor)
    !     
    real(kind=realkind):: dzsnowopl(nhor), dzsnowfor(nhor)
    real(kind=realkind):: zdfdts,zdfdtd,zdgdts,zdgdtd,zfrlim, zaa,zbb,zcc,zdd,zee,zff,zaebd
    real(kind=realkind):: zlaifor_int,zlai_conif,zlaiopn_int
    real(kind=realkind):: laiopn_int(nhor),lai_conif(nhor),lai_decid(nhor),vegopl(nhor),&
         frdecid(nhor),soil3wopl(nhor),soil3wfor(nhor), &
         emis_t1(nhor),emis_t2(nhor),emis_t3(nhor)
    real(kind=realkind):: zalon,zdecid,zwsflqc
    real(kind=realkind):: storage_w(nhor),flux_w(nhor)
    real(kind=realkind):: zprec,zevap,zruno
    real(kind=realkind):: env,alpha(2)
    !     interface
    !     ---------
    !************************integer input ********************************
    !     l
    !     l      nhor            input           dimension length in the horizont
    !     l
    !     l      kstart          input           starting index for horizontal lo
    !     l
    !     l      kstop           input           ending index for hor. loops
    !     l
    !************************real input ***********************************
    !     l
    !     l      dtime           input           time step for preliminary foreca
    !     l
    !************************horizontal fields input **********************
    !     l
    !     l      tsns(nhor)       input          surface temperature no snow
    !     l      sw(nhor)         input          surface moisture
    !     l      swd(nhor)        input          deep moisture
    !     l      svegfor(nhor)    input          water on forest 
    !     l      svegopl(nhor)    input          water on open land vegetation
    !     l      snopl(nhor)      input          land average snow depth over land in water equivalent (m)
    !     l      snfor(nhor)      input          land average snow depth in forest in water equivalent (m)
    !     l      snmax(nhor)      input          deepest snowdepth "up to now"
    !     l      snmaxf(nhor)     input          deepest snowdepth "up to now" in forest
    !     l      radf(nhor)       input          radiation at surface
    !     l      senf(nhor)       input          surface sensible heat flux
    !     l      latf(nhor)       input          surface latent   heat flux
    !     l      dhdtsns(nhor)    input          sum of derivatives of sensible
    !     l                                      and latent heat fluxes with
    !     l                                      respect to surface temperature no snow
    !     l      frice(nhor)
    !     l      frland(nhor)    input           fraction of ice and land
    !     l      draindt(nhor)   input           rain flux at surface
    !     l      dsnowdt(nhor)   input           snow flux at surface
    !     l    eg:      bare soil latent heat flux (w/m2) positive from ground to atm.
    !     l    etrfor:  transevaporation  flux (w/m2) positive from forest to atm.
    !     l    etropl:  transevaporation  flux (w/m2) positive from open land to atm.
    !     l    er:      evaporation from canopy (w/m2) positive from ground to atm.
    !     l    sveg :   water on canopy (m)
    !     l
    !     l    tsnow:   snow temperature  
    !     l    senfsn:  sensible heat flux for snow
    !     l    latfsn:  latent heat flux for snow
    !     l    radfsn:  radiation flux for snow
    !     l    dhdtsn:  derivative of snowflux with respect to tsnow
    !     l
    !     l
    !     l    tc:      canopy temperature
    !     l    senfc:   sensible heat flux for canopy
    !     l    latfc:   latent heat flux for canopy
    !     l    radfc:   radiation flux for canopy
    !     l    dhdtc:   derivative of heat flux with respect to tc
    !     l
    !     l    tsc:     soil temperature under canopy
    !     l    senfsc:   sensible heat flux for soil under canopy
    !     l    latfsc:   latent heat flux for soil under canopy
    !     l    radfsc:   radiation flux for soil under canopy
    !     l    dhdtsc:   derivative of heat flux with respect to tsc
    !     
    !     l    rhosn:   current density of snow
    !     l    drhosndt: time tendency of rhosn
    !     l    tssn:    soil temperature under snow
    !     l    dtssndt: time tendency of tssn
    !     l    swsn:    water in snow (m) in actual snow, not land average
    !     l    dswsndt: time tendency of swsn
    !     l
    !     l snow in forest
    !     l --------------
    !     l
    !     l    tsnc:    snow temperature in forest
    !     l    tscsn:   soil temperature under snow in forest
    !     l    senfsnc: sensible heat flux for snow in forest
    !     l    latfsnc: latent heat flux for snow in forest
    !     l    radfsnc: radiation flux for snow in forest
    !     l    dhdtsnc: derivative of snowflux with respect to tsnc
    !     l    rhosnc:  current density of snow in forest
    !     l    swsnc:   water in forest-snow (m) in actual snow, not land average
    !     l
    !     l    drhosncdt: time tendency of rhosnc
    !     l    dtsncdt: time tendency of tsnc
    !     l    dtscsndt: time tendency of tscsn
    !     l    dswsncdt: time tendency of swsnc
    !     l
    !     l    dhcdtsnc: derivative of canopy heat flux with respect to tsnc
    !     l    
    !     l
    !************************horizontal field output **********************
    !     l
    !     l
    !     l     dtsnsdt(nhor)    output          tendency of surface temperature no snow
    !     l     dswdt(nhor)      output          tendency of surface moisture
    !     l     dswddt(nhor)     output          tendency of deep surface moistur
    !     l     dsndlandt(nhor)  output          tendency of snow cover over land
    !     l     dsvegfordt(nhor)  output          tendency of water on forest 
    !     l     dsvegopldt(nhor)  output          tendency of water on open land vegetation
    !     l     dtsndt(nhor)     output          tendency of snow temperature
    !     l     dtcdt(nhor)      output          tendency of canopy temperature
    !     l     dtscdt(nhor)     output          tendency of soil temperature under canopy
    !     l
    !***********************************************************************
    !--------------------------------------------------------------------
    !     
    !--------------------------------------------------------------------

    real(kind=realkind):: aln10,aks,wlambda1opl,wlambda1for,wlambda2opl,&
         wlambda2for,wlambda3opl,wlambda3for,&
         wlambda12opl,wlambda12for,wlambda23opl,wlambda23for
    real(kind=realkind):: z3wopl,z3wfor,ww1opl,ww1for,ww2opl,ww2for,&
         ww3opl,ww3for, zww1oplp,zww1forp,zww2oplp,zww2forp,zww3oplp,zww3forp
    real(kind=realkind):: zweightopl4,zweightopl5,zweightfor4,zweightfor5,&
         zsoilfrwmmopl,zsoilfrwmmfor
    real(kind=realkind):: ro_cgw1opl,ro_cgw1for,ro_cgw2opl,ro_cgw2for,&
         ro_cgw3opl,ro_cgw3for,ro_cgw4opl,ro_cgw4for,ro_cgw5opl,ro_cgw5for ! cj
    real(kind=realkind):: zslask
    !     soil freezing
    real(kind=realkind):: rt1,rt2,dstepdt,ztsflm,ztsflm2
    real(kind=realkind):: fstep
    integer:: isoil
    !     
    real(kind=realkind):: zsnlayer,zlatsn,zwsflqsn,zsurfsn,zdsrfsn,zrsinv,&
         zkdf1,zkdf2,ztsnp,ztssnp,ztdsnp,ztcdp, &
         zdet,za1,zb1,zc1,zr1,za2,zb2,zc2,zr2,zb3,zc3,zr3,zrssn,zswsnp,&
         zrhosnp,zrhodry,zdweight,zrhost,zsnswcrit,zsncrit, &
         zfreezefrac,zwsflqsc,zlatc,zcfmax,zrhosn,zeps, rhosnmin,rhosnmax,&
         taufsn,tau1sn,vhcice,rhoice,                    &
         tlambdaice,tlambdasn,c1,c2,c1snc,c1sn,  zdsn,zdsnst,zalphasng,&
         zsurfsntot,zdelta1t,zdelta2t,                      &
         zflmelt,zsn2sw,ztmelt,zsnstopl,zsnstfor,ztsnow,ztssn,tauasn,&
         zrain2snow,                                          &
         ztauasn,ztalblim,zemsnowl

    real(kind=realkind)::tlambdaw,tlambdaq,zgamd,zcapdry,zcap0,zcaps,&
         zsat,zfrsoilice,zcapsat,zkersten,ztlambda1,ztlambda2,ztlambda3, &
         ztlambda4,ztlambda5,ztlambda

    real(kind=realkind):: zsvfor,zsvopl, nysvoplmm,nysvoplw, &
         zconvredcoef,zconvred,zvegmulch,zvegforfloor
    real(kind=realkind):: zsurfc,zccanopy,ztcp,spechw,zcw,zfrop,zsnw
    real(kind=realkind):: zvegfor,zvegopl,zlatsc,zvegpopl,zvegpfor, &
         zrainop,zmelbsc,zfzbrc,zsurfsc,ztscp,zsnmelf, &
         zsvegfor,zsvegopl,zswsn,zfzr2sn,zemopl,zro_cg_dry,  zemfor,zemsoil
    !     new forest snow
    real(kind=realkind):: zlatsnc,zwsflqsnc,zfrsnforinv,zrhosnc, &
         tlambdasnc,zfzr2snc,zfzbrsnc,ztcscp,ztscdp,         &
         zsnfordi,ztsnc,ztscsn,zswsnc,zsnfordepth, ztp3snc,zdsrfcsnc,&
         zsurfsnc,zdsrfsncc,zdsrfsncsnc,&
         zsurfsnctot,ztcsnp,ztscsnp,ztsncp,ztsncdp,zsnc2sw, zswsncp,&
         zrhosncp,ztc,zcwsnforinv
    !     snow interception
    real(kind=realkind):: zsnowcanp,zsnowf,rhosncan,zsnowcanmax,zxcan,&
         zwcan,zjcan,zcpcan,zinteff,zsnowcan,csncan, &
         zcccan,zkcan,zsnowh,zsnowf1,zsnowf2,zsnowf3,timetend,zrainhfor,&
         zevhvfor
    !     snowmip
    real(kind=realkind):: zgroundsnc,zgroundsn,evapfor,evapopn,&
         srfliqfracifor,srfliqfraciopl


    !      carbon/organic soil
    real(kind=realkind):: vsw_mix1(nhor),vsw_mix2(nhor),vcc_mix1(nhor),&
         vcc_mix2(nhor),vfl_mix1(nhor),vfl_mix2(nhor), &
         psis_mix1(nhor),psis_mix2(nhor),bw_mix1(nhor),bw_mix2(nhor), &
         ks_mix1(nhor),ks_mix2(nhor), &
         zcapdry_mix1(nhor),zcapdry_mix2(nhor), zcaps_mix1(nhor),&
         zcaps_mix2(nhor), cs_mix1(nhor),cs_mix2(nhor), &
         cs_min,cs_w,cs_i

    !      for soil thermal conductivity output
    real(kind=realkind):: ztlambda1_forns(nhor),ztlambda2_forns(nhor), & !cj thermal cond layer 1-5 forest no snow
         ztlambda3_forns(nhor),ztlambda4_forns(nhor),  ztlambda5_forns(nhor)
    real(kind=realkind):: ztlambda1_oplns(nhor),ztlambda2_oplns(nhor), & !cj thermal cond layer 1-5 open land no snow
         ztlambda3_oplns(nhor),ztlambda4_oplns(nhor),ztlambda5_oplns(nhor)
    real(kind=realkind):: ztlambda1_forsn(nhor),ztlambda2_forsn(nhor),  & !cj thermal cond layer 1-5 forest snow
         ztlambda3_forsn(nhor),ztlambda4_forsn(nhor), ztlambda5_forsn(nhor)
    real(kind=realkind):: ztlambda1_oplsn(nhor),ztlambda2_oplsn(nhor), & !cj thermal cond layer 1-5 open land snow
         ztlambda3_oplsn(nhor),ztlambda4_oplsn(nhor), ztlambda5_oplsn(nhor)
    !     --- 

    real(kind=realkind):: dummyvar             ! dummy variable (contaant) used to check write command
    !     ---
!cgj300712
    real(kind=realkind):: zdsnow

    !     sfdist
    !     vsw   total porosity (%)
    !     vcc   field capacity (m3/m3)
    !     vfl   wilting point (m3/m3)
    !     psis  sat. soil matric pot. (m)
    !     bw    clapp and hornberger exponent, (b-parameter)
    !     ks    sat. hyd. cond. (m/s)
    !     ro_cg_dry  dry soil density (kg/m3)

    !----------------------------------------------------------------------


    real(kind=realkind)::     zalbsnfr,  zdznewalb, zalbareap
    real(kind=realkind)::     zsn2areaf, zsn2aream, znewsna,   zalbsn   
    real(kind=realkind)::     zalbmelt,  zalbmelts
    real(kind=realkind)::     zfrtopl
    logical  loldlim
    real(kind=realkind)::     zfrinsg
    real(kind=realkind)::     zsnmaxpu,  zsnmaxfpu 
    real(kind=realkind)::     zexpalb 

    !     *         1.      preliminaries
    !     -------------
    !     
    !     *    1.1     local constants
    !     
    !     degree of implicit solution
    !     
    alphaimp=1.0_realkind
    !alphaimp=0.0_realkind
    !     
    !     specific heat capacity of the soil, hirlam: zcsoil=.5*4.18e3.
    !     ref: jarvenoja, fmi, personal comm. 980324: zcsoil=1.8e3.
    !     
    !     specific heat capacity of the snow, hirlam: zcsnow does not exist. 
    !     here, the value of ice is used, 
    !     ref: gray and male, handbook of snow, p. 294):
    !     zcsnow=(2.115+0.0_realkind0779(ts-tmelt))*1000.
    !     volumetric heat capacity of the snow: zcsnow*density of the snow
    !     empirical correction to snow melt term, hirlam=0.1:
    !     after regard to factor 0.1 (empirical from hbv model-runoffs)
    !     and our monthly values of rhosnow:
    !     
    zfact=0.2_realkind   
    !     
    zsqrt12=sqrt(12.0_realkind)
    !     
    !     fao-types, conversion factor cm to m:
    aln10=0.4342945_realkind
    !     
    !     location independent parameters in the rca soil scheme:
    zrdt=1._realkind/dtime
    !     
    zk1=0.2_realkind
    zk2=1.e-6_realkind
    zk=exp(-zk2*dtime)
    !     
    zalpha =  dtime/(0.04166_realkind*24._realkind*3600._realkind)
    spechw= 4.2178e3_realkind
    zsnlayer=0.15_realkind
    !     ps020704       zsnlayer=0.08
    zeps=1.e-06_realkind
    zsncrit=0.03_realkind
    zsnswcrit=0.0001_realkind
    zsnlim=0.0015_realkind
    zwsat=0.1_realkind
    !     snowmip       zwsat=0.04
    zfrlim=0.01_realkind
    zfrinsg= zfrlim*zfrlim
    ztmelt=tmelt

    !     rhoh2o because soil moist, canopy water and snow depth are in m of water:
    zrsfl=dtime/rhoh2o
    zmeltf=zrsfl/(24._realkind*3600._realkind)

    !     interception
    zveglim=0.01_realkind
    z13=1._realkind/3._realkind
    z23=2._realkind*z13
    !     snow
    rhosnmin=100._realkind
    rhosnmax=300._realkind
    taufsn=0.24_realkind
    tau1sn=86400._realkind
    tauasn=0.008_realkind
    !     ps090219
    ztalblim=ztmelt-5._realkind
    zalbsnfr  =  0.9_realkind         ! [] ! target albedo for resetting snow albedo 
    zdznewalb =  0.05_realkind         ! [m snowdepth] ! depth snowlayer that resets albedo to maximum value
    zalbareap =  0.8_realkind          ! [] ! scaling factor for fraction covered by fresh snow
    zalbmelt  =  0.7_realkind          ! maximum albedo for melting conditions.
    zalbmelts =  0.003_realkind        ! get a decay to zalbmelt from albsnmax with 0.003 m of snowmelt
    zexpalb   = exp(-taufsn*dtime/tau1sn) ! is constant so why calculate everytime?
    vhcice=2.05e6_realkind            ! ice volumetric heat capacity (j m-3 k-1)
    rhoice=920._realkind               ! ice density
    tlambdaice=2.22_realkind           ! ice thermal conductivity
    tlambdaw=0.6_realkind              ! water thermal conductivity
    tlambdaq=7.7_realkind              ! quartz thermal conductivity [w/(m k)]
    !     
    !     modify soil heat capacity in case of freezing/thawing process,
    !     which occur for -3degc < tsc < 1degc (viterbo et al. 1999)
    !     ----------------------------------------------------------
    !     
    rt1=ztmelt+1._realkind
    rt2=ztmelt-3._realkind
    !     
    call int_snow ( month,day,rhosnow_int) 
    !     
    !     initialize some local variables that may not be set
    !     
    c1sn=0._realkind
    c1snc=0._realkind
    zgroundsnc=0._realkind
    zgroundsn=0._realkind
    !     
    !     the reduction of zvegmax for 100% convective prec:
    !     ps090618      zconvredcoef=0.2
    zconvredcoef=1.0_realkind
    !     ps      zconvredcoef=0.6
    zsn2areaf =       rhoh2o     *(albsnlmax-albsnlmin) /(rhosnmin*zdznewalb*(zalbsnfr -albsnlmin))
    zsn2aream =       rhoh2o     *(albsnlmax-albsnlmin) / (rhosnmin*zdznewalb*(zalbmelt -albsnlmin))

    !     ps100318
    !     this takes into account the insulating effect of dead vegetation/leaf litter/mulch on
    !     the uppermost soil layer thermal conductivity: it is a simple modification
    !     of the ideas presented by gonzalez-sosa et al., afm, 1999: the thermal
    !     conductivity is reduced by the factor zvegmulch. the main impact is
    !     to reduce the thermal coupling between the surface layer and the 
    !     sub-surface soil. in the limit when
    !     there is no vegetation, the conductivity collapses into the bare-soil value.
    !     this parameterisation is a copy from surfex v5.1
    !     set zvegmulch=1.0 to exclude the effect of mulch
    !     
    if(lmulch)then
      zvegmulch=0.1_realkind
    else
      zvegmulch=1.0_realkind
    endif
    !     
    !     assume a vegetation cover of 0.5 at forest floor
    !     
    zvegforfloor=0.5_realkind
    !     
    !     ps100318
    !     
    !     **************************************
    !     *********** main loop ****************
    !     **************************************
    !     
    do 1 jl=kstart,kstop
       !     
       !     +++++++++++++++++++++++++++++++++++++++
       !     
       z3wopl=soil3wopl(jl)
       z3wfor=soil3wfor(jl)

       zweightopl4=0._realkind
       zweightopl5=0._realkind
       if(z3wopl>(dz4+dz5))then
          zweightopl4=dz4/(dz4+dz5)
          zweightopl5=dz5/(dz4+dz5)
       elseif(z3wopl>dz4)then
          zweightopl4=dz4/z3wopl
          zweightopl5=(z3wopl-dz4)/z3wopl
       else
          zweightopl4=1._realkind
       endif

       zweightfor4=0._realkind
       zweightfor5=0._realkind
       if(z3wfor>(dz4+dz5))then
          zweightfor4=dz4/(dz4+dz5)
          zweightfor5=dz5/(dz4+dz5)
       elseif(z3wfor>dz4)then
          zweightfor4=dz4/z3wfor
          zweightfor5=(z3wfor-dz4)/z3wfor
       else
          zweightfor4=1._realkind
       endif

       !     
       !     ++++++++++++++++++++++++++++++++++++++++
       !     
       !     put tendencies to zero
       !     
       dtsnsdt(jl)=0._realkind
       dsw1opldt(jl)=0._realkind
       dsw1fordt(jl)=0._realkind
       dsw2opldt(jl)=0._realkind
       dsw2fordt(jl)=0._realkind
       dsw3opldt(jl)=0._realkind
       dsw3fordt(jl)=0._realkind
       dsnopldt(jl)=0._realkind
       dsnfordt(jl)=0._realkind
       dsnmaxdt(jl)=0._realkind
       dsnmaxfdt(jl)=0._realkind
       dsvegfordt(jl)=0._realkind
       dsvegopldt(jl)=0._realkind
       dtsndt(jl)=0._realkind
       dtssndt(jl)=0._realkind
       dtsns2dt(jl)=0._realkind
       dtsns3dt(jl)=0._realkind
       dtsns4dt(jl)=0._realkind
       dtsns5dt(jl)=0._realkind
       dtssn2dt(jl)=0._realkind
       dtssn3dt(jl)=0._realkind
       dtssn4dt(jl)=0._realkind
       dtssn5dt(jl)=0._realkind
       dtsc2dt(jl)=0._realkind
       dtsc3dt(jl)=0._realkind
       dtsc4dt(jl)=0._realkind
       dtsc5dt(jl)=0._realkind
       dtscsn2dt(jl)=0._realkind
       dtscsn3dt(jl)=0._realkind
       dtscsn4dt(jl)=0._realkind
       dtscsn5dt(jl)=0._realkind
       dtcdt(jl)=0._realkind
       dtscdt(jl)=0._realkind
       dswsndt(jl)=0._realkind
       drhosndt(jl)=0._realkind
       !     
       !     new forest snow
       !     
       dsnowcandt(jl)=0._realkind
       dtsncdt(jl)=0._realkind
       dtscsndt(jl)=0._realkind
       dswsncdt(jl)=0._realkind
       drhosncdt(jl)=0._realkind
       storage_w(jl)=0._realkind
       !     
       !     put new values equal old values
       !     
       ztsp   =   tsns(jl)
       ztsns2p = tsns2(jl)
       ztsns3p = tsns3(jl)
       ztsns4p = tsns4(jl)
       ztsns5p = tsns5(jl)
       ztssn2p = tssn2(jl)
       ztssn3p = tssn3(jl)
       ztssn4p = tssn4(jl)
       ztssn5p = tssn5(jl)
       ztsc2p  = tsc2(jl)
       ztsc3p  = tsc3(jl)
       ztsc4p  = tsc4(jl)
       ztsc5p  = tsc5(jl)
       ztscsn2p  = tscsn2(jl)
       ztscsn3p  = tscsn3(jl)
       ztscsn4p  = tscsn4(jl)
       ztscsn5p  = tscsn5(jl)
       zsw1oplp   =   sw1opl(jl)
       zsw1forp   =   sw1for(jl)
       zsw2oplp   =   sw2opl(jl)
       zsw2forp   =   sw2for(jl)
       zsw3oplp   =   sw3opl(jl)
       zsw3forp   =   sw3for(jl)
       zsnoplp   =   snopl(jl)
       zsnforp   =   snfor(jl)
       zsnmaxp   =   snmax(jl)
       zsnmaxfp   =   snmaxf(jl)
       zvegpfor   =   svegfor(jl)
       zvegpopl   =   svegopl(jl)
       ztsnp = tsnow(jl)
       ztssnp = tssn(jl)
       ztcp   =   tc(jl)
       ztscp   =   tsc(jl)
       zswsnp = swsn(jl)
       zrhosnp = rhosn(jl)
       !     
       !     new forest snow
       !     
       zsnowcanp=snowcan(jl)
       ztsncp   =   tsnc(jl)
       ztscsnp   =   tscsn(jl)
       zswsncp = swsnc(jl)
       zrhosncp = rhosnc(jl)
       zsnowcanmax=0._realkind
       snowcanmel(jl)=0._realkind
       soilwmm(jl)=0._realkind
       soilfrwmm(jl)=0._realkind
       snowmeltland(jl)=0._realkind
       timetend=0._realkind
       zvegmax=0._realkind
       zvegmaxfor=0._realkind
       zvegmaxopl=0._realkind
       zsoilfrwmmfor=0._realkind
       zsoilfrwmmopl=0._realkind
       !     
       !     variables for energy corrections
       !     
       zdsnst=0._realkind
       zdsnstfor=0._realkind
       ro_cgns=0._realkind
       ro_cgns2=0._realkind
       ro_cgns3=0._realkind
       ro_cgns4=0._realkind
       ro_cgns5=0._realkind
       ro_cgsn=0._realkind
       ro_cgsn2=0._realkind
       ro_cgsn3=0._realkind
       ro_cgsn4=0._realkind
       ro_cgsn5=0._realkind
       ro_cgc=0._realkind
       ro_cgc2=0._realkind
       ro_cgc3=0._realkind
       ro_cgc4=0._realkind
       ro_cgc5=0._realkind
       ro_cgcsn=0._realkind
       ro_cgcsn2=0._realkind
       ro_cgcsn3=0._realkind
       ro_cgcsn4=0._realkind
       ro_cgcsn5=0._realkind
       !     
       !     printing started
       !     
       zalat=acos(coslat(jl))*180._realkind/3.141592654_realkind
       if(sinlat(jl)<0._realkind)zalat=-zalat
!       lprint=.false.
       !     
       !     if(along(jl)>-74.3 .and. along(jl)<-74.2)then
       !     if(zalat>78.6.and. zalat<78.7)then
       !     if(along(jl)>19.75 .and. along(jl)<19.85)then
       !     if(zalat>-0.5.and. zalat<-0.4)then
       !     if(along(jl)>289.5 .and. along(jl)<289.7)then
       !     if(zalat>-4.1.and. zalat<-3.9)then
       !     if(along(jl)>32.4 .and. along(jl)<32.5)then
       !     if(zalat>36.9.and. zalat<37.0)then
       !     if(along(jl)>3.6 .and. along(jl)<3.7)then
       !     if(zalat>33.8.and. zalat<33.9)then
       lprint=.false.
       if(along(jl)>13.75_realkind .and. along(jl)<14.25_realkind)then
          if(zalat>3.25_realkind.and. zalat<3.75_realkind)then
             lprint=.true.
          endif
       endif
!!$       lprint2=.false.
!!$       if(along(jl)>63.5 .and. along(jl)<63.6)then
!!$          if(zalat>69.0.and. zalat<69.1)then
!!$             !     ps        if(along(jl)>39.1 .and. along(jl)<39.2)then
!!$             !     ps          if(zalat>40.5.and. zalat<40.6)then
!!$             lprint2=.true.
!!$          endif
!!$       endif
!!$       lprint3=.false.
!!$       !     
!!$       !     ps       if(kstep<35000)then
!!$       !     ps         lprint=.false.
!!$       !     ps         lprint2=.false.
!!$       !     ps         lprint3=.false.
!!$       !     ps       endif
!!$       lprint=.false.
!!$       lprint2=.false.
!!$       lprint3=.false.
!!$       lprint4=.false.
!!$       lprint5=.false.

       zlai_conif=lai_conif(jl)
       zdecid=frdecid(jl)
       !     
       !     forest lai weighted from deciduous (with fraction zdecid)
       !     and coniferous part
       zlaifor_int=       zdecid*lai_decid(jl) +   (1._realkind - zdecid)*zlai_conif
       zlaifor_int=max(zlaifor_int,0.01_realkind)
       zlaiopn_int=laiopn_int(jl)
       zlaiopn_int=max(zlaiopn_int,0.01_realkind)
       !     
       !     set open-land vegetation cover according to field
       zvegopl=vegopl(jl)
       !     ps050103      zvegfor=vegfor(jl)
       zvegfor=0.99_realkind
       !     
!       zlatns = latvap+latice*(0.5_realkind-sign(0.5_realkind,tsns(jl)-tmelt))!MARCO
!       zlatsn = latvap+latice*(0.5_realkind-sign(0.5_realkind,tsnow(jl)-tmelt)) !MARCO
!       zlatsc = latvap+latice*(0.5_realkind-sign(0.5_realkind,tsc(jl)-tmelt)) !MARCO 
!       zlatsnc = latvap+latice*(0.5_realkind-sign(0.5_realkind,tsnc(jl)-tmelt)) !MARCO
       
       env = 1.0_realkind
       alpha(1) = latvap + latice/(2.0_realkind*env)*(tmelt+env)
       alpha(2) = -latice/(2._realkind*env)
       zlatns = latvap
       if(abs(tsns(jl)-tmelt)<=env)then
          zlatns = alpha(1) +  alpha(2)*tsns(jl)
       elseif(tsns(jl)-tmelt<=-env)then
          zlatns = latvap+latice
       endif
       zlatsn = latvap
       if(abs(tsnow(jl)-tmelt)<=env)then
           zlatsn = alpha(1) +  alpha(2)*tsnow(jl)
       elseif(tsnow(jl)-tmelt<=-env)then
          zlatsn = latvap+latice
       endif
       zlatsc = latvap
       if(abs(tsc(jl)-tmelt)<=env)then
          zlatsc = alpha(1) +  alpha(2)*tsc(jl)
       elseif(tsc(jl)-tmelt<=-env)then
          zlatsc = latvap+latice
       endif
       zlatsnc = latvap
       if(abs(tsnc(jl)-tmelt)<=env)then
          zlatsnc = alpha(1) +  alpha(2)*tsnc(jl)
       elseif(tsnc(jl)-tmelt<=-env)then
          zlatsnc = latvap+latice
       endif
#ifdef SNOWINT
       !zlatc = latvap+latice*(0.5_realkind-sign(0.5_realkind,tc(jl)-tmelt))!MARCO
       zlatc = latvap
       if(abs(tc(jl)-tmelt)<=env)then
           zlatc = alpha(1) +  alpha(2)*tc(jl)
       elseif(tc(jl)-tmelt<=-env)then
          zlatc = latvap+latice
       endif
       !     ps011218 in practice zlatc is used for plus-degrees expect for
       !     ps011218 evaporation of intercepted water at minus-degrees. however,
       !     ps011218 use latvap in this case also since tha water is not frozen.
#else
       zlatc = latvap
#endif
       zwsflqsn=dtime/(rhoh2o*zlatsn)
       zwsflqsc=dtime/(rhoh2o*zlatsc)
       zwsflqsnc=dtime/(rhoh2o*zlatsnc)
       zwsflqc=dtime/(rhoh2o*zlatc)
       zwsflq1=dtime/(rhoh2o*zlatns)

       zcsnow=(2.115_realkind+0.00779_realkind*(tsnow(jl)-tmelt))*1000._realkind
       !     
       zlandon=0._realkind
       zlandoff=1._realkind
       !     
       if(frland(jl)>0.01_realkind) then
          !     
          zlandon=1._realkind
          zlandoff=0._realkind
          !     
          !     introduction of the fao soil texture types, bb and mtr, 980626:
          !     use nint(soiltype(jl))
          !     
          isoil=nint(soiltype(jl))

          if(isoil< 1 .or. isoil> 12) then
             isoil=6
          endif


          !     consider also fao-type 8,  sea and glacier ice:
          !******************************
          !     ps         if(isoil==8) then
          !******************************
          !     what about this wlambda value for ice?
          !     ps            wlambda1=1.e-10
          !     ps            wlambda2=wlambda1
          !     ps            tlambda1=2.22
          !     ps            tlambda2=tlambda1
          !     ps            ro_cgw1=zcsnow*1000.
          !     ps            ro_cgw2=ro_cgw1
          !     pscps021104
          !     ps            zvegopl=0.0
          !     ps            isoil=4
          !     
          !******************************
          !     ps         else
          !******************************

          ww1opl=sw1opl(jl)/dz1w
          ww1opl=min(max(ww1opl,vfl_mix1(jl)),vcc_mix1(jl)) !cj 
          ww1for=sw1for(jl)/dz1w
          ww1for=min(max(ww1for,vfl_mix1(jl)),vcc_mix1(jl)) !cj
          ww2opl=sw2opl(jl)/dz1w
          ww2opl=min(max(ww2opl,vfl_mix2(jl)),vcc_mix2(jl)) !cj
          ww2for=sw2for(jl)/dz1w
          ww2for=min(max(ww2for,vfl_mix2(jl)),vcc_mix2(jl)) !cj
          ww3opl=sw3opl(jl)/dz1w
          ww3opl=min(max(ww3opl,vfl(isoil)),vcc(isoil)) ! same as previously
          ww3for=sw3for(jl)/dz1w
          ww3for=min(max(ww3for,vfl(isoil)),vcc(isoil)) ! same as presviously

          !     zro_cg_dry  dry soil density (kg/m3)

          !zro_cg_dry=(1._realkind-vsw(isoil))*2650.                  ! cj dry mineral soil density              [kg/m3]
          !     volum heat cap (j m-3 k-1) (ro_cg=rhos*zcsoil in old surf) ! cj 4.19e3       = specific heat of water [j/(kg k)]
          ! ro_cgw1opl=1.e3*zro_cg_dry + ww1opl*1000.*4.19e3  ! cj 4.19e3*1000  = heat capacity of water [j/(m3 k)] 
          ! ro_cgw1for=1.e3*zro_cg_dry + ww1for*1000.*4.19e3  ! cj 1e3 = specific heat of soil minerals? [j/(kg k)]
          ! ro_cgw2opl=1.e3*zro_cg_dry + ww2opl*1000.*4.19e3  ! cj in p-l, spec heat of soil mineral=733 [j/(kg k)]
          ! ro_cgw2for=1.e3*zro_cg_dry + ww2for*1000.*4.19e3  !
          ! ro_cgw3opl=1.e3*zro_cg_dry + ww3opl*1000.*4.19e3  ! 
          ! ro_cgw3for=1.e3*zro_cg_dry + ww3for*1000.*4.19e3  !


          !     thermal conductivity according to peters-lidard et al.
          !     jas 1998, vol 55, nr 7, pp1209-1224
          !ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
          zgamd=(1._realkind-vsw(isoil))*2700._realkind !cj dry mineral soil density
          zcapdry=(0.135_realkind*zgamd+64.7_realkind)/(2700._realkind- &
               0.947_realkind*zgamd) !cj thermal cond. of dry  mineral soil
          zcap0=3._realkind
          if(cquartz(isoil)>0.2_realkind)zcap0=2._realkind !cj zcaps,thermal cond. mineral soil solids
          zcaps=tlambdaq**cquartz(isoil) * zcap0**(1._realkind-cquartz(isoil)) !cj for top leyers: replaced by zcaps_mix1 & 2 from conv_ecocli.f
          !ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc!cj top layers = 1w and 2w; 1-3temp




          !     write carbon/organic soil related variables and constants to check 

          dummyvar=123456789._realkind ! cj

          !     !     --- s sweden, skåne, mainly mineral soil
          !     lprint6=.false.
          !     if(along(jl)>15.3 .and. along(jl)<15.6)then    
          !     if(zalat>56.8 .and. zalat<57.2)then         
          !     lprint6=.true.                                 
          !     endif
          !     endif

          !     --- holland,  mainly  mineral soil
          !     lprint6=.false.
          !     if(along(jl)>13.1 .and. along(jl)<13.5)then    
          !     if(zalat>53.5 .and. zalat<53.9)then         
          !     lprint6=.true.                                 
          !     endif
          !     endif

          !     --- greece, mainly  mineral soil
          !     lprint6=.false.
          !     if(along(jl)>20.5_realkind .and. along(jl)<20.8)then    
          !     if(zalat>39.7 .and. zalat<40.2)then         
          !     lprint6=.true.                                 
          !     endif
          !     endif

          !     --- mid-n sweden, mix organic and mineral
          !     lprint6=.false.
          !     if(along(jl)>18.5 .and. along(jl)<19.3)then    
          !     if(zalat>64.3 .and. zalat<64.6)then         
          !     lprint6=.true.                                 
          !     endif
          !     endif

          !     ---  n finland, 100% organic soil
          !     lprint6=.false.
          !     if(along(jl)>26.0 .and. along(jl)<26.5)then 
          !     if(zalat>65.3 .and. zalat<65.8)then
          !     lprint6=.true.                                 
          !     endif
          !     endif
          !     
          !     !     ---  spain, mainly mineral soil
          !     lprint7=.false.
          !     if(along(jl)>357.1 .and. along(jl)<357.7)then 
          !     if(zalat>40.2 .and. zalat<40.5_realkind)then
          !     lprint7=.true.                                 
          !     endif
          !     endif


          !     print *,jl,kstep,zalat
          !     if(lprint6)write(101,'(2i6,2f8.3,4(1pe12.4))')          ! cj 1) vsw
          !     &        jl,kstep,zalat,along(jl),vsw(isoil),vsw_mix1(jl),
          !     &        vsw_mix2(jl),dummyvar
          !     if(lprint6)write(102,'(2i6,2f8.3,4(1pe12.4))')          ! cj 2) vcc
          !     &        jl,kstep,zalat,along(jl),vcc(isoil),vcc_mix1(jl),
          !     &        vcc_mix2(jl),dummyvar
          !     if(lprint6)write(103,'(2i6,2f8.3,4(1pe12.4))')          ! cj 3) vfl
          !     &        jl,kstep,zalat,along(jl),vfl(isoil),vfl_mix1(jl),  
          !     &        vfl_mix2(jl),dummyvar                                    
          !     if(lprint6)write(104,'(2i6,2f8.3,4(1pe12.4))')          ! cj 4) psis
          !     &        jl,kstep,zalat,along(jl),psis(isoil),psis_mix1(jl),
          !     &        psis_mix2(jl),dummyvar
          !     if(lprint6)write(105,'(2i6,2f8.3,4(1pe12.4))')          ! cj 5) bw
          !     &        jl,kstep,zalat,along(jl),bw(isoil),bw_mix1(jl),
          !     &        bw_mix2(jl),dummyvar
          !     if(lprint6)write(106,'(2i6,2f8.3,4(1pe12.4))')          ! cj 6) ks, sat hyd cond [m/s *10^-6]
          !     &        jl,kstep,zalat,along(jl),ks(isoil),ks_mix1(jl),  
          !     &        ks_mix2(jl),dummyvar    
          !     
          !     if(lprint6)write(107,'(2i6,2f8.3,4(1pe12.4))')          ! cj 7) zcapdry: heat cond of dry soil
          !     &        jl,kstep,zalat,along(jl),zcapdry,zcapdry_mix1(jl),
          !     &        zcapdry_mix2(jl),dummyvar
          !     if(lprint6)write(108,'(2i6,2f8.3,4(1pe12.4))')          ! cj 8) zcaps: heat cond of soil solids
          !     &        jl,kstep,zalat,along(jl),zcaps,zcaps_mix1(jl),
          !     &        zcaps_mix2(jl),dummyvar
          !     if(lprint6)write(109,'(2i6,2f8.3,4(1pe12.4))')          ! cj 9) cs: heat capacity soil solids
          !     &        jl,kstep,zalat,along(jl),cs_min,cs_mix1(jl),  
          !     &        cs_mix2(jl),dummyvar                                    
          !     if(lprint6)write(110,'(2i6,2f8.3,4(1pe12.4))')          ! cj 10) cs for water and ice
          !     &        jl,kstep,zalat,along(jl),cs_w,cs_i,
          !     &        dummyvar,dummyvar
          !     
          !     if(lprint7)write(301,'(2i6,2f8.3,4(1pe12.4))')          ! cj
          !     &        jl,kstep,zalat,along(jl),vsw(isoil),vsw_mix1(jl),
          !     &        vsw_mix2(jl),dummyvar
          !     if(lprint7)write(302,'(2i6,2f8.3,4(1pe12.4))')          ! cj
          !     &        jl,kstep,zalat,along(jl),vcc(isoil),vcc_mix1(jl),
          !     &        vcc_mix2(jl),dummyvar
          !     if(lprint7)write(303,'(2i6,2f8.3,4(1pe12.4))')          ! cj
          !     &        jl,kstep,zalat,along(jl),vfl(isoil),vfl_mix1(jl),  
          !     &        vfl_mix2(jl),dummyvar                                    
          !     if(lprint7)write(304,'(2i6,2f8.3,4(1pe12.4))')          ! cj
          !     &        jl,kstep,zalat,along(jl),psis(isoil),psis_mix1(jl),
          !     &        psis_mix2(jl),dummyvar
          !     if(lprint7)write(305,'(2i6,2f8.3,4(1pe12.4))')          ! cj
          !     &        jl,kstep,zalat,along(jl),bw(isoil),bw_mix1(jl),
          !     &        bw_mix2(jl),dummyvar
          !     if(lprint7)write(306,'(2i6,2f8.3,4(1pe12.4))')          ! cj
          !     &        jl,kstep,zalat,along(jl),ks(isoil),ks_mix1(jl),  
          !     &        ks_mix2(jl),dummyvar    
          !     
          !     if(lprint7)write(307,'(2i6,2f8.3,4(1pe12.4))')          ! cj
          !     &        jl,kstep,zalat,along(jl),zcapdry,zcapdry_mix1(jl),
          !     &        zcapdry_mix2(jl),dummyvar
          !     if(lprint7)write(308,'(2i6,2f8.3,4(1pe12.4))')          ! cj
          !     &        jl,kstep,zalat,along(jl),zcaps,zcaps_mix1(jl),
          !     &        zcaps_mix2(jl),dummyvar
          !     if(lprint7)write(309,'(2i6,2f8.3,4(1pe12.4))')          ! cj
          !     &        jl,kstep,zalat,along(jl),cs_min,cs_mix1(jl),  
          !     &        cs_mix2(jl),dummyvar                                    
          !     if(lprint7)write(310,'(2i6,2f8.3,4(1pe12.4))')          ! cj
          !     &        jl,kstep,zalat,along(jl),cs_w,cs_i,
          !     &        dummyvar,dummyvar

          !     ---------------------------------------------------------------------------------                    
          !     diffusivity for soil moisture (m2 s-1):
          !     ps021022
          !     according to viterbo the power should be (bw+2) and not
          !     (bw+3) as specified here ! the reason for the error is
          !     the error in eq. (13) in mccumber and pielke
          !     
          aks=ks(isoil)*1.e-6_realkind

          wlambda1opl=bw_mix1(jl)*ks_mix1(jl)*1.e-6_realkind*psis_mix1(jl)/  & ! cj open land dz1w
               vsw_mix1(jl)*(ww1opl/vsw_mix1(jl))**(bw_mix1(jl)+2._realkind) ! cj         
          wlambda2opl=bw_mix2(jl)*ks_mix2(jl)*1.e-6_realkind*psis_mix2(jl)/   & ! cj        dz2w
               vsw_mix2(jl)*(ww2opl/vsw_mix2(jl))**(bw_mix2(jl)+2._realkind) ! cj 
          wlambda3opl=bw(isoil)*aks*psis(isoil)/vsw(isoil) & ! cj        z3w
               *(ww3opl/vsw(isoil))**(bw(isoil)+2._realkind) ! cj (same as previously)
          wlambda1for=bw_mix1(jl)*ks_mix1(jl)*1.e-6_realkind*psis_mix1(jl)/  & ! cj forest    dz1w
               vsw_mix1(jl)*(ww1for/vsw_mix1(jl))**(bw_mix1(jl)+2._realkind) ! cj
          wlambda2for=bw_mix2(jl)*ks_mix2(jl)*1.e-6_realkind*psis_mix2(jl)/  & ! cj        dz2w
               vsw_mix2(jl)*(ww2for/vsw_mix2(jl))**(bw_mix2(jl)+2._realkind) ! cj
          wlambda3for=bw(isoil)*aks*psis(isoil)/vsw(isoil)  & ! cj        z3w
               *(ww3for/vsw(isoil))**(bw(isoil)+2._realkind) ! cj (same as previously

          !     cj0902     wlambda1opl=bw(isoil)*aks*psis(isoil)/vsw(isoil)     
          !     cj0902          *(ww1opl/vsw(isoil))**(bw(isoil)+2.)       
          !     cj0902     wlambda1for=bw(isoil)*aks*psis(isoil)/vsw(isoil)
          !     cj0902          *(ww1for/vsw(isoil))**(bw(isoil)+2.)       
          !     cj0902     wlambda2opl=bw(isoil)*aks*psis(isoil)/vsw(isoil)
          !     cj0902          *(ww2opl/vsw(isoil))**(bw(isoil)+2.)       
          !     cj0902     wlambda2for=bw(isoil)*aks*psis(isoil)/vsw(isoil)
          !     cj0902          *(ww2for/vsw(isoil))**(bw(isoil)+2.)       


          !     weight the wlambda-values to soil-layer boundaries

          wlambda12opl=2._realkind*wlambda1opl*wlambda2opl/(wlambda1opl*dz2w+wlambda2opl*dz1w)
          wlambda23opl=2._realkind*wlambda2opl*wlambda3opl/(wlambda2opl*z3wopl+wlambda3opl*dz2w)
          wlambda12for=2._realkind*wlambda1for*wlambda2for/(wlambda1for*dz2w+wlambda2for*dz1w)
          wlambda23for=2._realkind*wlambda2for*wlambda3for/(wlambda2for*z3wfor+wlambda3for*dz2w)

          !******************************
          !     ps         endif
          !******************************
          !     
          !     weight fractions of surface types for land
          !     --------------------------------------------
          !     
          !     zsnw = part of land covered with snow
          !     
          zsnw=frsnw(jl)
          zsnwinv=0._realkind
          if(zsnw>0._realkind)zsnwinv=1._realkind/zsnw
          !     
          !     zfrop (open land area) + zcw (forest area)
          !     
          zfrop=frop(jl)
          !     
          zcw=frcw(jl)
          zcwinv=0._realkind
          if(zcw>0._realkind)zcwinv=1._realkind/zcw
          !     
          !     zfrsnfor = part of forest covered with snow
          !     
          zfrsnfor=frsnfor(jl)*zlandon
          zfrsnforinv=0._realkind
          if(zfrsnfor>0._realkind)zfrsnforinv=1._realkind/zfrsnfor
          zcwsnforinv=zcwinv*zfrsnforinv
          !
          !     fraction of non-forested land area
          zfrtopl = 1._realkind-zcw
          if(lprint)write(902,'(2i6,2f8.3,4(1pe12.4))')jl,kstep,zalat,along(jl),zsnw,zfrop,zcw,zfrsnfor
!!$          if(lprint2)write(202,'(2i6,2f8.3,4(1pe12.4))')jl,kstep,zalat,along(jl),zsnw,zfrop,zcw,zfrsnfor
!!$          if(lprint3)write(302,'(2i6,2f8.3,4(1pe12.4))')jl,kstep,zalat,along(jl),zsnw,zfrop,zcw,zfrsnfor


          ! for guess use predefined values of emissivity as specified in inisurf.f
          if(use_guess)then
             if(abs(soiltype(jl)-2.0_realkind)<1.e-14_realkind)then
                zemsoil=emdesert
             else
                zemsoil=emoplsoil
             endif
             zemopl=zvegopl*emoplveg+(1._realkind-zvegopl)*zemsoil
             zemfor=emforconif*(1._realkind-zdecid)+emfordecid*zdecid
          else
             !     else use values of emissivity as specified by ecoclimap

             zemopl=emis_t1(jl)
             zemfor=(1._realkind-zdecid)*emis_t2(jl)+zdecid*emis_t3(jl)
          endif

          !     snow density
          !     ------------
          !     wjb adjusted minimum fractions for which we start calculations
          !     
          if(zsnw>=zfrinsg)then
             zrhosn=rhosn(jl)
          else
             zrhosn=rhosnow_int
          endif
          tlambdasn=tlambdaice*(zrhosn/rhoice)**1.88_realkind
          !     
          if(zfrsnfor>=zfrinsg)then
             zrhosnc=rhosnc(jl)
          else
             zrhosnc=rhosnow_int
          endif
          tlambdasnc=tlambdaice*(zrhosnc/rhoice)**1.88_realkind

          !     convective part of total precipitataion
          !     ps090526
          zslask=0._realkind
          if((draindt(jl)+dsnowdt(jl))>0._realkind)then
             zslask=(raincv_kf(jl)+snowcv_kf(jl))/(draindt(jl)+dsnowdt(jl))
             zslask=max(0._realkind,min(1._realkind,zslask))
          endif
          zslask=1._realkind-zslask
          zconvred=zslask*(1._realkind-zconvredcoef)+zconvredcoef
          !     ps090526


          !     calculate the forest part first since troughfall is needed in calculation of
          !     rain freezing under the trees and under open land canopy.
          !     svegfor(jl) is the depth (m) of water on the actual area with intercepted
          !     water, i.e. zcw and not the whole land area 
          !     
          zviewfl=exp(-0.5_realkind*zlaifor_int)
          !     
          !     *****************************************
          if(zcw>0._realkind)then
             !     *****************************************
             !     
             if(svegfor(jl)<1.e-15_realkind)svegfor(jl)=0.0_realkind
             zsvegfor=svegfor(jl)
             !     do not use interception if tc<=0 degc
             !     
#ifdef SNOWINT
             !     df020218    water if tc >= tmelt
             !     
             !     --> all canopy-snow falls to surface
             !     
             !     zsnowf = snow that falls to surface
             !     
             if(tc(jl)>=tmelt)then
                zsnowf=dsnowdt(jl)+snowcan(jl)/zrsfl
                zsnowcanp=0._realkind
#endif
                !     
                !     ---------------------------------------------------------------
                !     canopy water
                !     ---------------------------------------------------------------
                !     calculation for forest (fraction=zcw)
                !     ---------------------------------------------------------------
                !     
                !     calculation of canopy water tendency s.gollvik and b bringfelt 1999
                !     solving equation 23 pp 542 in noilhan-planton implicitely
                !     with newton-raphson method, assuming evhv given (the time-
                !     variation of qsat(ts) assumed to be small enough to be taken
                !     directly from slfluxo). runoff (wr>wrmax) from leaves should be used as 
                !     precip for the forest covered land.
                !     
                zvegmax=0.2_realkind*zvegfor*zlaifor_int
                !     ps090526
                zvegmax=zvegmax*zconvred
                !     ps090526
                zvegmaxfor=zvegmax
                zvegmm=zsvegfor*rhoh2o
                zvegmmfor=zvegmm
                !     sveg can get larger than max in time stepping:
                !     ps100314 zthrfor=max(0._realkind,zvegmm-zvegmax)
                zthrfor=max(0._realkind,zvegmm-zvegmax)/dtime
                zvegmm=min(zvegmm,zvegmax)
                zvegp=0._realkind
                zrainf=0._realkind

                !     "hirlam definition":
                zrainh=draindt(jl)
                !''''''''''''''''''
                if (zvegmax>zveglim)then
                   !''''''''''''''''''
                   !     
                   !     if er(jl)<0 we have dew on the leaves and the equation to solve is then
                   !     
                   !     d(wr)/dt = a + b ; a=veg*p , b=er(jl)/(dens*l*)
                   !     
                   !     
                   !     we are solving the equation implicetely:
                   !     
                   !     d(wr)/dt = a - b*wr**(2/3) ; a=veg*p , b=er(jl)/(dens*l*wr(tau-1)**(2/3))
                   !     
                   !     compute zbb=er/(density*l*wr(tau-1)**2/3)
                   !     

                   !     1:st case: evhv>0: evaporation, er has factor delta
                   !     2:nd case: evhv<=0: condensation, er has no factor delta
                   !     zer=evhvfor(jl)
                   !     **********
                   if (evhvfor(jl)>0.0_realkind)then
                      !     **********
                      zaa=zvegmm**z23
                      zcc=0.5_realkind*dtime*zvegfor*evhvfor(jl)/(zlatc*zvegmax**z23)

                      zdd=-zvegmm-dtime*zvegfor*zrainh+zcc*zaa


                      !     test whether end wr gt max:
                      !     zthr throughfall for  whole geogr area
                      !     e0=2*zcc*zaa


                      zf0=zdd
                      zfx=zvegmax + zcc*zvegmax**z23 + zdd

                      !     zf is the function to be solved.
                      !     for the new value of wr=zvegp0: zf=0
                      !     zf0 is the value of zf at at zero canopy water 
                      !     zfx is the value of zf at at max canopy water 
                      !     always: zf0 le zfx

                      if (zf0<0._realkind.and.zfx>0._realkind)then
                         zee=-(zdd/(zvegmax**z23+zcc*zvegmax**z13))**3
                         !     
                         zaa=zee**z13
                         zff=zee+zcc*zaa*zaa+zdd
                         zaa=1._realkind+2._realkind*zcc/(3._realkind*zaa)
                         zee=zee-zff/zaa
                         !     
                         zaa=zee**z13
                         zff=zee+zcc*zaa*zaa+zdd
                         zaa=1._realkind+2._realkind*zcc/(3._realkind*zaa)
                         zee=zee-zff/zaa
                         !     
                         zaa=zee**z13
                         zff=zee+zcc*zaa*zaa+zdd
                         zaa=1._realkind+2._realkind*zcc/(3._realkind*zaa)
                         zee=zee-zff/zaa
                         !     
                         zaa=zee**z13
                         zff=zee+zcc*zaa*zaa+zdd
                         zaa=1._realkind+2._realkind*zcc/(3._realkind*zaa)
                         zee=zee-zff/zaa
                         !     
                         zaa=zee**z13
                         zff=zee+zcc*zaa*zaa+zdd
                         zaa=1._realkind+2._realkind*zcc/(3._realkind*zaa)
                         zee=zee-zff/zaa
                         !     
                         zaa=zee**z13
                         zff=zee+zcc*zaa*zaa+zdd
                         zaa=1._realkind+2._realkind*zcc/(3._realkind*zaa)
                         zee=zee-zff/zaa
                         !     
                         zvegp0=zee

                         if(zvegp0<1.e-6_realkind)zvegp0=0._realkind

                      elseif (zf0<0._realkind.and.zfx<=0._realkind)then

                         !     rainy case - potential evap from canopy water >= max:
                         zvegp0=-zdd-zcc*zvegmax**z23

                      else
                         !     dry case:
                         zvegp0=0._realkind

                      endif

                      !     **********
                   else
                      !     evhv also on non water part (condensation)
                      zvegp0=zvegmm+dtime*zvegfor*(zrainh-evhvfor(jl)/zlatc)
                   endif
                   !     **********

                   !     over whole geogr area:
                   zthr=max(0.0_realkind, (zvegp0-zvegmax)/dtime ) 
                   zvegp=zvegp0-dtime*zthr

                   !''''''''''''''''''
                else
                   zthr=0.0_realkind
                   zvegp=0.0_realkind
                endif
                !''''''''''''''''''

                zthrfor=zthrfor+zthr
                zrainf=zthrfor+(1._realkind-zvegfor)*zrainh

                !     back to m of water (from mm):
                zvegp=zvegp/rhoh2o
                zvegpfor=zvegp

                !     calculate evaporation loss for use in water balance calculations
                zsvfor=(zvegpfor-zsvegfor-(draindt(jl)*zvegfor-zthrfor)*dtime/rhoh2o)*zcw
                !     
#ifdef SNOWINT
                !     tc<0 degc
                !     
                !     df020218     snow if tc < tmelt
                !     
             else
                !     
                !     all rain to surface, no water on canopy
                zrainf=draindt(jl)
                zvegpfor=0._realkind

                !     density for snow on canopy, hedstrom and pomeroy 1998, eqn 13
                rhosncan=67.92_realkind+51.25_realkind*exp((tc(jl)-tmelt)/2.59_realkind)
                !     
                !     maximum snow on canopy, eqn 11
                zsnowcanmax=5.9_realkind*(0.27_realkind+46._realkind/rhosncan)*zlaifor_int/rhoh2o
                !     
                !     interception efficiency; eqn 7 & 10
                zxcan=10._realkind
                zwcan=0.8_realkind
                zjcan=1000._realkind
                zcccan=zjcan/(zjcan+zxcan)
                !     eqn 10
                zcpcan=zcccan/(1._realkind-(zcccan*vegvel(jl)*15._realkind/zwcan/zjcan))
                zcpcan=min(1._realkind,zcpcan)
                zcpcan=max(0._realkind,zcpcan)
                !     zcpcan=1._realkind
                zkcan=zcpcan/zsnowcanmax
                !     eqn 7
                zinteff=(zsnowcanmax-snowcan(jl))*(1_realkind-exp(-zkcan*dsnowdt(jl)*zrsfl))
                !     
                zinteff=max(zinteff,0._realkind)
                zinteff=min(zinteff,dsnowdt(jl)*zrsfl*zcwinv)
                !     
                !     snow on canopy = previous snow + frozen water on canopy +
                !     & interception efficiency + (-evaporation)
                !     
                zsnowcan=snowcan(jl)+zsvegfor+zinteff
                !     
                !     throughfall:
                zsnowf=dsnowdt(jl)*zrsfl-zinteff
                !     
                !     eqn 5
                zsnowcanp=zsnowcan*exp(-4.498e-6_realkind*dtime)
                zsnowf=zsnowf+(zsnowcan-zsnowcanp)
                !     
                !     evaporation
                zsnowcanp=zsnowcanp+latsnowcan(jl)/zlatc*zrsfl
                !     
                !     df test
                !     zsnowcanp=0._realkind
                !     zsnowf=dsnowdt(jl)*zrsfl
                !     
                zsnowcanp=max(zsnowcanp,0._realkind)
                !     
                if(zsnowcanp>=zsnowcanmax)then
                   zsnowf=zsnowf+(zsnowcanp-zsnowcanmax)
                   zsnowcanp=zsnowcanmax
                endif
                !     
                !     if wind at canopy top > windmax then some snow falls to surface
                !     zwindmax=10._realkind
                !     if(vegvel(jl)>=zwindmax)then
                !     zsnowcanp=0.5_realkind*zsnowcanp
                !     zsnowf=zsnowf+zsnowcanp
                !     endif
                !     
                !     
                zsnowf=zsnowf/zrsfl
                !     
                !     
                zsvfor=0._realkind
                !     
                !     df for canopy snow:
                !     
             endif
#else
             zsnowf=dsnowdt(jl)
             zsnowcanp=0._realkind
#endif
             !     
             !     ************************************************
          else
             zvegpfor=0._realkind
             zrainf=draindt(jl)
             zsvfor=0._realkind
             !     df
             zsnowf=dsnowdt(jl)
             zsnowcanp=0._realkind
          endif
          !     ************************************************
          !     *****************************************
          if(zfrop>0._realkind)then
             !     *****************************************
             !     
             if(svegopl(jl)<1.e-15_realkind)svegopl(jl)=0.0_realkind
             zsvegopl=svegopl(jl)
             !     do not use interception if tsns<=0 degc
             !     
             !     ps011218         if(tsns(jl)>tmelt)then
             !     
             !     
             !     ---------------------------------------------------------------
             !     canopy water
             !     ---------------------------------------------------------------
             !     calculation for open land (fraction=zfrop)
             !     ---------------------------------------------------------------
             !     
             !     calculation of canopy water tendency s.gollvik and b bringfelt 1999
             !     solving equation 23 pp 542 in noilhan-planton implicitely
             !     with newton-raphson method, assuming evhv given (the time-
             !     variation of qsat(ts) assumed to be small enough to be taken
             !     directly from slfluxo). runoff (wr>wrmax) from leaves should be used as 
             !     precip for the forest covered land.
             !     
             zvegmax=0.2_realkind*zvegopl*zlaiopn_int
             !     ps090526
             zvegmax=zvegmax*zconvred
             !     ps090526
             zvegmaxopl=zvegmax
             zvegmm=zsvegopl*rhoh2o
             !     sveg can get larger than max in time stepping:
             !     ps100314 zthropl=max(0._realkind,zvegmm-zvegmax)
             zthropl=max(0._realkind,zvegmm-zvegmax)/dtime
             zvegmm=min(zvegmm,zvegmax)
             zvegp=0._realkind
             zrainop=0._realkind

             !     "hirlam definition":
             zrainh=draindt(jl)
             !''''''''''''''''''
             if (zvegmax>zveglim)then
                !''''''''''''''''''
                !     
                !     if er(jl)<0 we have dew on the leaves and the equation to solve is then
                !     
                !     d(wr)/dt = a + b ; a=veg*p , b=er(jl)/(dens*l*)
                !     
                !     
                !     we are solving the equation implicetely:
                !     
                !     d(wr)/dt = a - b*wr**(2/3) ; a=veg*p , b=er(jl)/(dens*l*wr(tau-1)**(2/3))
                !     
                !     compute zbb=er/(density*l*wr(tau-1)**2/3)
                !     

                !     1:st case: evhv>0: evaporation, er has factor delta
                !     2:nd case: evhv<=0: condensation, er has no factor delta
                !     zer=evhvfor(jl)
                !     **********
                if (evhvopl(jl)>0.0_realkind)then
                   !     **********
                   zaa=zvegmm**z23
                   zcc=0.5_realkind*dtime*zvegopl*evhvopl(jl)/(zlatns*zvegmax**z23)

                   zdd=-zvegmm-dtime*zvegopl*zrainh+zcc*zaa

                   !     test whether end wr gt max:
                   !     zthr throughfall for  whole geogr area
                   !     e0=2*zcc*zaa

                   zf0=zdd
                   zfx=zvegmax + zcc*zvegmax**z23 + zdd

                   !     zf is the function to be solved.
                   !     for the new value of wr=zvegp0: zf=0
                   !     zf0 is the value of zf at at zero canopy water 
                   !     zfx is the value of zf at at max canopy water 
                   !     always: zf0 le zfx

                   if (zf0<0._realkind.and.zfx>0._realkind)then
                      zee=-(zdd/(zvegmax**z23+zcc*zvegmax**z13))**3
                      !     
                      zaa=zee**z13
                      zff=zee+zcc*zaa*zaa+zdd
                      zaa=1._realkind+2._realkind*zcc/(3._realkind*zaa)
                      zee=zee-zff/zaa
                      !     
                      zaa=zee**z13
                      zff=zee+zcc*zaa*zaa+zdd
                      zaa=1._realkind+2._realkind*zcc/(3._realkind*zaa)
                      zee=zee-zff/zaa
                      !     
                      zaa=zee**z13
                      zff=zee+zcc*zaa*zaa+zdd
                      zaa=1._realkind+2._realkind*zcc/(3._realkind*zaa)
                      zee=zee-zff/zaa
                      !     
                      zaa=zee**z13
                      zff=zee+zcc*zaa*zaa+zdd
                      zaa=1._realkind+2._realkind*zcc/(3._realkind*zaa)
                      zee=zee-zff/zaa
                      !     
                      zaa=zee**z13
                      zff=zee+zcc*zaa*zaa+zdd
                      zaa=1._realkind+2._realkind*zcc/(3._realkind*zaa)
                      zee=zee-zff/zaa
                      !     
                      zaa=zee**z13
                      zff=zee+zcc*zaa*zaa+zdd
                      zaa=1._realkind+2._realkind*zcc/(3._realkind*zaa)
                      zee=zee-zff/zaa
                      !     
                      zvegp0=zee
                      !     

                      if(zvegp0<1.e-6_realkind)zvegp0=0._realkind

                   elseif (zf0<0._realkind.and.zfx<=0._realkind)then

                      !     rainy case - potential evap from canopy water >= max:
                      zvegp0=-zdd-zcc*zvegmax**z23

                   else

                      !     dry case:
                      zvegp0=0._realkind

                   endif

                   !     **********
                else
                   !     evhv also on non water part (condensation)
                   zvegp0=zvegmm+dtime*zvegopl*(zrainh-evhvopl(jl)/zlatns)
                endif
                !     **********

                !     over whole geogr area:
                zthr=max(0.0_realkind, (zvegp0-zvegmax)/dtime ) 
                zvegp=zvegp0-dtime*zthr

                !''''''''''''''''''
             else
                zthr=0.0_realkind
                zvegp=0.0_realkind
             endif
             !''''''''''''''''''
             !     
             zthropl=zthropl+zthr
             nysvoplmm=(zvegp-zvegmm)-(zrainh-zthropl)*dtime
             nysvoplw=nysvoplmm/dtime*zlatns


             !     zrainop=zthr+zrainh*(1-zvegopl)
             !     ps020125         zrainop=zthropl*zfrop+(1._realkind-zvegopl*zfrop)*zrainh
             !     ps         zrainop=zthropl
             zrainop=zthropl+zrainh*(1.0_realkind-zvegopl)
             !     
             !     back to m of water (from mm):
             zvegp=zvegp/rhoh2o
             zvegpopl=zvegp
             !     
             !     tsns<0 degc
             !     ps011218          else
             !     ps011218            zrainop=draindt(jl)+zsvegopl/zrsfl*zfrop
             !     ps011218            zvegpopl=0._realkind
             !     ps011218          endif
             !     
             !     ps010829
             !     calculate evaporation loss for use in water balance calculations
             !     ps020125         zsvopl=zvegpopl-zsvegopl-
             !     ps020125     &          (draindt(jl)-zrainop)*dtime/rhoh2o
             zsvopl=(zvegpopl-zsvegopl-(draindt(jl)*zvegopl-zthropl)*dtime/rhoh2o)*zfrop
             !     
             !     ************************************************
          else
             zvegpopl=0._realkind
             zrainop=draindt(jl)+svegopl(jl)/zrsfl*zfrop
             zsvopl=0._realkind
          endif
          !     ************************************************
          !     
          !     l    snow/rain falling on warm/cold surface that gives rise to phase change
          !     ----------------------------------------------------------------------
          !     
          !     dsnowdt melting on warm snowfree part
          !     
          zmelbs = dsnowdt(jl)
          zmelbs= zmelbs*max(0._realkind,sign(1._realkind,tsns(jl)-ztmelt))
          if(zfrop<zfrinsg) zmelbs=0._realkind
          !     dsnowdt melting on warm surface with temp tsc
          !     
          zmelbsc = zsnowf
          zmelbsc= zmelbsc*max(0._realkind,sign(1._realkind,tsc(jl)-ztmelt))
          if(zcw<zfrlim) zmelbsc=0._realkind

          !     effective rain freezing on snowfree part in tree area
          !     
          zfzbrc=zrainf     
          zfzbrc= zfzbrc*max(0._realkind,sign(1._realkind,ztmelt-tsc(jl)))
          if(zcw<zfrinsg) zfzbrc=0._realkind
          !     snowmip put zfzbrc to soil
          zfzbrc=0._realkind
          !     
          !     draindt freezing on cold snowfree part
          !     
          zfzbr=zrainop    
          zfzbr= zfzbr*max(0._realkind,sign(1._realkind,ztmelt-tsns(jl)))
          if(zfrop<zfrlim) zfzbr=0._realkind
          !     ps090122 the number of hours freezing rain occurs
          !     
          fr_rain_hrs(jl)=0._realkind
          if(zfzbr>0._realkind)fr_rain_hrs(jl)=dtime/3600._realkind
          !     
          !     draindt falling on zero-degree snow
          !     
          zfzr2sn = draindt(jl)
          !     sg021129
          !     zfzr2sn= zfzr2sn*nint(((tsnow(jl)-ztmelt)/
          !     &            (0.00001_realkind+abs(tsnow(jl)-ztmelt))+1._realkind)*0.5_realkind)
          if((tsnow(jl)-ztmelt)<0._realkind)zfzr2sn=0._realkind
          !     sg021129
          if(zsnw<zfrinsg) zfzr2sn=0._realkind
          !     
          !     draindt freezing on cold snow part
          !     
          zfzsnr = draindt(jl) - zfzr2sn
          if(zsnw<zfrlim) zfzsnr=0._realkind
          !     
          !     new stuff for forest snow
          !     
          !     draindt falling on zero-degree snow in forest
          !     
          zfzr2snc = zrainf

          if((tsnc(jl)-ztmelt)<0._realkind)zfzr2snc=0._realkind

          !     snowmip2
          !     zfzr2snc = zrainf
          !     sg021129
          if(zfrsnfor<zfrlim) zfzr2snc=0._realkind
          !     
          !     draindt freezing on cold snow part in forest
          !     
          zfzbrsnc = zrainf - zfzr2snc
          if(zfrsnfor<zfrlim) zfzbrsnc=0._realkind
          !     
          !     -----------------------------------------------------------------------
          !     
          !     l   preliminary value of new snow based on precipitation and evaporation
          !     
          !     snopl= land average value of snow over open land
          !     snfor= land average value of snow over tree area
          !  
          zsnstopl=snopl(jl)+zrsfl*(zsnw*(dsnowdt(jl)+zfzsnr)+zfrop*(dsnowdt(jl)+zfzbr-zmelbs)) + zsnw*zwsflqsn*latfsn(jl)
          !     
          zsnstopl=max(zsnstopl,0._realkind)
          !     
          !     
          zsnstfor=snfor(jl)+zrsfl*zcw*(zfrsnfor*(zsnowf+zfzbrsnc)+&
               (1._realkind-zfrsnfor)*(zsnowf+zfzbrc-zmelbsc))+ &
               zcw*zfrsnfor*zwsflqsnc*latfsnc(jl)
          !     
          zsnstfor=max(zsnstfor,0._realkind)
          !     
          !     
!!$          if(lprint)write(903,'(2i6,2f8.3,41(1pe12.4))')           &
!!$               jl,kstep,zalat,along(jl),snfor(jl),snopl(jl), &
!!$               tc(jl),tsc(jl),tsnc(jl),tscsn(jl),tsc2(jl),   &
!!$               tsns(jl),tsnow(jl),tssn(jl),tssn2(jl),        &
!!$               zsnstfor,zsnstopl,draindt(jl),dsnowdt(jl),    &
!!$               zmelbs,zmelbsc,zfzbrc,zfzbr,zfzr2sn,zfzsnr,   &
!!$               zfzr2snc,zfzbrsnc,zwsflqsn,zwsflqsc,          &
!!$               zrainf,zrainop,zvegpfor,zvegpopl,zvegmm,      &
!!$               tscsn2(jl),tsc2(jl),tsns2(jl),tssn2(jl),      &
!!$               zsnowf,zsnowcanp,zvegmaxfor,zvegmaxopl
!!$          !     
!!$          if(lprint2)write(203,'(2i6,2f8.3,39(1pe12.4))')          &
!!$               jl,kstep,zalat,along(jl),snfor(jl),snopl(jl), &
!!$               tc(jl),tsc(jl),tsnc(jl),tscsn(jl),tsc2(jl),   &
!!$               tsns(jl),tsnow(jl),tssn(jl),tssn2(jl),        &
!!$               zsnstfor,zsnstopl,draindt(jl),dsnowdt(jl),    &
!!$               zmelbs,zmelbsc,zfzbrc,zfzbr,zfzr2sn,zfzsnr,   &
!!$               zfzr2snc,zfzbrsnc,zwsflqsn,zwsflqsc,          &
!!$               zrainf,zrainop,zvegpfor,zvegpopl,zvegmm,      &
!!$               tscsn2(jl),tsc2(jl),tsns2(jl),tssn2(jl),      &
!!$               zsnowf,zsnowcanp
!!$          !     
!!$          if(lprint3)write(303,'(2i6,2f8.3,39(1pe12.4))')          &
!!$               jl,kstep,zalat,along(jl),snfor(jl),snopl(jl), &
!!$               tc(jl),tsc(jl),tsnc(jl),tscsn(jl),tsc2(jl),   &
!!$               tsns(jl),tsnow(jl),tssn(jl),tssn2(jl),        &
!!$               zsnstfor,zsnstopl,draindt(jl),dsnowdt(jl),    &
!!$               zmelbs,zmelbsc,zfzbrc,zfzbr,zfzr2sn,zfzsnr,   &
!!$               zfzr2snc,zfzbrsnc,zwsflqsn,zwsflqsc,          &
!!$               zrainf,zrainop,zvegpfor,zvegpopl,zvegmm,      &
!!$               tscsn2(jl),tsc2(jl),tsns2(jl),tssn2(jl),      &
!!$               zsnowf,zsnowcanp
          !     
          !     *         2.      temperatures
          !     -------------------------------------------
          !     temperature calculations:
          !     -------------------------------------------
          !     
          !     common calculations for more than one temperature calculation
          !     -------------------------------------------------------------
          !     
          !     heat capacity of forest canopy (verseghy et al. 1993)

          !     df020311  add snow on canopy
          !     zsncandepth=snowcan(jl)*zcwinv
          !     zdsncan=rhoh2o/rhosncan*zsncandepth
          !     zdsncanst=min(zdsncan,zsnlayer)
          !     csncan=vhcice/rhosncan*zdsncanst
          csncan=vhcice*zsnowcanp
          !     
          !     ps030328         c2= 2700._realkind*25.*zlaifor_int/5.+spechw*rhoh2o*zvegpfor+
          c2= 2700._realkind*25._realkind+spechw*rhoh2o*zvegpfor+  csncan

          !     ps020514         c2= 2700._realkind*25.*zlaifor_int/5.+spechw*rhoh2o*zvegpfor
          !     
          !     ----------------------------------------------------------------------------
          !     l      canopy and snow-free surface under the trees and soil 
          !     (tc,tsc,tsc2,tsc3,tsc4 and tsc5)
          !     ----------------------------------------------------------------------------
          !     
          !     %%%%% if (1._realkind-zfrsnfor)     %%%%%%%
          !     
          if((1._realkind-zfrsnfor)>0._realkind.and.zcw>=zfrlim)then
             !     
             !     
             !     compute the derivative of radfc with respect to both tc and tsc
             !     
             ztp3c=-8._realkind*(1._realkind-zviewfl)*stebol*zemfor*tc(jl)*tc(jl)*tc(jl)
             ztp3sc=4._realkind*(1._realkind-zviewfl)*(1._realkind-zfrsnfor)*stebol*zemfor*emforfloor*tsc(jl)*tsc(jl)*tsc(jl)
             !     
             !     ps090609
             !     ztp3c=0._realkind
             !     ztp3sc=0._realkind
             !     ps090609
             zsurfc=radfc(jl) + senfc(jl) + latfc(jl)
             zdsrfcc = ztp3c + dhcdtc(jl)
             zdsrfcsc = ztp3sc + dhcdtsc(jl)
             !     
             !     be energy consistent!
             !     
             zsurfc=zsurfc-snowcanmel(jl)*latice*rhoh2o/dtime
             !     
             !     compute the derivative of radfsc with respect to both tc and tsc
             !     
             ztp3c=4._realkind*(1._realkind-zviewfl)*stebol*emforfloor*zemfor* tc(jl)*tc(jl)*tc(jl)
             ztp3sc=-4._realkind*stebol*emforfloor*tsc(jl)*tsc(jl)*tsc(jl)
             !     
             !     ps090609
             !     ztp3c=0._realkind
             !     ztp3sc=0._realkind
             !     ps090609
             zsurfsc=radfsc(jl) + senfsc(jl) + latfsc(jl)
             zdsrfscc = ztp3c + dhscdtc(jl)
             zdsrfscsc = ztp3sc + dhscdtsc(jl)
             !     
             !     be energy consistent!
             !     
             zsurfsc=zsurfsc+latice*(zfzbrc-zmelbsc)
             !     
             !     

             !     thermal conductivity according to peters-lidard et al.
             !     jas 1998, vol 55, nr 7, pp1209-1224
             !     --------------------------------------------------------
             !     1) forest area no snow
             !     ----------------------
             !     first layer
             zsat=ww1for/vsw_mix1(jl) !cj
             zfrsoilice=max(min((1._realkind-(tsc(jl)-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps_mix1(jl)**(1._realkind-vsw_mix1(jl)) &  !cj saturated thermal cond. =f(mineral solids,water,ice)
                  *tlambdaice**(zfrsoilice*vsw_mix1(jl))  & !cj  ice   ! zcapsat = saturated thermal cond
                  *tlambdaw**((1._realkind-zfrsoilice)*vsw_mix1(jl)) !cj  water
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda1=zkersten*(zcapsat-zcapdry_mix1(jl))+ zcapdry_mix1(jl) !cj viktar dry och saturated med zkersten         
             !     ps100318
             ztlambda1=(1._realkind-zvegforfloor*(1._realkind-zvegmulch))*ztlambda1
             !     ps100318
             ztlambda1_forns(jl)=ztlambda1 !cj 

             ! heat capacity based on sum of solids, ice and water constituents [j/(m3 k)]
             ro_cgw1for=cs_mix1(jl)*(1._realkind-vsw_mix1(jl))+  &!cj  soil solids
                  cs_i*zfrsoilice*ww1for+  & !cj  soil ice    
                  cs_w*(1.0_realkind-zfrsoilice)*ww1for !cj  soil water
             ! Amount of frozen water in soil
             zsoilfrwmmfor=zsoilfrwmmfor+dz1*ww1for*zfrsoilice*(1._realkind-zfrsnfor)

             !     second layer - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww1for/vsw_mix1(jl) !cj still layer 1w since 1w include layers 1temp and 2temp
             zfrsoilice=max(min((1._realkind-(tsc2(jl)-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps_mix1(jl)**(1._realkind-vsw_mix1(jl))* &
                  tlambdaice**(zfrsoilice*vsw_mix1(jl)) &
                  *tlambdaw**((1._realkind-zfrsoilice)*vsw_mix1(jl)) !cj
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda2=zkersten*(zcapsat-zcapdry_mix1(jl))+ zcapdry_mix1(jl) !cj

             ztlambda2_forns(jl)=ztlambda2 !cj 

             ro_cgw2for=cs_mix1(jl)*(1._realkind-vsw_mix1(jl))+ &
                  cs_i*zfrsoilice*ww1for+ cs_w*(1.0_realkind-zfrsoilice)*ww1for !cj 
             ! Amount of frozen water in soil
             zsoilfrwmmfor=zsoilfrwmmfor+dz2*ww1for*zfrsoilice*(1._realkind-zfrsnfor)

             !     third layer - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
             zsat=ww2for/vsw_mix2(jl) !cj layer 2w = layer 3temp
             zfrsoilice=max(min((1._realkind-(tsc3(jl)-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps_mix2(jl)**(1._realkind-vsw_mix2(jl))* &
                  tlambdaice**(zfrsoilice*vsw_mix2(jl))* &
                  tlambdaw**((1._realkind-zfrsoilice)*vsw_mix2(jl)) !cj
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda3=zkersten*(zcapsat-zcapdry_mix2(jl))+ zcapdry_mix2(jl) !cj

             ztlambda3_forns(jl)=ztlambda3 !cj 

             ro_cgw3for=cs_mix2(jl)*(1._realkind-vsw_mix2(jl))+ cs_i*zfrsoilice*ww2for+&
                  cs_w*(1.0_realkind-zfrsoilice)*ww2for !cj
             ! Amount of frozen water in soil
             zsoilfrwmmfor=zsoilfrwmmfor+ww2for*dz2w*zfrsoilice*(1._realkind-zfrsnfor)

             !     fourth layer - - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww3for/vsw(isoil) !cj no change in layers 4temp and 5temp
             zfrsoilice=max(min((1._realkind-(tsc4(jl)-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps**(1._realkind-vsw(isoil))*&
                  tlambdaice**(zfrsoilice*vsw(isoil)) &
                  *tlambdaw**((1._realkind-zfrsoilice)*vsw(isoil))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda4=zkersten*(zcapsat-zcapdry) + zcapdry

             ztlambda4_forns(jl)=ztlambda4 !cj 

             ro_cgw4for=cs_min*(1._realkind-vsw(isoil))+ & !cj mineral soil solids, we assume no organic soil below dz2w
                  cs_i*zfrsoilice*ww3for+  & !cj  ice
                  cs_w*(1.0_realkind-zfrsoilice)*ww3for !cj  water
             ! Amount of frozen water in soil
             zsoilfrwmmfor=zsoilfrwmmfor+zweightfor4*ww3for*&
                  z3wfor*zfrsoilice*(1._realkind-zfrsnfor)

             !     fifth layer - - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww3for/vsw(isoil)
             zfrsoilice=max(min((1._realkind-(tsc5(jl)-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps**(1._realkind-vsw(isoil))*tlambdaice**(zfrsoilice*&
                  vsw(isoil))*tlambdaw**((1._realkind-zfrsoilice)*vsw(isoil))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda5=zkersten*(zcapsat-zcapdry) + zcapdry

             ztlambda5_forns(jl)=ztlambda5 !cj 

             ro_cgw5for=cs_min*(1._realkind-vsw(isoil))+ cs_i*zfrsoilice*ww3for+ &
                  cs_w*(1.0_realkind-zfrsoilice)*ww3for !cj
             ! Amount of frozen water in soil
             zsoilfrwmmfor=zsoilfrwmmfor+zweightfor5*ww3for*z3wfor*&
                  zfrsoilice*(1._realkind-zfrsnfor)


             !     if(lprint6)write(115,'(2i6,2f8.3,4(1pe12.4))')          !cj 115) heat capacity
             !     &        jl,kstep,zalat,along(jl),ro_cgw1opl,ro_cgw2opl,
             !     &        ro_cgw2opl,dummyvar 
             !     
             !     if(lprint6)write(116,'(2i6,2f8.3,4(1pe12.4))')          !cj 116) hear conductivity
             !     &        jl,kstep,zalat,along(jl),ztlambda1,ztlambda2,
             !     &        ztlambda3,ztlambda4 
             !     
             !     if(lprint7)write(315,'(2i6,2f8.3,4(1pe12.4))')          !cj
             !     &        jl,kstep,zalat,along(jl),ro_cgw1opl,ro_cgw2opl,
             !     &        ro_cgw2opl,dummyvar 
             !     
             !     if(lprint7)write(316,'(2i6,2f8.3,4(1pe12.4))')          !cj
             !     &        jl,kstep,zalat,along(jl),ztlambda1,ztlambda2,
             !     &        ztlambda3,ztlambda4


             !     modify soil heat capacity in case of freezing/thawing process,
             !     which occur for -3degc < tsc < 1degc (viterbo et al. 1999)
             !     ----------------------------------------------------------
             !     soil freezing, forest area no snow
             !     -------------------------------- 
             dstepdt=0._realkind
             if(tsc(jl)>rt2.and.tsc(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tsc(jl)-0.5_realkind*rt1-0.5_realkind*rt2)/&
                     (rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgc=ro_cgw1for - dstepdt*latice*vcc_mix1(jl)*rhoh2o
             !     
             dstepdt=0._realkind
             if(tsc2(jl)>rt2.and.tsc2(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tsc2(jl)-0.5_realkind*rt1-0.5_realkind*rt2)/&
                     (rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgc2=ro_cgw2for - dstepdt*latice*vcc_mix1(jl)*rhoh2o
             !     
             dstepdt=0._realkind
             if(tsc3(jl)>rt2.and.tsc3(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tsc3(jl)-0.5_realkind*rt1-0.5_realkind*rt2)/&
                     (rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgc3=ro_cgw3for - dstepdt*latice*vcc_mix2(jl)*rhoh2o
             !     
             dstepdt=0._realkind
             if(tsc4(jl)>rt2.and.tsc4(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tsc4(jl)-0.5_realkind*rt1-0.5_realkind*rt2)/&
                     (rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgc4=ro_cgw4for - dstepdt*latice*vcc(isoil)*rhoh2o
             !     
             dstepdt=0._realkind
             if(tsc5(jl)>rt2.and.tsc5(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tsc5(jl)-0.5_realkind*rt1-0.5_realkind*rt2)/&
                     (rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgc5=ro_cgw5for - dstepdt*latice*vcc(isoil)*rhoh2o
             !     -------------------------------------------------------------
             !     -----------------------------------------------

             !     solve for new temperatures implicitely
             !     
             zslask=dtime/c2
             !     
             !     tc-equqtion
             !     
             wa(1)=0._realkind
             wb(1) = 1._realkind-zslask*alphaimp*zdsrfcc
             wc(1) = -zslask*alphaimp*zdsrfcsc
             wr(1) =tc(jl)*wb(1) + zslask*(zsurfc - alphaimp*zdsrfcsc*tsc(jl))
             !     
             !     ps021023         zslask=0.5_realkind*dtime/(ro_cgc*dz1)
             !     ps021023         zkdf1=2.*tlambda1/(dz1+dz2)
             !     
             !     ps021023         wa(2) = -zslask*zdsrfscc
             !     ps021023         wb(2) = 1._realkind-zslask*(zdsrfscsc-zkdf1)
             !     ps021023         wc(2) = -zslask*zkdf1
             !     ps021023         wr(2) = tsc(jl)*(1._realkind-zslask*(zdsrfscsc+zkdf1)) +
             !     ps021023     &        zslask*(2.*zsurfsc - zdsrfscc*tc(jl) +
             !     ps021023     &        zkdf1*ts2c(jl) )
             !     
             !     tsc-equation
             !     
             zslask=dtime/(ro_cgc*dz1)
             ztlambda=(dz1+dz2)*ztlambda1*ztlambda2/(ztlambda2*dz1+ztlambda1*dz2)
             zkdf1=2._realkind*ztlambda/(dz1+dz2)
             !     
             wa(2) = -0.5_realkind*zslask*zdsrfscc
             !     ps         wb(2) = 1._realkind-zslask*alphaimp*(zdsrfscsc-zkdf1)
             wb(2) = 1._realkind-zslask*(alphaimp*zdsrfscsc-0.5_realkind*zkdf1)
             wc(2) = -0.5_realkind*zslask*zkdf1
             wr(2) = tsc(jl)*(1._realkind-zslask*(alphaimp*zdsrfscsc + &
                  0.5_realkind*zkdf1)) + zslask*(zsurfsc - 0.5_realkind*zdsrfscc*tc(jl) + &
                  0.5_realkind*zkdf1*tsc2(jl) )
             !     ps     &        (1._realkind-alphaimp)*zkdf1)) +
             !     
             !     tsc2-equation
             !     
             zslask=0.5_realkind*dtime/(ro_cgc2*dz2)
             ztlambda=(dz2+dz3)*ztlambda2*ztlambda3/ (ztlambda3*dz2+ztlambda2*dz3)
             zkdf2=2._realkind*ztlambda/(dz2+dz3)
             !     
             wa(3) = -zslask*zkdf1
             wb(3) = 1._realkind+zslask*(zkdf1+zkdf2)
             wc(3) = -zslask*zkdf2
             wr(3) = tsc2(jl)*(1._realkind-zslask*(zkdf1+zkdf2))   +  &
                  zslask*(zkdf2*tsc3(jl)+zkdf1*tsc(jl))
             !     
             !     tsc3-equation
             !     
             zslask=0.5_realkind*dtime/(ro_cgc3*dz3)
             ztlambda=(dz3+dz4)*ztlambda3*ztlambda4/  (ztlambda4*dz3+ztlambda3*dz4)
             zkdf3=2._realkind*ztlambda/(dz3+dz4)
             !     
             wa(4) = - zslask*zkdf2 
             wb(4) = 1._realkind + zslask*(zkdf2 + zkdf3)
             wc(4) = -zslask*zkdf3
             wr(4) = tsc3(jl)*(1._realkind- zslask*(zkdf2 + zkdf3)) +  &
                  zslask*(zkdf3*tsc4(jl) + zkdf2*tsc2(jl))
             !     
             !     tsc4-equation
             !     
             zslask=0.5_realkind*dtime/(ro_cgc4*dz4)
             ztlambda=(dz4+dz5)*ztlambda4*ztlambda5/ (ztlambda5*dz4+ztlambda4*dz5)
             zkdf4=2._realkind*ztlambda/(dz4+dz5)
             !     
             wa(5) = - zslask*zkdf3 
             wb(5) = 1._realkind + zslask*(zkdf3 + zkdf4)
             wc(5) = -zslask*zkdf4
             wr(5) = tsc4(jl)*(1._realkind- zslask*(zkdf3 + zkdf4)) + &
                  zslask*(zkdf4*tsc5(jl) + zkdf3*tsc3(jl))
             !     
             !     tsc5-equation
             !     
             zslask=0.5_realkind*dtime/(ro_cgc5*dz5)
             !     
             wa(6) = - zslask*zkdf4 
             wb(6) = 1._realkind + zslask*zkdf4
             wc(6) = 0._realkind
             wr(6) = tsc5(jl)*(1._realkind- zslask*zkdf4) +  zslask*zkdf4*tsc4(jl)

             call tridag(wa,wb,wc,wr,wtemp,6)
             !     
             ztcscp=wtemp(1)
             ztscp=wtemp(2)
             ztsc2p=wtemp(3)
             ztsc3p=wtemp(4)
             ztsc4p=wtemp(5)
             ztsc5p=wtemp(6)
             !     
             !     
             !     %%%%% else (1._realkind-zfrsnfor) %%%%%%%
             !     
          else
             !     
             ztcscp=tc(jl)
             ztscp=tsc(jl)
             !     sg021024
             ztsc2p  = tsc2(jl)
             ztsc3p  = tsc3(jl)
             ztsc4p  = tsc4(jl)
             ztsc5p  = tsc5(jl)
             !     sg021024
             !     
             !     
             !     %%%%% endif (1._realkind-zfrsnfor) %%%%%
          endif
          !     
          !     
          !     sg021024
          !     ------------------------------------------------------------------------------
          !     l      canopy and snow surface under the trees and soil 
          !     (tc,tsnc,tscsn,tscsn2,tscsn3,tscsn4,tscsn5)
          !     ------------------------------------------------------------------------------
          !     
          zdelta1t=dtime
          zdelta2t=0._realkind
          zsnmelf=0._realkind
          zsnc2sw=0._realkind
          zsnfordi=0._realkind
          !     
          !     
          !     %%%%% if zfrsnfor     %%%%%%%
          !     
          if(zfrsnfor>0._realkind)then
             !     
             ztc=tc(jl)
             ztsnc=tsnc(jl)
             ztscsn=tscsn(jl)
             ztscsn2  = tscsn2(jl)
             ztscsn3  = tscsn3(jl)
             ztscsn4  = tscsn4(jl)
             ztscsn5  = tscsn5(jl)
             zswsnc=max(swsnc(jl),0._realkind)
             !
             !     thermal conductivity according to peters-lidard et al.
             !     jas 1998, vol 55, nr 7, pp1209-1224
             !--------------------------------------------------------
             !     2) forest area snow
             !     --------------------
             !     first layer
             zsat=ww1for/vsw_mix1(jl) ! cj
             zfrsoilice=max(min((1._realkind-(tscsn(jl)-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps_mix1(jl)**(1._realkind-vsw_mix1(jl))*tlambdaice**(zfrsoilice*vsw_mix1(jl)) &
                  *tlambdaw**((1._realkind-zfrsoilice)*vsw_mix1(jl))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda1=zkersten*(zcapsat-zcapdry_mix1(jl))+ zcapdry_mix1(jl)
             !     ps100318
             ztlambda1=(1._realkind-zvegforfloor*(1._realkind-zvegmulch))*ztlambda1
             !     ps100318
             ztlambda1_forsn(jl)=ztlambda1

             ro_cgw1for=cs_mix1(jl)*(1._realkind-vsw_mix1(jl))+ &
                  cs_i*zfrsoilice*ww1for+cs_w*(1.0_realkind-zfrsoilice)*ww1for ! cj
             ! Amount of frozen water in soil
             zsoilfrwmmfor=zsoilfrwmmfor+dz1*ww1for*zfrsoilice*zfrsnfor

             !     second layer - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww1for/vsw_mix1(jl) ! cj
             zfrsoilice=max(min((1._realkind-(tscsn2(jl)-rt2)/(rt1-rt2)),1._realkind),0._realkind)          
             zcapsat=zcaps_mix1(jl)**(1._realkind-vsw_mix1(jl))*&
                  tlambdaice**(zfrsoilice*vsw_mix1(jl))&
                  *tlambdaw**((1._realkind-zfrsoilice)*vsw_mix1(jl))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda2=zkersten*(zcapsat-zcapdry_mix1(jl))+zcapdry_mix1(jl)

             ztlambda2_forsn(jl)=ztlambda2

             ro_cgw2for=cs_mix1(jl)*(1._realkind-vsw_mix1(jl))+ cs_i*zfrsoilice*ww1for+ cs_w*(1.0_realkind-zfrsoilice)*ww1for ! cj 
             ! Amount of frozen water in soil
             zsoilfrwmmfor=zsoilfrwmmfor+dz2*ww1for*zfrsoilice*zfrsnfor

             !     third layer - - - - - - - - - - - - - - - - - - - - - - - - - - -     
             zsat=ww2for/vsw_mix2(jl) ! cj
             zfrsoilice=max(min((1._realkind-(tscsn3(jl)-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps_mix2(jl)**(1._realkind-vsw_mix2(jl))*&
                  tlambdaice**(zfrsoilice*vsw_mix2(jl))&
                  *tlambdaw**((1._realkind-zfrsoilice)*vsw_mix2(jl))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda3=zkersten*(zcapsat-zcapdry_mix2(jl))+  zcapdry_mix2(jl)

             ztlambda3_forsn(jl)=ztlambda3

             ro_cgw3for=cs_mix2(jl)*(1._realkind-vsw_mix2(jl))+ cs_i*&
                  zfrsoilice*ww2for+  cs_w*(1.0_realkind-zfrsoilice)*ww2for ! cj
             ! Amount of frozen water in soil
             zsoilfrwmmfor=zsoilfrwmmfor+ww2for*dz2w*zfrsoilice*zfrsnfor

             !     fourth layer - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww3for/vsw(isoil)
             zfrsoilice=max(min((1._realkind-(tscsn4(jl)-rt2)/(rt1-rt2)),&
                  1._realkind),0._realkind)
             zcapsat=zcaps**(1._realkind-vsw(isoil)) &
                  *tlambdaice**(zfrsoilice*vsw(isoil)) &
                  *tlambdaw**((1._realkind-zfrsoilice)*vsw(isoil))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda4=zkersten*(zcapsat-zcapdry) + zcapdry

             ztlambda4_forsn(jl)=ztlambda4

             ro_cgw4for=cs_min*(1._realkind-vsw(isoil))+  &
                  cs_i*zfrsoilice*ww3for+ cs_w*(1.0_realkind-zfrsoilice)*ww3for ! cj
             ! Amount of frozen water in soil
             zsoilfrwmmfor=zsoilfrwmmfor+zweightfor4*ww3for*z3wfor*zfrsoilice*zfrsnfor

             !     fifth layer - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww3for/vsw(isoil)
             zfrsoilice=max(min((1._realkind-(tscsn5(jl)-rt2)/ (rt1-rt2)),&
                  1._realkind),0._realkind)
             zcapsat=zcaps**(1._realkind-vsw(isoil))*&
                  tlambdaice**(zfrsoilice*vsw(isoil))*&
                  tlambdaw**((1._realkind-zfrsoilice)*vsw(isoil))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda5=zkersten*(zcapsat-zcapdry) + zcapdry

             ztlambda5_forsn(jl)=ztlambda5

             ro_cgw5for=cs_min*(1._realkind-vsw(isoil))+ &
                  cs_i*zfrsoilice*ww3for+cs_w*(1.0_realkind-zfrsoilice)*ww3for ! cj
             ! Amount of frozen water in soil
             zsoilfrwmmfor=zsoilfrwmmfor+zweightfor5*ww3for*z3wfor*zfrsoilice*zfrsnfor
             !ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

             !     modify soil heat capacity in case of freezing/thawing process,
             !     which occur for -3degc < tsc < 1degc (viterbo et al. 1999)
             !     ----------------------------------------------------------
             !     soil freezing, forest area snow 
             !     -------------------------------

             dstepdt=0._realkind
             if(tscsn(jl)>rt2.and.tscsn(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tscsn(jl)-0.5_realkind*rt1-0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             !     
             ro_cgcsn=ro_cgw1for - dstepdt*latice*vcc_mix1(jl)*rhoh2o
             !     
             dstepdt=0._realkind
             if(tscsn2(jl)>rt2.and.tscsn2(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tscsn2(jl)-0.5_realkind*rt1-0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             !     
             ro_cgcsn2=ro_cgw2for - dstepdt*latice*vcc_mix1(jl)*rhoh2o
             !     
             dstepdt=0._realkind
             if(tscsn3(jl)>rt2.and.tscsn3(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tscsn3(jl)-0.5_realkind*rt1-0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             !     
             ro_cgcsn3=ro_cgw3for - dstepdt*latice*vcc_mix2(jl)*rhoh2o
             !     
             dstepdt=0._realkind
             if(tscsn4(jl)>rt2.and.tscsn4(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tscsn4(jl)-0.5_realkind*rt1-0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             !     
             ro_cgcsn4=ro_cgw4for - dstepdt*latice*vcc(isoil)*rhoh2o
             !     
             dstepdt=0._realkind
             if(tscsn5(jl)>rt2.and.tscsn5(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tscsn5(jl)-0.5_realkind*rt1-0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             !     
             ro_cgcsn5=ro_cgw5for - dstepdt*latice*vcc(isoil)*rhoh2o
             !     -----------------------------------------------------------------

             zsnfordepth=snfor(jl)*zcwinv*zfrsnforinv
             if(zsnfordepth>=zfrinsg) zsnfordi=1._realkind/zsnfordepth
             !     
             !     zsafe is normally=0, but in cases of zfrsnfor=0 zsafe=1
             !     
             zsafe=1._realkind-zsnfordi*zsnfordepth
             if(zsafe>0.5_realkind)then
                write(6,'(a,5f10.4,2e12.4)') 'zfrsnfor: zsafe=1!! ' ,zsafe,frsnfor(jl),zcw,zsnw,zfrop,snfor(jl),snopl(jl)
             endif
             !     
             !     l  calculate heat capacity of snow (c*rho*z) era40
             !     -----------------------------------------------
             !     
             !     ps030303            zdsn=rhoh2o/zrhosnc*zsnfordepth
             !     ps031218            zdsn=rhoh2o/zrhosnc*zsnfordepth+
             !     ps031218     &           zswsnc*zcwinv*zfrsnforinv
             zdsn=rhoh2o/zrhosnc*zsnfordepth
             !     
             zdsnst=min(zdsn,zsnlayer)
             zdsnstfor=zdsnst
             c1=vhcice*zrhosnc/rhoice*zdsnst
             c1snc=c1

             !     
             !     zrssn=0.5_realkind*zdsnst/tlambdasnc + 0.5_realkind*dz1/tlambda1
             !     ps020904
             zrssn=0.5_realkind*zdsn/tlambdasnc + 0.5_realkind*dz1/ztlambda1

             !     test with era-40 value
             !     
             !     ps020904            zrssn=0.5_realkind*zdsnst/tlambdasnc + 0.5_realkind*dz1/15.
             !     
             !     zalphasng=1._realkind-min(zdsn/zsnlayer,1._realkind)
             !     zalphasng=max(1.e-6,zalphasng)
             !     
             !     zalphasng=1.-zdsnst/zsnlayer
             !     
             !     zalphasng forced equal 1._realkind!!!
             zalphasng=1._realkind
             zrssn=zrssn/zalphasng
             !     
             !     compute the derivative of radfc with respect to tsnc
             !     
             ztp3c=-8._realkind*(1._realkind-zviewfl)*stebol*zemfor*ztc*ztc*ztc           
             ztp3snc=4._realkind*(1._realkind-zviewfl)*zfrsnfor*stebol*emsnow* ztsnc*ztsnc*ztsnc
             !     ps090609
             !     ztp3c=0._realkind
             !     ztp3snc=0._realkind
             !     ps090609
             !     
             zsurfc=radfc(jl) + senfc(jl) + latfc(jl)
             zdsrfcc = ztp3c + dhcdtc(jl)
             zdsrfcsnc = ztp3snc + dhcdtsnc(jl)
             !     
             !     be energy consistent!
             !     
             zsurfc=zsurfc-snowcanmel(jl)*latice*rhoh2o/dtime
             !     
             !     compute the derivative of radfsnc with respect to both tc and tsnc
             !     
             ztp3c=4._realkind*(1._realkind-zviewfl)*stebol*emsnow*zemfor*ztc*ztc*ztc
             ztp3snc=-4._realkind*stebol*emsnow*ztsnc*ztsnc*ztsnc
             !     ps090609
             !     ztp3c=0._realkind
             !     ztp3snc=0._realkind
             !     ps090609
             !     
             zsurfsnc=radfsnc(jl) + senfsnc(jl) + latfsnc(jl)
             zdsrfsncc = ztp3c + dhsncdtc(jl)
             zdsrfsncsnc = ztp3snc + dhsncdtsnc(jl)
             !     
             !     to be energy consistent!
             !     
             zsurfsnc=zsurfsnc+latice*zfzbrsnc
             !     
             !     total flux available for the snow
             !     
             zsurfsnctot=zsurfsnc-(ztsnc-ztscsn)/zrssn
             zgroundsnc=(ztsnc-ztscsn)/zrssn
             !     
             !     check cases
             !     -----------
             !     
             !     total heat flux is positive
             !     
             if(zsurfsnctot>=1.e-3_realkind)then
                !     
                !     l   estimate the time step needed to bring tsnow to ztmelt
                !     
                zdelta1t=max((c1*(ztmelt-ztsnc))/zsurfsnctot,0._realkind)
                !     
                !     no phase change, temperature rising
                !     
                if(zdelta1t>=dtime)then
                   zdelta1t=dtime
                   zdelta2t=0._realkind
                else
                   !     
                   !     temperature risning and/or melting
                   !     
                   zdelta2t=dtime-zdelta1t
                   !     
                   !     estimate snow melt amount
                   zsnmelf=zdelta2t/(rhoh2o*latice)* zsurfsnctot
                   zsnmelf=max(zsnmelf,0._realkind)
                   !     
                endif
                !     
                !     rain that falls on zero-degree snow has not been included
                !     elsewhere.
                !     
                zrain2snow=zfzr2snc*zrsfl
                !     
             endif
             !     
             !     total heat flux is negative
             !     
             if(zsurfsnctot<=-1.e-03_realkind)then
                !     
                !     freezing and/or temperature sinking
                !     
                zslask=zswsnc*zcwsnforinv+zfzr2snc*zrsfl
                zswsnc=min(zslask,zsnfordepth*zwsat)*zcw*zfrsnfor
                zrain2snow=max(0._realkind,zslask-zswsnc*zcwsnforinv)
                !     
                jq=1
                if((zeps-zswsnc*zcwsnforinv)>=0._realkind)jq=0
                !     sg021129
                zslask=real(jq,realkind) * 1._realkind/(zswsnc*zcwsnforinv+ &
                     real(1-jq,realkind))
                zslask=min(zsncrit*zrhosnc*zwsat*zslask/rhoh2o,1._realkind)
                zfreezefrac=max(zslask,0._realkind)
                zdelta2t=zfreezefrac*dtime
                !     
                !     be sure to freeze the last water if very little water left
                !     
                if(zswsnc*zcwsnforinv<zsnswcrit) then
                   !     
                   zdelta2t=-rhoh2o*latice*zswsnc*zcwsnforinv/ zsurfsnctot
                   zdelta2t=min(zdelta2t,dtime)
                   !     
                endif
                !     
                !     amount of freezed water = negative snow melt
                !     
                zsnmelf=zdelta2t*zsurfsnctot/(rhoh2o*latice)
                !     
                !     use only zdelta2t until all is frozen
                !     
                !     ps
                if(-zsnmelf>zswsnc*zcwsnforinv) then
                   zdelta2t=-zdelta2t*zswsnc*zcwsnforinv/zsnmelf
                   zsnmelf=zdelta2t*zsurfsnctot/(rhoh2o*latice)
                endif
                !     ps
                !     
                zdelta2t=min(zdelta2t,dtime)
                zdelta1t=dtime-zdelta2t
                zsnmelf=min(zsnmelf,0._realkind)
             endif
             !     
             !     
             if(abs(zsurfsnctot)<1.e-3_realkind)then
                !     
                zdelta1t=0._realkind
                zdelta2t=dtime
                zsnmelf=0._realkind
                zrain2snow=zfzr2snc*zrsfl
                !     
             endif
             !     
             !     solve snow eq implicitely including heat conduction
             !     ---------------------------------------------------
             !     
             !     the soil freezing is present also under the snow
             !     
             !     soil freezing second layer (viterbo ecmwf tech memor 255,1998)
             !     dstepdt = temp. derivative of freezing function:
             !     
             zdelta1t=zdelta1t/2._realkind
             zdelta2t=zdelta2t/2._realkind
             !     
             !     
             zrsinv=1._realkind/zrssn
             !     
             !     l   if freezing compute two heatconduction problems, i) canopy temperature only with
             !     constant snow temperature and ii) the soil-layers with constant snow temperature
             !     ------------
             !     
             if(zsnmelf<0._realkind.and.zdelta2t>0._realkind)then
                !     
                !     first the canopy:
                !     
                zslask=2._realkind*zdelta2t/c2
                !     
                za1 = 1._realkind-zslask*alphaimp*zdsrfcc
                zr1 = ztc*za1 + zslask*zsurfc
                !     za1>1! 
                ztcsnp=zr1/za1
                !     
                !     then the rest of temps
                !     
                !     tscsn-equation
                !     
                zslask=zdelta2t/(ro_cgcsn*dz1)
                ztlambda=(dz1+dz2)*ztlambda1*ztlambda2/(ztlambda2*dz1+ztlambda1*dz2)
                zkdf1=2._realkind*ztlambda/(dz1+dz2)
                !     
                wa(1) = 0._realkind
                wb(1) = 1._realkind+zslask*(zkdf1+zrsinv)
                wc(1) = -zslask*zkdf1
                wr(1) = ztscsn*(1._realkind-zslask*(zkdf1+zrsinv))+ &
                     zslask*(zkdf1*ztscsn2+2._realkind*zrsinv*ztsnc)
                !     
                !     tscsn2-equation
                !     
                zslask=zdelta2t/(ro_cgcsn2*dz2)
                ztlambda=(dz2+dz3)*ztlambda2*ztlambda3/(ztlambda3*dz2+ztlambda2*dz3)
                zkdf2=2._realkind*ztlambda/(dz2+dz3)
                !     
                wa(2) = -zslask*zkdf1
                wb(2) = 1._realkind+zslask*(zkdf1+zkdf2)
                wc(2) = -zslask*zkdf2
                wr(2) = ztscsn2*(1._realkind-zslask*(zkdf1+zkdf2))  +   zslask*(zkdf2*ztscsn3+zkdf1*ztscsn)
                !     
                !     tscsn3-equation
                !     
                zslask=zdelta2t/(ro_cgcsn3*dz3)
                ztlambda=(dz3+dz4)*ztlambda3*ztlambda4/ (ztlambda4*dz3+ztlambda3*dz4)
                zkdf3=2._realkind*ztlambda/(dz3+dz4)
                !     
                wa(3) = - zslask*zkdf2 
                wb(3) = 1._realkind + zslask*(zkdf2 + zkdf3)
                wc(3) = -zslask*zkdf3
                wr(3) = ztscsn3*(1._realkind- zslask*(zkdf2 + zkdf3)) + zslask*(zkdf3*ztscsn4 + zkdf2*ztscsn2)
                !     
                !     tscsn4-equation
                !     
                zslask=zdelta2t/(ro_cgcsn4*dz4)
                ztlambda=(dz4+dz5)*ztlambda4*ztlambda5/ (ztlambda5*dz4+ztlambda4*dz5)
                zkdf4=2._realkind*ztlambda/(dz4+dz5)
                !     
                wa(4) = - zslask*zkdf3 
                wb(4) = 1._realkind + zslask*(zkdf3 + zkdf4)
                wc(4) = -zslask*zkdf4
                wr(4) = ztscsn4*(1._realkind- zslask*(zkdf3 + zkdf4)) + zslask*(zkdf4*ztscsn5 + zkdf3*ztscsn3)
                !     
                !     tscsn5-equation
                !     
                zslask=zdelta2t/(ro_cgcsn5*dz5)
                !     
                wa(5) = - zslask*zkdf4 
                wb(5) = 1._realkind + zslask*zkdf4
                wc(5) = 0._realkind
                wr(5) = ztscsn5*(1._realkind- zslask*zkdf4) + zslask*zkdf4*ztscsn4

                call tridag(wa,wb,wc,wr,wtemp,5)
                !     
                ztscsnp=wtemp(1)
                ztscsn2p=wtemp(2)
                ztscsn3p=wtemp(3)
                ztscsn4p=wtemp(4)
                ztscsn5p=wtemp(5)
                !     
                ztc=ztcsnp
                ztscsn=ztscsnp
                ztscsn2=ztscsn2p
                ztscsn3=ztscsn3p
                ztscsn4=ztscsn4p
                ztscsn5=ztscsn5p
                !     
                !     put tsnc(jl) back again in ztsncp
                !     
                ztsncp=ztsnc
                !     
             endif
             !     
             !     l    7-layer case tc,tsnc,tscsn,tscsn2,tscsn2,tscsn3,tscsn4,tscsn5
             !     ------------
             if(zdelta1t>0._realkind)then
                !     
                zslask=2._realkind*zdelta1t/c2
                !     
                !     canopy temperature equation
                !     
                wa(1 )= 0._realkind
                wb(1) = 1._realkind-zslask*alphaimp*zdsrfcc
                wc(1) = -zslask*alphaimp*zdsrfcsnc
                wr(1) = ztc*wb(1) +  zslask*(zsurfc - alphaimp*zdsrfcsnc*ztsnc)
                !     
                !     snow temperature equation
                !     
                zslask=zdelta1t/(c1+zsafe)
                zslask=(1._realkind-zsafe)*zslask
                !     
                wa(2) = -zslask*zdsrfsncc
                wb(2) = 1._realkind-zslask*(zdsrfsncsnc - zrsinv)
                wc(2) = -zslask*zrsinv
                wr(2) = ztsnc*(1._realkind-zslask*(zdsrfsncsnc + zrsinv)) + &
                     zslask*(2._realkind*zsurfsnc- zdsrfsncc*ztc+zrsinv*ztscsn)
                !     
                !     tscsn-equation
                !     
                zslask=zdelta1t/(ro_cgcsn*dz1)
                ztlambda=(dz1+dz2)*ztlambda1*ztlambda2/(ztlambda2*dz1+ztlambda1*dz2)
                zkdf1=2._realkind*ztlambda/(dz1+dz2)
                !     
                wa(3) = -zslask*zrsinv
                wb(3) = 1._realkind+zslask*(zkdf1+zrsinv)
                wc(3) = -zslask*zkdf1
                wr(3) = ztscsn*(1._realkind-zslask*(zkdf1+zrsinv))+ zslask*(zkdf1*ztscsn2+zrsinv*ztsnc)
                !     
                !     tscsn2-equation
                !     
                zslask=zdelta1t/(ro_cgcsn2*dz2)
                ztlambda=(dz2+dz3)*ztlambda2*ztlambda3/ (ztlambda3*dz2+ztlambda2*dz3)
                zkdf2=2._realkind*ztlambda/(dz2+dz3)
                !     
                wa(4) = -zslask*zkdf1
                wb(4) = 1._realkind+zslask*(zkdf1+zkdf2)
                wc(4) = -zslask*zkdf2
                wr(4) = ztscsn2*(1._realkind-zslask*(zkdf1+zkdf2)) +   zslask*(zkdf2*ztscsn3+zkdf1*ztscsn)
                !     
                !     tscsn3-equation
                !     
                zslask=zdelta1t/(ro_cgcsn3*dz3)
                ztlambda=(dz3+dz4)*ztlambda3*ztlambda4/(ztlambda4*dz3+ztlambda3*dz4)
                zkdf3=2._realkind*ztlambda/(dz3+dz4)
                !     
                wa(5) = - zslask*zkdf2 
                wb(5) = 1._realkind + zslask*(zkdf2 + zkdf3)
                wc(5) = -zslask*zkdf3
                wr(5) = ztscsn3*(1._realkind- zslask*(zkdf2 + zkdf3)) + zslask*(zkdf3*ztscsn4 + zkdf2*ztscsn2)
                !     
                !     tscsn4-equation
                !     
                zslask=zdelta1t/(ro_cgcsn4*dz4)
                ztlambda=(dz4+dz5)*ztlambda4*ztlambda5/(ztlambda5*dz4+ztlambda4*dz5)
                zkdf4=2._realkind*ztlambda/(dz4+dz5)
                !     
                wa(6) = - zslask*zkdf3 
                wb(6) = 1._realkind + zslask*(zkdf3 + zkdf4)
                wc(6) = -zslask*zkdf4
                wr(6) = ztscsn4*(1._realkind- zslask*(zkdf3 + zkdf4)) + zslask*(zkdf4*ztscsn5 + zkdf3*ztscsn3)
                !     
                !     tscsn5-equation
                !     
                zslask=zdelta1t/(ro_cgcsn5*dz5)
                !     
                wa(7) = - zslask*zkdf4 
                wb(7) = 1._realkind + zslask*zkdf4
                wc(7) = 0._realkind
                wr(7) = ztscsn5*(1._realkind- zslask*zkdf4) + zslask*zkdf4*ztscsn4

                call tridag(wa,wb,wc,wr,wtemp,7)
                !     
                ztcsnp=wtemp(1)
                ztsncp=wtemp(2)
                ztscsnp=wtemp(3)
                ztscsn2p=wtemp(4)
                ztscsn3p=wtemp(5)
                ztscsn4p=wtemp(6)
                ztscsn5p=wtemp(7)
                !     
                ztc=ztcsnp
                ztsnc=ztsncp
                ztscsn=ztscsnp
                ztscsn2=ztscsn2p
                ztscsn3=ztscsn3p
                ztscsn4=ztscsn4p
                ztscsn5=ztscsn5p
                !     
             endif
             !     
             !     l   if melting compute two heatconduction problems, i) canopy temperature only with
             !     constant snow temperature and ii) the soil-layers with constant snow temperature
             !     ------------
             !     
             if(zsnmelf>=0._realkind.and.zdelta2t>0._realkind)then
                !     
                !     first the canopy:
                !     
                zslask=2._realkind*zdelta2t/c2
                !     
                za1 = 1._realkind-zslask*alphaimp*zdsrfcc
                zr1 = ztc*za1 + zslask*zsurfc
                !     za1>1! 
                ztcsnp=zr1/za1
                !     
                !     then the rest of temps
                !     
                !     tscsn-equation
                !     
                zslask=zdelta2t/(ro_cgcsn*dz1)
                ztlambda=(dz1+dz2)*ztlambda1*ztlambda2/(ztlambda2*dz1+ztlambda1*dz2)
                zkdf1=2._realkind*ztlambda/(dz1+dz2)
                !     
                wa(1) = 0._realkind
                wb(1) = 1._realkind+zslask*(zkdf1+zrsinv)
                wc(1) = -zslask*zkdf1
                wr(1) = ztscsn*(1._realkind-zslask*(zkdf1+zrsinv)) + zslask*(zkdf1*ztscsn2+2._realkind*zrsinv*ztsnc)
                !     
                !     tscsn2-equation
                !     
                zslask=zdelta2t/(ro_cgcsn2*dz2)
                ztlambda=(dz2+dz3)*ztlambda2*ztlambda3/(ztlambda3*dz2+ztlambda2*dz3)
                zkdf2=2._realkind*ztlambda/(dz2+dz3)
                !     
                wa(2) = -zslask*zkdf1
                wb(2) = 1._realkind+zslask*(zkdf1+zkdf2)
                wc(2) = -zslask*zkdf2
                wr(2) = ztscsn2*(1._realkind-zslask*(zkdf1+zkdf2)) +   zslask*(zkdf2*ztscsn3+zkdf1*ztscsn)
                !     
                !     tscsn3-equation
                !     
                zslask=zdelta2t/(ro_cgcsn3*dz3)
                ztlambda=(dz3+dz4)*ztlambda3*ztlambda4/(ztlambda4*dz3+ztlambda3*dz4)
                zkdf3=2._realkind*ztlambda/(dz3+dz4)
                !     
                wa(3) = - zslask*zkdf2 
                wb(3) = 1._realkind + zslask*(zkdf2 + zkdf3)
                wc(3) = -zslask*zkdf3
                wr(3) = ztscsn3*(1._realkind- zslask*(zkdf2 + zkdf3)) +  zslask*(zkdf3*ztscsn4 + zkdf2*ztscsn2)
                !     
                !     tscsn4-equation
                !     
                zslask=zdelta2t/(ro_cgcsn4*dz4)
                ztlambda=(dz4+dz5)*ztlambda4*ztlambda5/(ztlambda5*dz4+ztlambda4*dz5)
                zkdf4=2._realkind*ztlambda/(dz4+dz5)
                !     
                wa(4) = - zslask*zkdf3 
                wb(4) = 1._realkind + zslask*(zkdf3 + zkdf4)
                wc(4) = -zslask*zkdf4
                wr(4) = ztscsn4*(1._realkind- zslask*(zkdf3 + zkdf4)) + zslask*(zkdf4*ztscsn5 + zkdf3*ztscsn3)
                !     
                !     tscsn5-equation
                !     
                zslask=zdelta2t/(ro_cgcsn5*dz5)
                !     
                wa(5) = - zslask*zkdf4 
                wb(5) = 1._realkind + zslask*zkdf4
                wc(5) = 0._realkind
                wr(5) = ztscsn5*(1._realkind- zslask*zkdf4) + zslask*zkdf4*ztscsn4

                call tridag(wa,wb,wc,wr,wtemp,5)
                !     
                ztsncp=ztsnc
                ztscsnp=wtemp(1)
                ztscsn2p=wtemp(2)
                ztscsn3p=wtemp(3)
                ztscsn4p=wtemp(4)
                ztscsn5p=wtemp(5)
                !     
                !     
             endif
             !     sg021024 ends
             !     
             !     
             !     l   new snow amount
             !     ---------------
             !     
             !     ps030303            zsnforp=zsnstfor-zsnmelf*zcw*zfrsnfor
             zsnforp=zsnstfor-max(swsnc(jl),0._realkind)- zsnmelf*zcw*zfrsnfor
             !     
             !     l   new snow water amount
             !     
             !     here the computations are values over the snow part only
             !     i.e. zswsn is value over zsnw and so is zsn2sw, zswsnp and zsnmel
             !     
             zsnc2sw=zcw*zfrsnfor*(zswsnc*zcwsnforinv+zsnmelf)+ zcw*zfrsnfor*zrain2snow
             zswsncp=min(zsnc2sw,zwsat*zsnforp)*zcw*zfrsnfor
             !     
             zswsncp=max(zswsncp,0._realkind)
             !     
             !     l   amount of snow water passed to the soil
             !     
             zsnc2sw=max(zsnc2sw-zswsncp*zcwsnforinv,0._realkind)
             !     
             zswsncp=zswsncp*zcwinv*zfrsnforinv
             !     
             zrhodry=rhosnmin
             !     
             !     l  density of dry snow (era40)
             !     -----------------------------
             !     
             !     ps031218            zdweight=zsnfordepth/
             !     ps031218     &               (zsnfordepth+swsnc(jl)*zcwsnforinv+zsafe)
             zdweight=(zsnfordepth-swsnc(jl)*zcwsnforinv)/(zsnfordepth+zsafe)
             !     
             zrhodry=(zrhosnc-(1._realkind-zdweight-zsafe)*rhoh2o)/(zdweight+zsafe)
             !     
             zrhodry=max(min(zrhodry,rhosnmax),rhosnmin)
             !     
             !     zslask=dtime*dsnowdt(jl)/rhoh2o
             zslask=(zsnstfor-snfor(jl))*zcwinv*zfrsnforinv
             if(zslask>0.0001_realkind)then
                !     ps031218               zrhost=(zsnfordepth*zrhodry+zslask*rhosnmin)/
                !     ps031218     &              (zsnfordepth+zslask)
                zrhost=((zsnfordepth-swsnc(jl)*zcwsnforinv)*zrhodry+ &
                     zslask*rhosnmin)/(zsnfordepth-swsnc(jl)* zcwsnforinv+zsafe+zslask)
             else
                zrhost=zrhodry
             endif
             !     
             !     l    dry snow density at t+1

             zrhodry=(zrhost-rhosnmax)*exp(-taufsn*dtime/tau1sn) +rhosnmax
             !     
             zrhodry=max(min(zrhodry,rhosnmax),rhosnmin)
             !     ---------------------
             !     
             !     new snow density

             zsafe=1._realkind
             if(zsnforp>0._realkind)zsafe=0._realkind
             !     
             !     
             zdweight=(1._realkind-zsafe)*zsnforp/(zsnforp+zswsncp+zsafe)
             zrhosncp=zrhodry*zdweight+rhoh2o*(1._realkind-zdweight-zsafe)+ zsafe*zrhosnc
             !     
             !     ps030303
             zsnforp=zsnforp+zswsncp
             !     
             !     ***********************************************
             !     test of new snow density calculation
             !     ***********************************************
             !     call snow_density_htessel(
             !     c      input
             !     c      output
             !     &  )
             !     ***********************************************
             !     
             !     l   calculate new snow max value for  forest
             !     
             zsnmaxfp=0._realkind
             !     
             !     
             if(snmaxf(jl)>zcw*1.e-06_realkind) then
                !     
                !     
                if( zsnforp>=snmaxf(jl) )then

                   zsnmaxfp=zsnforp

                elseif ( zsnforp<zk1*snmaxf(jl) )  then

                   zsnmaxfp=snmaxf(jl) - ( zk1*snmaxf(jl)-zsnforp )*(1._realkind-zk)/zk1
                   if(zsnmaxfp<1.e-6_realkind)zsnmaxfp=0.0_realkind

                else

                   zsnmaxfp=snmaxf(jl)

                endif
             endif
             if((zswsnc*zcwsnforinv+zsnmelf)>=((zsnforp-zswsncp)*zcwinv*zfrsnforinv))then
                zsnc2sw=zsnforp
                zswsncp=0._realkind
                zsnforp=0._realkind
             endif
             !     
             !     
             !     ps         if(lprint)write(995,'(2i6,2f8.3,40(1pe12.4))')
             !     ps     &   jl,kstep,zalat,along(jl),
             !     ps     &   zfrsnfor,ztcsnp-tc(jl),ztsncp-tsnc(jl),
             !     ps     &   ztscsnp-tscsn(jl),zsurfsnctot,zsnmelf,
             !     ps     &   radfc(jl),senfc(jl),latfc(jl),
             !     ps     &   radfsnc(jl),senfsnc(jl),latfsnc(jl),
             !     ps     &   zfzbrsnc,tc(jl),tsnc(jl),tscsn(jl),zrssn,
             !     ps     &   zdsrfcc,zdsrfcsnc,zdsrfsncc,zdsrfsncsnc,
             !     ps     &   zdelta1t,zdelta2t,c1,c2,ro_cgns,ro_cgns2,
             !     ps     &   zrhosnc,zrhosncp-rhosnc(jl),
             !     ps     &   snfor(jl),zsnstfor,zsnforp-snfor(jl),
             !     ps     &   zdsnst,tlambdasnc,zdsn,
             !     ps     &   zdweight,zrhodry,zrhost,
             !     ps     &   ztscsn2p-tscsn2(jl),tscsn2(jl)
             !     
             !     ps         if(lprint2)write(295,'(2i6,2f8.3,40(1pe12.4))')
             !     ps     &   jl,kstep,zalat,along(jl),
             !     ps     &   zfrsnfor,ztcsnp-tc(jl),ztsncp-tsnc(jl),
             !     ps     &   ztscsnp-tscsn(jl),zsurfsnctot,zsnmelf,
             !     ps     &   radfc(jl),senfc(jl),latfc(jl),
             !     ps     &   radfsnc(jl),senfsnc(jl),latfsnc(jl),
             !     ps     &   zfzbrsnc,tc(jl),tsnc(jl),tscsn(jl),zrssn,
             !     ps     &   zdsrfcc,zdsrfcsnc,zdsrfsncc,zdsrfsncsnc,
             !     ps     &   zdelta1t,zdelta2t,c1,c2,ro_cgns,ro_cgns2,
             !     ps     &   zrhosnc,zrhosncp-rhosnc(jl),
             !     ps     &   snfor(jl),zsnstfor,zsnforp-snfor(jl),
             !     ps     &   zdsnst,tlambdasnc,zdsn,
             !     ps     &   zdweight,zrhodry,zrhost,
             !     ps     &   ztscsn2p-tscsn2(jl),tscsn2(jl)
             !     
             !     ps         if(lprint3)write(395,'(2i6,2f8.3,40(1pe12.4))')
             !     ps     &   jl,kstep,zalat,along(jl),
             !     ps     &   zfrsnfor,ztcsnp-tc(jl),ztsncp-tsnc(jl),
             !     ps     &   ztscsnp-tscsn(jl),zsurfsnctot,zsnmelf,
             !     ps     &   radfc(jl),senfc(jl),latfc(jl),
             !     ps     &   radfsnc(jl),senfsnc(jl),latfsnc(jl),
             !     ps     &   zfzbrsnc,tc(jl),tsnc(jl),tscsn(jl),zrssn,
             !     ps     &   zdsrfcc,zdsrfcsnc,zdsrfsncc,zdsrfsncsnc,
             !     ps     &   zdelta1t,zdelta2t,c1,c2,ro_cgns,ro_cgns2,
             !     ps     &   zrhosnc,zrhosncp-rhosnc(jl),
             !     ps     &   snfor(jl),zsnstfor,zsnforp-snfor(jl),
             !     ps     &   zdsnst,tlambdasnc,zdsn,
             !     ps     &   zdweight,zrhodry,zrhost,
             !     ps     &   ztscsn2p-tscsn2(jl),tscsn2(jl)
             !     
             !     %%%%% else zfrsnfor %%%%%%%
             !     
          else
             !     
             ztcsnp=tc(jl)
             ztsncp=tsnc(jl)
             ztscsnp=tscsn(jl)
             !     sg021024
             ztscsn2p=tscsn2(jl)
             ztscsn3p=tscsn3(jl)
             ztscsn4p=tscsn4(jl)
             ztscsn5p=tscsn5(jl)
             !     sg021024
             zsnc2sw=0._realkind
             zswsncp=0._realkind
             zrhosncp=rhosnmin
             zsnforp=zsnstfor
             if(snmaxf(jl)>0._realkind)then
                !     ps030303              zsnc2sw=snfor(jl)+swsnc(jl)
                zsnc2sw=zsnstfor
                zsnforp=0._realkind
                zsnmaxfp=0._realkind
             endif
             !     
             !     %%%%% endif zfrsnfor %%%%%%%
             !     
          endif
          !     
          !     calculate weighted ztcp
          !     
          ztcp=ztcscp*(1._realkind-zfrsnfor)+ztcsnp*zfrsnfor
          !     
          !     ---------------------------
          !     
          !     
          !     ---------------------------------------
          !     l	snow surface (tsnow,tssn,tssn2,tssn3,tssn4,tssn5)
          !     ---------------------------------------
          !     
          zdelta1t=dtime
          zdelta2t=0._realkind
          zsnmel=0._realkind
          zsn2sw=0._realkind
          zsnopldi=0._realkind
          !     
          !     %%%%% if zsnw     %%%%%%%
          !     
          if(zsnw>0._realkind)then
             !     
             ztsnow=tsnow(jl)
             ztssn=tssn(jl)
             !     sg021024
             ztssn2=tssn2(jl)
             ztssn3=tssn3(jl)
             ztssn4=tssn4(jl)
             ztssn5=tssn5(jl)
             !     sg021024
             zswsn=max(swsn(jl),0._realkind)
             !     

             !     thermal conductivity according to peters-lidard et al.
             !     jas 1998, vol 55, nr 7, pp1209-1224
             !     -----------------------------------------------------
             !     3) open land snow
             !     ------------------

             !     first layer - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww1opl/vsw_mix1(jl) ! cj
             zfrsoilice=max(min((1._realkind-(ztssn-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps_mix1(jl)**(1._realkind-vsw_mix1(jl))*tlambdaice**(zfrsoilice*vsw_mix1(jl)) &
                  *tlambdaw**((1._realkind-zfrsoilice)*vsw_mix1(jl))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda1=zkersten*(zcapsat-zcapdry_mix1(jl))+ zcapdry_mix1(jl)
             !     ps100318
             ztlambda1=(1._realkind-zvegopl*(1._realkind-zvegmulch))*ztlambda1
             !     ps100318
             ztlambda1_oplsn(jl)=ztlambda1
             
             ro_cgw1opl=cs_mix1(jl)*(1._realkind-vsw_mix1(jl))+ &
                  cs_i*zfrsoilice*ww1opl+cs_w*(1.0_realkind-zfrsoilice)*ww1opl ! cj 
             ! Amount of frozen water in soil
             zsoilfrwmmopl=zsoilfrwmmopl+dz1*ww1opl*zfrsoilice*zsnw/(zfrop+zsnw)

             !     second layer - - - - - - - - - - - - - - - - - - - - - - - - - - -           
             zsat=ww1opl/vsw_mix1(jl) ! cj
             zfrsoilice=max(min((1._realkind-(ztssn2-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps_mix1(jl)**(1._realkind-vsw_mix1(jl))*tlambdaice**(zfrsoilice*vsw_mix1(jl)) &
                  *tlambdaw**((1._realkind-zfrsoilice)*vsw_mix1(jl))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda2=zkersten*(zcapsat-zcapdry_mix1(jl))+ zcapdry_mix1(jl)

             ztlambda2_oplsn(jl)=ztlambda2

             ro_cgw2opl=cs_mix1(jl)*(1._realkind-vsw_mix1(jl))+&
                  cs_i*zfrsoilice*ww1opl+ cs_w*(1._realkind-zfrsoilice)*ww1opl ! cj
             ! Amount of frozen water in soil
             zsoilfrwmmopl=zsoilfrwmmopl+dz2*ww1opl*zfrsoilice*zsnw/(zfrop+zsnw)

             !     third layer - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww2opl/vsw_mix2(jl) ! cj
             zfrsoilice=max(min((1._realkind-(ztssn3-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps_mix2(jl)**(1._realkind-vsw_mix2(jl))&
                  *tlambdaice**(zfrsoilice*vsw_mix2(jl))&
                  *tlambdaw**((1._realkind-zfrsoilice)*vsw_mix2(jl))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda3=zkersten*(zcapsat-zcapdry_mix2(jl))+zcapdry_mix2(jl)

             ztlambda3_oplsn(jl)=ztlambda3

             ro_cgw3opl=cs_mix2(jl)*(1._realkind-vsw_mix2(jl))+ &
                  cs_i*zfrsoilice*ww2opl+cs_w*(1._realkind-zfrsoilice)*ww2opl ! cj
             ! Amount of frozen water in soil
             zsoilfrwmmopl=zsoilfrwmmopl+ww2opl*dz2w*zfrsoilice*zsnw/(zfrop+zsnw)

             !     fourth layer - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww3opl/vsw(isoil)
             zfrsoilice=max(min((1._realkind-(ztssn4-rt2)/(rt1-rt2)), &
                  1._realkind),0._realkind)
             zcapsat=zcaps**(1._realkind-vsw(isoil))* &
                  tlambdaice**(zfrsoilice*vsw(isoil))* &
                  tlambdaw**((1._realkind-zfrsoilice)*vsw(isoil))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda4=zkersten*(zcapsat-zcapdry) + zcapdry

             ztlambda4_oplsn(jl)=ztlambda4

             ro_cgw4opl=cs_min*(1._realkind-vsw(isoil))+&
                  cs_i*zfrsoilice*ww3opl+cs_w*(1._realkind-zfrsoilice)*ww3opl ! cj 
             ! Amount of frozen water in soil
             zsoilfrwmmopl=zsoilfrwmmopl+zweightopl4*ww3opl*z3wopl*zfrsoilice*zsnw/(zfrop+zsnw)

             !     fifth layer  - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww3opl/vsw(isoil)
             zfrsoilice=max(min((1._realkind-(ztssn5-rt2)/(rt1-rt2)),&
                  1._realkind),0._realkind)
             zcapsat=zcaps**(1._realkind-vsw(isoil))* &
                  tlambdaice**(zfrsoilice*vsw(isoil))*&
                  tlambdaw**((1._realkind-zfrsoilice)*vsw(isoil))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda5=zkersten*(zcapsat-zcapdry) + zcapdry

             ztlambda5_oplsn(jl)=ztlambda5

             ro_cgw5opl=cs_min*(1._realkind-vsw(isoil))+ &
                  cs_i*zfrsoilice*ww3opl+ cs_w*(1._realkind-zfrsoilice)*ww3opl ! cj
             ! Amount of frozen water in soil
             zsoilfrwmmopl=zsoilfrwmmopl+zweightopl5*ww3opl*z3wopl*zfrsoilice*zsnw/(zfrop+zsnw)
             !ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

             !     modify soil heat capacity in case of freezing/thawing process,
             !     which occur for -3degc < tsc < 1degc (viterbo et al. 1999)
             !     ----------------------------------------------------------
             !     soil freezing, open land snow
             !     ----------------------------- 
             !     
             dstepdt=0._realkind
             if(ztssn>rt2.and.ztssn<rt1)then
                dstepdt=0.5_realkind*cos(pi*(ztssn-0.5_realkind*rt1-&
                     0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgsn=ro_cgw1opl - dstepdt*latice*vcc_mix1(jl)*rhoh2o
             !     
             dstepdt=0._realkind
             if(ztssn2>rt2.and.ztssn2<rt1)then
                dstepdt=0.5_realkind*cos(pi*(ztssn2-0.5_realkind*rt1-&
                     0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgsn2=ro_cgw2opl - dstepdt*latice*vcc_mix1(jl)*rhoh2o
             !     
             dstepdt=0._realkind
             if(ztssn3>rt2.and.ztssn3<rt1)then
                dstepdt=0.5_realkind*cos(pi*(ztssn3-0.5_realkind*rt1-&
                     0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgsn3=ro_cgw3opl - dstepdt*latice*vcc_mix2(jl)*rhoh2o
             !     
             dstepdt=0._realkind
             if(ztssn4>rt2.and.ztssn4<rt1)then
                dstepdt=0.5_realkind*cos(pi*(ztssn4-0.5_realkind*rt1-&
                     0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgsn4=ro_cgw4opl - dstepdt*latice*vcc(isoil)*rhoh2o
             !     
             dstepdt=0._realkind
             if(ztssn5>rt2.and.ztssn5<rt1)then
                dstepdt=0.5_realkind*cos(pi*(ztssn5-0.5_realkind*rt1-&
                     0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgsn5=ro_cgw5opl - dstepdt*latice*vcc(isoil)*rhoh2o
             !     -------------------------------------------------------------


             !     calculate actual snowdepth zsnopldepth
             !     
             !     zsnopldepth=snopl(jl)/zsnw
             zsnopldepth=snopl(jl)*zsnwinv
             if(zsnopldepth>0._realkind) zsnopldi=1._realkind/zsnopldepth
             !     
             !     zsafe is normally=0, but in cases of zsnw=0 zsafe=1
             !     
             zsafe=1._realkind-zsnopldi*zsnopldepth
             if(zsafe>0.5_realkind)then
                write(6,*)'zsnw: zsafe=1!! ',zsnw,zsnopldepth
             endif
             !     
             !     l  calculate heat capacity of snow (c*rho*z) era40
             !     -----------------------------------------------
             !     
             !     ps030114            zdsn=rhoh2o/zrhosn*zsnopldepth
             !     ps031218            zdsn=rhoh2o/zrhosn*zsnopldepth+zswsn*zsnwinv
             zdsn=rhoh2o/zrhosn*zsnopldepth
             !     
             zdsnst=min(zdsn,zsnlayer)
             c1=vhcice*zrhosn/rhoice*zdsnst
             c1sn=c1
             !     
             !     zrssn=0.5_realkind*zdsnst/tlambdasn + 0.5_realkind*dz1/tlambda1
             !     ps020904
             zrssn=0.5_realkind*zdsn/tlambdasn + 0.5_realkind*dz1/ztlambda1
             !     
             !     test with era-40 value
             !     
             !     ps020904            zrssn=0.5_realkind*zdsnst/tlambdasn + 0.5_realkind*dz1/15.         

             !     
             !     zalphasng=1._realkind-min(zdsn/zsnlayer,1._realkind)
             !     zalphasng=max(1.e-6,zalphasng)
             !     
             !     zalphasng=1._realkind-zdsnst/zsnlayer
             !     
             !     zalphasng forced equal 1._realkind!!!
             zalphasng=1._realkind
             zrssn=zrssn/zalphasng
             !     
             !     ps
             !     emissivity for open land snow is expressed as a function
             !     of albedo of open land snow
             !     
             zemsnowl=(albsnowl(jl)-albsnlmin)/(albsnlmax-albsnlmin)
             zemsnowl=min(max(zemsnowl,0._realkind),1._realkind)
             zemsnowl=zemsnowl*(emsnlmax-emsnlmin)+emsnlmin
             emsnowl(jl)=zemsnowl
             !     ps
             ztp3=-4._realkind*stebol*zemsnowl*tsnow(jl)*tsnow(jl)*tsnow(jl)
             !     ps090609
             !     ztp3=0._realkind
             !     ps090609
             zsurfsn=radfsn(jl) + senfsn(jl) + latfsn(jl)
             zdsrfsn = ztp3 + dhdtsn(jl)
             !     
             !     be energy consistent!
             !     
             zsurfsn=zsurfsn+latice*zfzsnr
             !     
             !     total flux available for the snow
             !     
             zsurfsntot=zsurfsn-(tsnow(jl)-tssn(jl))/zrssn

             zgroundsn=(tsnow(jl)-tssn(jl))/zrssn
             !     
             !     check cases
             !     -----------
             !     
             !     total heat flux is positive
             !     
             if(zsurfsntot>=1.e-3_realkind)then
                !     
                !     l   estimate the time step needed to bring tsnow to ztmelt
                !     
                zdelta1t=max((c1*(ztmelt-tsnow(jl)))/zsurfsntot,0._realkind)
                !     
                !     no phase change, temperature rising
                !     
                if(zdelta1t>=dtime)then
                   zdelta1t=dtime
                   zdelta2t=0._realkind
                else
                   !     
                   !     temperature risning and/or melting
                   !     
                   zdelta2t=dtime-zdelta1t
                   !     
                   !     estimate snow melt amount
                   zsnmel=zdelta2t/(rhoh2o*latice)*zsurfsntot
                   zsnmel=max(zsnmel,0._realkind)
                   !     
                endif
                !     
                !     rain that falls on zero-degree snow has not been included
                !     elsewhere.
                !     
                zrain2snow=zfzr2sn*zrsfl
                !     
             endif
             !     
             !     total heat flux is negative
             !     
             if(zsurfsntot<=-1.e-03_realkind)then
                !     
                !     freezing and/or temperature sinking
                !     
                zslask=zswsn*zsnwinv+zfzr2sn*zrsfl
                zswsn=min(zslask,zsnopldepth*zwsat)*zsnw
                zrain2snow=max(0._realkind,zslask-zswsn*zsnwinv)
                !     

                jq=1
                if((zeps-zswsn*zsnwinv)>=0._realkind)jq=0
                !     sg021129
                zslask=real(jq,realkind)*1._realkind/(zswsn*zsnwinv+&
                     real(1-jq,realkind)) 
                zslask=min(zsncrit*zrhosn*zwsat*zslask/rhoh2o,1._realkind)
                zfreezefrac=max(zslask,0._realkind)
                zdelta2t=zfreezefrac*dtime
                !     
                !     be sure to freeze the last water if very little water left
                !     
                if(zswsn*zsnwinv<zsnswcrit) then      
                   !     
                   zdelta2t=-rhoh2o*latice*zswsn*zsnwinv/zsurfsntot
                   zdelta2t=min(zdelta2t,dtime)
                   !     
                endif
                !     
                !     amount of freezed water = negative snow melt
                !     
                zsnmel=zdelta2t*zsurfsntot/(rhoh2o*latice)
                !     
                !     use only zdelta2t until all is frozen
                !     
                !     ps
                if(-zsnmel>zswsn*zsnwinv) then
                   zdelta2t=-zdelta2t*zswsn*zsnwinv/zsnmel
                   zsnmel=zdelta2t*zsurfsntot/(rhoh2o*latice)
                endif
                !     ps
                zdelta2t=min(zdelta2t,dtime)
                zdelta1t=dtime-zdelta2t
                zsnmel=min(zsnmel,0._realkind)
             endif
             !     
             if(abs(zsurfsntot)<1.e-3_realkind)then
                !     
                zdelta1t=0._realkind
                zdelta2t=dtime
                zsnmel=0._realkind
                zrain2snow=zfzr2sn*zrsfl
                !     
             endif
             !     
             !     solve snow eq implicitely including heat conduction
             !     ---------------------------------------------------
             !     
             !     the soil freezing is present also under the snow
             !     
             !     soil freezing second layer (viterbo ecmwf tech memor 255,1998)
             !     dstepdt = temp. derivative of freezing function:
             !     
             zdelta1t=zdelta1t/2._realkind
             zdelta2t=zdelta2t/2._realkind
             !     
             zrsinv=1._realkind/zrssn
             !     
             !     l    5-layer case computed before 6-layer case only if freezing
             !     ------------
             !     
             if(zsnmel<0._realkind.and.zdelta2t>0._realkind)then
                !     
                !     tssn-equation
                !     
                zslask=zdelta2t/(ro_cgsn*dz1)
                ztlambda=(dz1+dz2)*ztlambda1*ztlambda2/(ztlambda2*dz1+ztlambda1*dz2)
                zkdf1=2._realkind*ztlambda/(dz1+dz2)
                !     
                wa(1) = 0._realkind
                wb(1) = 1._realkind+zslask*(zkdf1+zrsinv)
                wc(1) = -zslask*zkdf1
                wr(1) = ztssn*(1._realkind-zslask*(zkdf1+zrsinv)) + zslask*(zkdf1*ztssn2+2._realkind*zrsinv*ztsnow)
                !     
                !     tssn2-equation
                !     
                zslask=zdelta2t/(ro_cgsn2*dz2)
                ztlambda=(dz2+dz3)*ztlambda2*ztlambda3/(ztlambda3*dz2+ztlambda2*dz3)
                zkdf2=2._realkind*ztlambda/(dz2+dz3)
                !     
                wa(2) = -zslask*zkdf1
                wb(2) = 1._realkind+zslask*(zkdf1+zkdf2)
                wc(2) = -zslask*zkdf2
                wr(2) = ztssn2*(1._realkind-zslask*(zkdf1+zkdf2))   +   zslask*(zkdf2*ztssn3+zkdf1*ztssn)
                !     
                !     tssn3-equation
                !     
                zslask=zdelta2t/(ro_cgsn3*dz3)
                ztlambda=(dz3+dz4)*ztlambda3*ztlambda4/(ztlambda4*dz3+ztlambda3*dz4)
                zkdf3=2._realkind*ztlambda/(dz3+dz4)
                !     
                wa(3) = - zslask*zkdf2 
                wb(3) = 1._realkind + zslask*(zkdf2 + zkdf3)
                wc(3) = -zslask*zkdf3
                wr(3) = ztssn3*(1._realkind- zslask*(zkdf2 + zkdf3)) + zslask*(zkdf3*ztssn4 + zkdf2*ztssn2)
                !     
                !     tssn4-equation
                !     
                zslask=zdelta2t/(ro_cgsn4*dz4)
                ztlambda=(dz4+dz5)*ztlambda4*ztlambda5/(ztlambda5*dz4+ztlambda4*dz5)
                zkdf4=2._realkind*ztlambda/(dz4+dz5)
                !     
                wa(4) = - zslask*zkdf3 
                wb(4) = 1._realkind + zslask*(zkdf3 + zkdf4)
                wc(4) = -zslask*zkdf4
                wr(4) = ztssn4*(1._realkind- zslask*(zkdf3 + zkdf4)) + zslask*(zkdf4*ztssn5 + zkdf3*ztssn3)
                !     
                !     tssn5-equation
                !     
                zslask=zdelta2t/(ro_cgsn5*dz5)
                !     
                wa(5) = - zslask*zkdf4 
                wb(5) = 1._realkind + zslask*zkdf4
                wc(5) = 0._realkind
                wr(5) = ztssn5*(1._realkind- zslask*zkdf4) + zslask*zkdf4*ztssn4

                call tridag(wa,wb,wc,wr,wtemp,5)
                !     
                ztssnp=wtemp(1)
                ztssn2p=wtemp(2)
                ztssn3p=wtemp(3)
                ztssn4p=wtemp(4)
                ztssn5p=wtemp(5)
                !     
                ztssn=ztssnp
                ztssn2=ztssn2p
                ztssn3=ztssn3p
                ztssn4=ztssn4p
                ztssn5=ztssn5p
                !     
                !     put tsnow(jl) back again in ztsnp 
                !     
                ztsnp=ztsnow
                !     
             endif
             !     
             !     l    6-layer case
             !     ------------
             !     
             if(zdelta1t>0._realkind)then            
                !     
                !     snow temperature equation
                !     
                zslask=zdelta1t/(c1+zsafe)
                zslask=(1._realkind-zsafe)*zslask
                !     
                wa(1) = 0._realkind
                wb(1) = 1._realkind-zslask*(zdsrfsn - zrsinv)
                wc(1) = -zslask*zrsinv
                wr(1) = ztsnow*(1._realkind-zslask*(zdsrfsn + zrsinv)) + zslask*(2._realkind*zsurfsn + zrsinv*ztssn)
                !     
                !     tssn-equation
                !     
                zslask=zdelta1t/(ro_cgsn*dz1)
                ztlambda=(dz1+dz2)*ztlambda1*ztlambda2/(ztlambda2*dz1+ztlambda1*dz2)
                zkdf1=2._realkind*ztlambda/(dz1+dz2)
                !     
                wa(2) = -zslask*zrsinv
                wb(2) = 1._realkind+zslask*(zkdf1+zrsinv)
                wc(2) = -zslask*zkdf1
                wr(2) = ztssn*(1._realkind-zslask*(zkdf1+zrsinv)) + zslask*(zkdf1*ztssn2+zrsinv*ztsnow)
                !     
                !     tssn2-equation
                !     
                zslask=zdelta1t/(ro_cgsn2*dz2)
                ztlambda=(dz2+dz3)*ztlambda2*ztlambda3/(ztlambda3*dz2+ztlambda2*dz3)
                zkdf2=2._realkind*ztlambda/(dz2+dz3)
                !     
                wa(3) = -zslask*zkdf1
                wb(3) = 1._realkind+zslask*(zkdf1+zkdf2)
                wc(3) = -zslask*zkdf2
                wr(3) = ztssn2*(1._realkind-zslask*(zkdf1+zkdf2)) +   zslask*(zkdf2*ztssn3+zkdf1*ztssn)
                !     
                !     tssn3-equation
                !     
                zslask=zdelta1t/(ro_cgsn3*dz3)
                ztlambda=(dz3+dz4)*ztlambda3*ztlambda4/(ztlambda4*dz3+ztlambda3*dz4)
                zkdf3=2._realkind*ztlambda/(dz3+dz4)
                !     
                wa(4) = - zslask*zkdf2 
                wb(4) = 1._realkind + zslask*(zkdf2 + zkdf3)
                wc(4) = -zslask*zkdf3
                wr(4) = ztssn3*(1._realkind- zslask*(zkdf2 + zkdf3)) + zslask*(zkdf3*ztssn4 + zkdf2*ztssn2)
                !     
                !     tssn4-equation
                !     
                zslask=zdelta1t/(ro_cgsn4*dz4)
                ztlambda=(dz4+dz5)*ztlambda4*ztlambda5/(ztlambda5*dz4+ztlambda4*dz5)
                zkdf4=2._realkind*ztlambda/(dz4+dz5)
                !     
                wa(5) = - zslask*zkdf3 
                wb(5) = 1._realkind + zslask*(zkdf3 + zkdf4)
                wc(5) = -zslask*zkdf4
                wr(5) = ztssn4*(1._realkind- zslask*(zkdf3 + zkdf4)) + zslask*(zkdf4*ztssn5 + zkdf3*ztssn3)
                !     
                !     tssn5-equation
                !     
                zslask=zdelta1t/(ro_cgsn5*dz5)
                !     
                wa(6) = - zslask*zkdf4 
                wb(6) = 1._realkind + zslask*zkdf4
                wc(6) = 0._realkind
                wr(6) = ztssn5*(1._realkind- zslask*zkdf4) + zslask*zkdf4*ztssn4

                call tridag(wa,wb,wc,wr,wtemp,6)
                !     
                ztsnp=wtemp(1)
                ztssnp=wtemp(2)
                ztssn2p=wtemp(3)
                ztssn3p=wtemp(4)
                ztssn4p=wtemp(5)
                ztssn5p=wtemp(6)
                !     
                ztsnow=ztsnp
                ztssn=ztssnp
                ztssn2=ztssn2p
                ztssn3=ztssn3p
                ztssn4=ztssn4p
                ztssn5=ztssn5p
                !     
             endif
             !     
             !     l    5-layer case computed after 6-layer case only if melting  
             !     ------------
             !     also the case where zsurfsntot is small is computed here 
             !     (zsnmel=0)
             !     
             if(zsnmel>=0._realkind.and.zdelta2t>0._realkind)then
                !     
                !     tssn-equation
                !     
                zslask=zdelta2t/(ro_cgsn*dz1)
                ztlambda=(dz1+dz2)*ztlambda1*ztlambda2/(ztlambda2*dz1+ztlambda1*dz2)
                zkdf1=2._realkind*ztlambda/(dz1+dz2)
                !     
                wa(1) = 0._realkind
                wb(1) = 1._realkind+zslask*(zkdf1+zrsinv)
                wc(1) = -zslask*zkdf1
                wr(1) = ztssn*(1._realkind-zslask*(zkdf1+zrsinv)) + zslask*(zkdf1*ztssn2+2._realkind*zrsinv*ztsnow)
                !     
                !     tssn2-equation
                !     
                zslask=zdelta2t/(ro_cgsn2*dz2)
                ztlambda=(dz2+dz3)*ztlambda2*ztlambda3/(ztlambda3*dz2+ztlambda2*dz3)
                zkdf2=2._realkind*ztlambda/(dz2+dz3)
                !     
                wa(2) = -zslask*zkdf1
                wb(2) = 1._realkind+zslask*(zkdf1+zkdf2)
                wc(2) = -zslask*zkdf2
                wr(2) = ztssn2*(1._realkind-zslask*(zkdf1+zkdf2)) +   zslask*(zkdf2*ztssn3+zkdf1*ztssn)
                !     
                !     tssn3-equation
                !     
                zslask=zdelta2t/(ro_cgsn3*dz3)
                ztlambda=(dz3+dz4)*ztlambda3*ztlambda4/(ztlambda4*dz3+ztlambda3*dz4)
                zkdf3=2._realkind*ztlambda/(dz3+dz4)
                !     
                wa(3) = - zslask*zkdf2 
                wb(3) = 1._realkind + zslask*(zkdf2 + zkdf3)
                wc(3) = -zslask*zkdf3
                wr(3) = ztssn3*(1._realkind- zslask*(zkdf2 + zkdf3))+ zslask*(zkdf3*ztssn4 + zkdf2*ztssn2)
                !     
                !     tssn4-equation
                !     
                zslask=zdelta2t/(ro_cgsn4*dz4)
                ztlambda=(dz4+dz5)*ztlambda4*ztlambda5/(ztlambda5*dz4+ztlambda4*dz5)
                zkdf4=2._realkind*ztlambda/(dz4+dz5)
                !     
                wa(4) = - zslask*zkdf3 
                wb(4) = 1._realkind + zslask*(zkdf3 + zkdf4)
                wc(4) = -zslask*zkdf4
                wr(4) = ztssn4*(1._realkind- zslask*(zkdf3 + zkdf4)) + zslask*(zkdf4*ztssn5 + zkdf3*ztssn3)
                !     
                !     tssn5-equation
                !     
                zslask=zdelta2t/(ro_cgsn5*dz5)
                !     
                wa(5) = - zslask*zkdf4 
                wb(5) = 1._realkind + zslask*zkdf4
                wc(5) = 0._realkind
                wr(5) = ztssn5*(1._realkind- zslask*zkdf4) + zslask*zkdf4*ztssn4

                call tridag(wa,wb,wc,wr,wtemp,5)
                !     
                ztssnp=wtemp(1)
                ztssn2p=wtemp(2)
                ztssn3p=wtemp(3)
                ztssn4p=wtemp(4)
                ztssn5p=wtemp(5)
                !     
                ztsnp=ztsnow
                !     
             endif
             !     
             !     l   new snow amount
             !     ---------------
             !     
             !     ps030114            zsnoplp=zsnstopl-zsnmel*zsnw
             zsnoplp=zsnstopl-max(swsn(jl),0._realkind)-zsnmel*zsnw
             !     
             !     l   new snow water amount
             !     
             !     here the computations are values over the snow part only
             !     i.e. zswsn is value over zsnw and so is zsn2sw, zswsnp and zsnmel
             !     
             zsn2sw=zsnw*(zswsn*zsnwinv+zsnmel)+zsnw*zrain2snow
             zswsnp=min(zsn2sw,zwsat*zsnoplp)*zsnw
             !     
             zswsnp=max(zswsnp,0._realkind)
             !     
             !     l   amount of snow water passed to the soil
             !     
             zsn2sw=max(zsn2sw-zswsnp*zsnwinv,0._realkind)
             !     
             zswsnp=zswsnp*zsnwinv
             !     
             zrhodry=rhosnmin
             !     
             !     l  density of dry snow (era40)
             !     -----------------------------
             !     
             !     ps031218            zdweight=zsnopldepth/(zsnopldepth+swsn(jl)*zsnwinv+zsafe)
             zdweight=(zsnopldepth-swsn(jl)*zsnwinv)/ (zsnopldepth+zsafe)
             !     
             zrhodry=(zrhosn-(1._realkind-zdweight-zsafe)*rhoh2o)/(zdweight+zsafe)

             !     zslask=dtime*dsnowdt(jl)/rhoh2o
             zslask=(zsnstopl-snopl(jl))*zsnwinv
             if(zslask>0.0001_realkind)then
                zrhost=((zsnopldepth-swsn(jl)*zsnwinv)*zrhodry+zslask* &
                     rhosnmin)/(zsnopldepth-swsn(jl)*zsnwinv+  zsafe+zslask)
             else
                zrhost=zrhodry
             endif
             !     
             !     l    dry snow density at t+1

             zrhodry=(zrhost-rhosnmax)*exp(-taufsn*dtime/tau1sn) +rhosnmax

             !     ---------------------
             !     
             zsafe=1._realkind
             if(zsnoplp>0._realkind)zsafe=0._realkind
             !     
             !     new snow density
             !     
             zdweight=(1._realkind-zsafe)*zsnoplp/(zsnoplp+zswsnp+zsafe)
             zrhosnp=zrhodry*zdweight+rhoh2o*(1._realkind-zdweight-zsafe)+&
                  zsafe*zrhosn

             zsnoplp=zsnoplp+zswsnp
             !     
             !     ***********************************************
             !     test of new snow density calculation
             !     ***********************************************
             !     call snow_density_htessel(
             !     c      input
             !     c      output
             !     &  )
             !     ***********************************************
             !     
             !     l   calculate new snow max value for open land
             !     
             if(snmax(jl)>zfrtopl*1.e-06_realkind) then
                if( zsnoplp>=snmax(jl) )then
                   zsnmaxp=zsnoplp
                elseif ( zsnoplp<zk1*snmax(jl) )  then
                   zsnmaxp=snmax(jl) -  ( zk1*snmax(jl)-zsnoplp )*(1._realkind-zk)/zk1
                   if(zsnmaxp<zfrtopl*1.e-6_realkind)zsnmaxp=0.0_realkind
                else
                   zsnmaxp=snmax(jl)
                endif
                !     this might not be necessary:
                if(zsnoplp<=zfrtopl*1.e-06_realkind)zsnmaxp=0._realkind
             endif
             !     new snow albedo
             !     
             !     wjb proposed version 8 dec 2009
             !     use vdhurk 2002 (or ecmwf physics) for decay scaling for temperatures below zero
             !     although i decreased his 1+0.1 to 1+0.01 
             !     gradual increase of albedo for new snow, and different for dry and melting conditions
             !     and a near instanteneous drop to 0.7 of the albedo for significant melt. (with my knowledge over antarctic albedo in my mind)
             zalbsn = albsnowl(jl)
             if(dsnowdt(jl)>0._realkind)then
                if ( zsnmel>0._realkind )then
                   znewsna=(dsnowdt(jl)*zsn2aream/zfrtopl)**zalbareap ! doesn't matter that this could be > 1
                   zalbsn  = zalbsn*(1._realkind-znewsna)+zalbmelt*znewsna
                else
                   znewsna=(dsnowdt(jl)*zsn2areaf/zfrtopl)**zalbareap ! doesn't matter that this could be > 1
!cgj300712                   zalbsn  = min(albsnlmax,zalbsn*(1._realkind-znewsna)+zalbsnfr*znewsna)
                   zdsnow = dsnowdt(jl)*dtime
                   zalbsn = zalbsn + (min(1.,(zdsnow/10._realkind))*(albsnlmax-zalbsn))
                endif
             elseif(zsnmel>0._realkind)then
                znewsna = max(zalbmelt,zalbsn -((albsnlmax-zalbmelt)*(zsnmel/(zalbmelts*zfrtopl)))) 
                zalbsn = min(znewsna,(zalbsn-albsnlmin)*zexpalb+albsnlmin)
             else
!cgj300712                zalbsn = zalbsn - tauasn*dtime/(tau1sn*(1._realkind+ 0.01_realkind*((ztsnp-ztmelt)**4)))
                zalbsn = zalbsn - tauasn*dtime/tau1sn
             endif
             albsnowl(jl) = max(zalbsn, albsnlmin)
!cgj300712
!cgj300712             albsnowl(jl)=min(albsnowl(jl),0.7)
!cgj300712

             if((zswsn*zsnwinv+zsnmel)>=((zsnoplp-zswsnp)*zsnwinv))then
                zsn2sw=zsnoplp
                zswsnp=0._realkind
                zsnoplp=0._realkind
             endif
             !     
             !     
             !     ps         if(lprint)write(996,'(2i6,2f8.3,28(1pe12.4))')
             !     ps     &   jl,kstep,zalat,along(jl),
             !     ps     &   zfrsnopl,ztsnp-tsnow(jl),
             !     ps     &   ztssnp-tssn(jl),zsurfsntot,zsnmel,
             !     ps     &   radfsn(jl),senfsn(jl),latfsn(jl),
             !     ps     &   tsnow(jl),tssn(jl),zrssn,
             !     ps     &   zdsrfsn,
             !     ps     &   zdelta1t,zdelta2t,c1,ro_cgsn,
             !     ps     &   zrhosn,zrhosnp-rhosn(jl),
             !     ps     &   snopl(jl),zsnoplp-snopl(jl),
             !     ps     &   zdsnst,tlambdasn,zdsn,
             !     ps     &   zdweight,zrhodry,zrhost,
             !     ps     &   ztssn2p-tssn2(jl),tssn2(jl)
             !     
             !     ps         if(lprint2)write(296,'(2i6,2f8.3,28(1pe12.4))')
             !     ps     &   jl,kstep,zalat,along(jl),
             !     ps     &   zfrsnopl,ztsnp-tsnow(jl),
             !     ps     &   ztssnp-tssn(jl),zsurfsntot,zsnmel,
             !     ps     &   radfsn(jl),senfsn(jl),latfsn(jl),
             !     ps     &   tsnow(jl),tssn(jl),zrssn,
             !     ps     &   zdsrfsn,
             !     ps     &   zdelta1t,zdelta2t,c1,ro_cgsn,
             !     ps     &   zrhosn,zrhosnp-rhosn(jl),
             !     ps     &   snopl(jl),zsnoplp-snopl(jl),
             !     ps     &   zdsnst,tlambdasn,zdsn,
             !     ps     &   zdweight,zrhodry,zrhost,
             !     ps     &   ztssn2p-tssn2(jl),tssn2(jl)
             !     
             !     ps         if(lprint3)write(396,'(2i6,2f8.3,28(1pe12.4))')
             !     ps     &   jl,kstep,zalat,along(jl),
             !     ps     &   zfrsnopl,ztsnp-tsnow(jl),
             !     ps     &   ztssnp-tssn(jl),zsurfsntot,zsnmel,
             !     ps     &   radfsn(jl),senfsn(jl),latfsn(jl),
             !     ps     &   tsnow(jl),tssn(jl),zrssn,
             !     ps     &   zdsrfsn,
             !     ps     &   zdelta1t,zdelta2t,c1,ro_cgsn,
             !     ps     &   zrhosn,zrhosnp-rhosn(jl),
             !     ps     &   snopl(jl),zsnoplp-snopl(jl),
             !     ps     &   zdsnst,tlambdasn,zdsn,
             !     ps     &   zdweight,zrhodry,zrhost,
             !     ps     &   ztssn2p-tssn2(jl),tssn2(jl)
             !     
             !     %%%%% else zsnw %%%%%%%
             !     
          else
             !     
             ztsnp=tsnow(jl)
             ztssnp=tssn(jl)
             !     sg021024
             ztssn2p=tssn2(jl)
             ztssn3p=tssn3(jl)
             ztssn4p=tssn4(jl)
             ztssn5p=tssn5(jl)
             !     sg021024
             zsn2sw=0._realkind
             zswsnp=0._realkind
             zrhosnp=rhosnmin
             zsnoplp=zsnstopl
             albsnowl(jl)=albsnlmax
             if(snmax(jl)>0._realkind)then
                !     ps030114              zsn2sw=snopl(jl)+swsn(jl)
                zsn2sw=zsnstopl
                zsnoplp=0._realkind
                zsnmaxp=0._realkind
             endif
             !     
             !     %%%%% endif zsnw %%%%%%%
             !     
          endif
          !     
          !     ---------------------------------------------
          !     l	no-snow surface and soil (tsnsr,tsns2,tsns3,tsns4,tsns5)
          !     ---------------------------------------------
          !     
          !     %%%%% if zfrop     %%%%%%%
          !     
          if(zfrop>0._realkind)then
             !     
             ztp3=-4._realkind*stebol*zemopl*tsns(jl)*tsns(jl)*tsns(jl)
             if(zfrop<zfrinsg) ztp3=0._realkind
             !     ps090609
             !     ztp3=0._realkind
             !     ps090609
             zsurfl=radfns(jl) + senfns(jl) + latfns(jl)
             zdsrfl = ztp3 + dhdtsns(jl)

             zsurfl = zsurfl+latice*(zfzbr-zmelbs)

             !     thermal conductivity according to peters-lidard et al.
             !     jas 1998, vol 55, nr 7, pp1209-1224
             !     ------------------------------------------------------
             !     4)open land no snow
             !     -------------------
             !     first layer - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww1opl/vsw_mix1(jl) ! cj
             zfrsoilice=max(min((1._realkind-(tsns(jl)-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps_mix1(jl)**(1._realkind-vsw_mix1(jl))*tlambdaice &
                  **(zfrsoilice*vsw_mix1(jl))*tlambdaw**&
                  ((1._realkind-zfrsoilice)*vsw_mix1(jl))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda1=zkersten*(zcapsat-zcapdry_mix1(jl))+zcapdry_mix1(jl)
             !     ps100318
             ztlambda1=(1._realkind-zvegopl*(1._realkind-zvegmulch))*ztlambda1
             !     ps100318
             ztlambda1_oplns(jl)=ztlambda1
             
             ro_cgw1opl=cs_mix1(jl)*(1._realkind-vsw_mix1(jl))+ &
                  cs_i*zfrsoilice*ww1opl+cs_w*(1._realkind-zfrsoilice)*ww1opl ! cj
             ! Amount of frozen water in soil
             zsoilfrwmmopl=zsoilfrwmmopl+dz1*ww1opl*zfrsoilice*zfrop/(zfrop+zsnw)

             !     second layer - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww1opl/vsw_mix1(jl) ! cj
             zfrsoilice=max(min((1._realkind-(tsns2(jl)-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps_mix1(jl)**(1._realkind-vsw_mix1(jl))*tlambdaice**&
                  (zfrsoilice*vsw_mix1(jl))*tlambdaw**&
                  ((1._realkind-zfrsoilice)*vsw_mix1(jl))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda2=zkersten*(zcapsat-zcapdry_mix1(jl))+  zcapdry_mix1(jl)

             ztlambda2_oplns(jl)=ztlambda2 

             ro_cgw2opl=cs_mix1(jl)*(1._realkind-vsw_mix1(jl))+ cs_i*zfrsoilice*ww1opl+cs_w*(1._realkind-zfrsoilice)*ww1opl ! cj
             ! Amount of frozen water in soil
             zsoilfrwmmopl=zsoilfrwmmopl+dz2*ww1opl*zfrsoilice*zfrop/(zfrop+zsnw)

             !     third layer - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww2opl/vsw_mix2(jl) ! cj
             zfrsoilice=max(min((1._realkind-(tsns3(jl)-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps_mix2(jl)**(1._realkind-vsw_mix2(jl))*tlambdaice**&
                  (zfrsoilice*vsw_mix2(jl))*tlambdaw**((1._realkind-zfrsoilice)*&
                  vsw_mix2(jl))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda3=zkersten*(zcapsat-zcapdry_mix2(jl))+zcapdry_mix2(jl)

             ztlambda3_oplns(jl)=ztlambda3

             ro_cgw3opl=cs_mix2(jl)*(1._realkind-vsw_mix2(jl))+ cs_i*zfrsoilice*ww2opl+ cs_w*(1._realkind-zfrsoilice)*ww2opl ! cj
             ! Amount of frozen water in soil
             zsoilfrwmmopl=zsoilfrwmmopl+ww2opl*dz2w*zfrsoilice*zfrop/(zfrop+zsnw)

             !     fourth layer - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww3opl/vsw(isoil)
             zfrsoilice=max(min((1._realkind-(tsns4(jl)-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps**(1._realkind-vsw(isoil))*&
                  tlambdaice**(zfrsoilice*vsw(isoil))*&
                  tlambdaw**((1._realkind-zfrsoilice)*vsw(isoil))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda4=zkersten*(zcapsat-zcapdry) + zcapdry

             ztlambda4_oplns(jl)=ztlambda4

             ro_cgw4opl=cs_min*(1._realkind-vsw(isoil))+ &
                  cs_i*zfrsoilice*ww3opl+cs_w*(1._realkind-zfrsoilice)*ww3opl ! cj 
             ! Amount of frozen water in soil
             zsoilfrwmmopl=zsoilfrwmmopl+zweightopl4*ww3opl*z3wopl*zfrsoilice*zfrop/(zfrop+zsnw)

             !     fifth layer - - - - - - - - - - - - - - - - - - - - - - - - - - -
             zsat=ww3opl/vsw(isoil)
             zfrsoilice=max(min((1._realkind-(tsns5(jl)-rt2)/(rt1-rt2)),1._realkind),0._realkind)
             zcapsat=zcaps**(1._realkind-vsw(isoil))*&
                  tlambdaice**(zfrsoilice*vsw(isoil))*&
                  tlambdaw**((1._realkind-zfrsoilice)*vsw(isoil))
             zkersten=0._realkind
             if(zsat>0.1_realkind) zkersten=1._realkind+log10(zsat)
             zkersten=(1._realkind-zfrsoilice)*zkersten+zfrsoilice*zsat
             ztlambda5=zkersten*(zcapsat-zcapdry) + zcapdry

             ztlambda5_oplns(jl)=ztlambda5

             ro_cgw5opl=cs_min*(1._realkind-vsw(isoil))+ &
                  cs_i*zfrsoilice*ww3opl+ cs_w*(1._realkind-zfrsoilice)*ww3opl ! cj
             ! Amount of frozen water in soil
             zsoilfrwmmopl=zsoilfrwmmopl+zweightopl5*ww3opl*z3wopl*zfrsoilice*zfrop/(zfrop+zsnw)
             !ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

             !     modify soil heat capacity in case of freezing/thawing process,
             !     which occur for -3degc < tsc < 1degc (viterbo et al. 1999)
             !     ----------------------------------------------------------
             !     soil freezing, open land no snow
             !     --------------------------------
             !     
             dstepdt=0._realkind
             if(tsns(jl)>rt2.and.tsns(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tsns(jl)-&
                     0.5_realkind*rt1-0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgns=ro_cgw1opl - dstepdt*latice*vcc_mix1(jl)*rhoh2o
             !     
             dstepdt=0._realkind
             if(tsns2(jl)>rt2.and.tsns2(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tsns2(jl)-&
                     0.5_realkind*rt1-0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgns2=ro_cgw2opl - dstepdt*latice*vcc_mix1(jl)*rhoh2o
             !     
             dstepdt=0._realkind
             if(tsns3(jl)>rt2.and.tsns3(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tsns3(jl)-&
                     0.5_realkind*rt1-0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgns3=ro_cgw3opl - dstepdt*latice*vcc_mix2(jl)*rhoh2o
             !     
             dstepdt=0._realkind
             if(tsns4(jl)>rt2.and.tsns4(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tsns4(jl)-&
                     0.5_realkind*rt1-0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgns4=ro_cgw4opl - dstepdt*latice*vcc(isoil)*rhoh2o
             !     
             dstepdt=0._realkind
             if(tsns5(jl)>rt2.and.tsns5(jl)<rt1)then
                dstepdt=0.5_realkind*cos(pi*(tsns5(jl)-&
                     0.5_realkind*rt1-0.5_realkind*rt2)/(rt2-rt1))*pi/(rt2-rt1)
             endif
             ro_cgns5=ro_cgw5opl - dstepdt*latice*vcc(isoil)*rhoh2o
             !     --------------------------------------------------------------

             !     
             !     tsns-equation
             !     
             zslask=dtime/(ro_cgns*dz1)
             ztlambda=(dz1+dz2)*ztlambda1*ztlambda2/(ztlambda2*dz1+ztlambda1*dz2)
             zkdf1=2._realkind*ztlambda/(dz1+dz2)
             !     
             wa(1) = 0._realkind
             wb(1) = 1._realkind-zslask*(alphaimp*zdsrfl - 0.5_realkind*zkdf1)
             wc(1) = -0.5_realkind*zslask*zkdf1
             wr(1) = tsns(jl)*(1._realkind-zslask*(alphaimp*zdsrfl + &
                  0.5_realkind*zkdf1)) + &
                  zslask*(0.5_realkind*zkdf1*tsns2(jl)+zsurfl)
             !     ps     &              (1._realkind-alphaimp)*zkdf1)) +

             !     tsns2-equation
             !     
             zslask=0.5_realkind*dtime/(ro_cgns2*dz2)
             ztlambda=(dz2+dz3)*ztlambda2*ztlambda3/(ztlambda3*dz2+ztlambda2*dz3)
             zkdf2=2._realkind*ztlambda/(dz2+dz3)
             !     
             wa(2) = -zslask*zkdf1
             wb(2) = 1._realkind+zslask*(zkdf1+zkdf2)
             wc(2) = -zslask*zkdf2
             wr(2) = tsns2(jl)*(1._realkind-zslask*(zkdf1+zkdf2)) + &
                  zslask*(zkdf2*tsns3(jl)+zkdf1*tsns(jl))
             !     
             !     tsns3-equation
             !     
             zslask=0.5_realkind*dtime/(ro_cgns3*dz3)
             ztlambda=(dz3+dz4)*ztlambda3*ztlambda4/(ztlambda4*dz3+ztlambda3*dz4)
             zkdf3=2._realkind*ztlambda/(dz3+dz4)
             !     
             wa(3) = - zslask*zkdf2 
             wb(3) = 1._realkind + zslask*(zkdf2 + zkdf3)
             wc(3) = -zslask*zkdf3
             wr(3) = tsns3(jl)*(1._realkind- zslask*(zkdf2 + zkdf3)) + &
                  zslask*(zkdf3*tsns4(jl) + zkdf2*tsns2(jl))
             !     
             !     tsns4-equation
             !     
             zslask=0.5_realkind*dtime/(ro_cgns4*dz4)
             ztlambda=(dz4+dz5)*ztlambda4*ztlambda5/(ztlambda5*dz4+ztlambda4*dz5)
             zkdf4=2._realkind*ztlambda/(dz4+dz5)
             !     
             wa(4) = - zslask*zkdf3 
             wb(4) = 1._realkind + zslask*(zkdf3 + zkdf4)
             wc(4) = -zslask*zkdf4
             wr(4) = tsns4(jl)*(1._realkind- zslask*(zkdf3 + zkdf4))  +&
                  zslask*(zkdf4*tsns5(jl) + zkdf3*tsns3(jl))
             !     
             !     tsns5-equation
             !     
             zslask=0.5_realkind*dtime/(ro_cgns5*dz5)
             !     
             wa(5) = - zslask*zkdf4 
             wb(5) = 1._realkind + zslask*zkdf4
             wc(5) = 0._realkind
             wr(5) = tsns5(jl)*(1._realkind- zslask*zkdf4) +&
                  zslask*zkdf4*tsns4(jl)

             call tridag(wa,wb,wc,wr,wtemp,5)
             !     
             ztsp=wtemp(1)
             ztsns2p=wtemp(2)
             ztsns3p=wtemp(3)
             ztsns4p=wtemp(4)
             ztsns5p=wtemp(5)
             !     
             !     %%%%% else zfrop %%%%%%%
             !     
          else
             !     
             ztsp=tsns(jl)
             ztsns2p=tsns2(jl)
             ztsns3p=tsns3(jl)
             ztsns4p=tsns4(jl)
             ztsns5p=tsns5(jl)
             !     
             !     sg021024 ends
             !     
             !     %%%%% endif zfrop %%%%%%%
             !     
          endif
          !     
          !     ----------------------------------------------------------
          !     
          !     
          !     *         3.      soil moisture
          !     -------------
          !     
          !     zi1=effective precipitation+snowmelt [m/s]
          !     
          zi1opl=zfrop/(zfrop+zsnw)/rhoh2o*(zrainop-zfzbr+zmelbs)+  zsn2sw/(1._realkind-zcw)/dtime
          zi1for=(1._realkind-zfrsnfor)/rhoh2o*(zrainf-zfzbrc+zmelbsc)+ zsnc2sw*zcwinv/dtime
          !     
          !     the drainage terms are expressed as
          !     outflow = inflow * ( ( ww-wp)/(fc-wp) )**beta
          !     where beta is set to 2
          !     
          zbet1opl=(ww1opl-vfl_mix1(jl))/(vcc_mix1(jl)-vfl_mix1(jl)) ! cj
          zbet1for=(ww1for-vfl_mix1(jl))/(vcc_mix1(jl)-vfl_mix1(jl)) ! cj
          zbet2opl=(ww2opl-vfl_mix2(jl))/(vcc_mix2(jl)-vfl_mix2(jl)) ! cj
          zbet2for=(ww2for-vfl_mix2(jl))/(vcc_mix2(jl)-vfl_mix2(jl)) ! cj
          zbet3opl=(ww3opl-vfl(isoil))/(vcc(isoil)-vfl(isoil)) ! cj
          zbet3for=(ww3for-vfl(isoil))/(vcc(isoil)-vfl(isoil)) ! cj
          !     
          zbetq1opl=zbet1opl*zbet1opl
          zbetq1for=zbet1for*zbet1for
          zbetq2opl=zbet2opl*zbet2opl
          zbetq2for=zbet2for*zbet2for
          zbetq3opl=zbet3opl*zbet3opl
          zbetq3for=zbet3for*zbet3for
          !     
          !     the drainage/runoff [m/s]
          !     
          zq1opl=zi1opl*zbetq1opl
          zq1for=zi1for*zbetq1for
          zq2opl=zq1opl*zbetq2opl
          zq2for=zq1for*zbetq2for
          zq3opl=zq2opl*zbetq3opl
          zq3for=zq2for*zbetq3for
          !     
          !     the total flux of water to each layer [1/s]
          !     
          zslask=zfrop/(zfrop+zsnw+zlandoff)
          !     
          zflux1opl=1._realkind/dz1w*( wlambda12opl*(ww2opl-ww1opl)+  zi1opl*(1._realkind-zbetq1opl)+ &
               (1._realkind-zvegopl)*zslask*latfnsbs(jl)/(zlatns*rhoh2o)- &
               zvegopl*zslask*etropl1(jl)/(zlatns*rhoh2o) )
          zflux2opl=1._realkind/dz2w*( wlambda23opl*(ww3opl-ww2opl)-  wlambda12opl*(ww2opl-ww1opl)+ &
               zi1opl*zbetq1opl*(1._realkind-zbetq2opl)- zvegopl*zslask*etropl2(jl)/(zlatns*rhoh2o) )
          zflux3opl=1._realkind/z3wopl*( -wlambda23opl*(ww3opl-ww2opl)+  zq1opl*zbetq2opl*(1._realkind-zbetq3opl)- &
               zvegopl*zslask*etropl3(jl)/(zlatns*rhoh2o) )
          !     
          zflux1for=1._realkind/dz1w*( wlambda12for*(ww2for-ww1for)+ zi1for*(1._realkind-zbetq1for)+ &
               (1._realkind-zfrsnfor)*latfsc(jl)/(zlatsc*rhoh2o)- etrfor1(jl)/(zlatc*rhoh2o) )
          zflux2for=1._realkind/dz2w*( wlambda23for*(ww3for-ww2for)- wlambda12for*(ww2for-ww1for)+ &
               zi1for*zbetq1for*(1._realkind-zbetq2for)-etrfor2(jl)/(zlatc*rhoh2o) )
          zflux3for=1._realkind/z3wfor*( -wlambda23for*(ww3for-ww2for)+ zq1for*zbetq2for*(1._realkind-zbetq3for)- &
               etrfor3(jl)/(zlatc*rhoh2o) )
          !     
          !     the derivatives of the flux terms w.r.t. the drainage terms only 
          !     to be used for an implicit solution
          !     

          ! zslask=2._realkind/(vcc(isoil)-vfl(isoil))**2._realkind

          !     open land:
          dzq1opldww1=-zi1opl/dz1w*(2._realkind/(vcc_mix1(jl)-vfl_mix1(jl))**2._realkind)*(ww1opl-vfl_mix1(jl))

          dzq2opldww1=zi1opl/dz2w*( 1._realkind-zbetq2opl )* &
               (2._realkind/(vcc_mix2(jl)-vfl_mix2(jl))**2._realkind)*&
               (ww1opl-vfl_mix1(jl)) ! cj (vcc_mix2-vfl_mix2) or (vcc_mix1-vfl_mix1) ?????

          dzq2opldww2=-zi1opl/dz2w*zbetq1opl*(2._realkind/(vcc_mix2(jl)-&
               vfl_mix2(jl))**2._realkind)*(ww2opl-vfl_mix2(jl)) ! cj (vcc_mix2-vfl_mix2) or (vcc_mix1-vfl_mix1) ?????

          dzq3opldww2=zq1opl/z3wopl*( 1._realkind-zbetq3opl )*&
               (2._realkind/(vcc(isoil)-vfl(isoil))**2._realkind)*&
               (ww2opl-vfl_mix2(jl)) ! cj (vcc-vfl)           or (vcc_mix2-vfl_mix2) ?????
          !  same question for forest below 
          dzq3opldww3=-zq1opl/z3wopl*zbetq2opl*(2._realkind/(vcc(isoil)-&
               vfl(isoil))**2._realkind)*(ww3opl-vfl(isoil))


          !     forest:
          dzq1fordww1=-zi1for/dz1w*(2._realkind/(vcc_mix1(jl)-&
               vfl_mix1(jl))**2._realkind)*(ww1for-vfl_mix1(jl))

          dzq2fordww1=zi1for/dz2w*( 1._realkind-zbetq2for )*(2._realkind/&
               (vcc_mix2(jl)-vfl_mix2(jl))**2._realkind)*(ww1for-vfl_mix1(jl))

          dzq2fordww2=-zi1for/dz2w*zbetq1for*(2._realkind/(vcc_mix2(jl)-&
               vfl_mix2(jl))**2._realkind)*(ww2for-vfl_mix2(jl))

          dzq3fordww2=zq1for/z3wfor*( 1._realkind-zbetq3for )*&
               (2._realkind/(vcc(isoil)-vfl(isoil))**2._realkind)*&
               (ww2for-vfl_mix2(jl))

          dzq3fordww3=-zq1for/z3wfor*zbetq2for*(2._realkind/&
               (vcc(isoil)-vfl(isoil))**2._realkind)*(ww3for-vfl(isoil))


          !     the degree of implicity is given by alphaimpww.
          !     alphaimpww=0._realkind means purly explicit solution 
          !     
          alphaimpww=0._realkind
          !     
          !     the solution of the 3-equation system
          !     
          wa(1) = 0._realkind
          wb(1) = 1._realkind-alphaimpww*dtime*dzq1opldww1
          wc(1) = 0._realkind
          wr(1)=ww1opl+dtime*(zflux1opl-alphaimpww*dzq1opldww1*ww1opl)
          !     
          wa(2) = -alphaimpww*dtime*dzq2opldww1
          wb(2) = 1._realkind-alphaimpww*dtime*dzq2opldww2
          wc(2) = 0._realkind
          wr(2) = ww2opl+dtime*(zflux2opl-alphaimpww*(dzq2opldww1*ww1opl+dzq2opldww2*ww2opl))
          !     
          wa(3) = -alphaimpww*dtime*dzq3opldww2
          wb(3) = 1._realkind-alphaimpww*dtime*dzq3opldww3
          wc(3) = 0._realkind
          wr(3) = ww3opl+dtime*(zflux3opl-alphaimpww*(dzq3opldww2*ww2opl+dzq3opldww3*ww3opl))
          !     
          call tridag(wa,wb,wc,wr,wtemp,3)
          !     
          zww1oplp=wtemp(1)
          zww2oplp=wtemp(2)
          zww3oplp=wtemp(3)
          !     
          !     
          wa(1) = 0._realkind
          wb(1) = 1._realkind-alphaimpww*dtime*dzq1fordww1
          wc(1) = 0._realkind
          wr(1)=ww1for+dtime*(zflux1for-alphaimpww*dzq1fordww1*ww1for)
          !     
          wa(2) = -alphaimpww*dtime*dzq2fordww1
          wb(2) = 1._realkind-alphaimpww*dtime*dzq2fordww2
          wc(2) = 0._realkind
          wr(2) = ww2for+dtime*(zflux2for-alphaimpww*(dzq2fordww1*ww1for+dzq2fordww2*ww2for))
          !     
          wa(3) = -alphaimpww*dtime*dzq3fordww2
          wb(3) = 1._realkind-alphaimpww*dtime*dzq3fordww3
          wc(3) = 0._realkind
          wr(3) = ww3for+dtime*(zflux3for-alphaimpww*(dzq3fordww2*ww2for+dzq3fordww3*ww3for))
          !     
          call tridag(wa,wb,wc,wr,wtemp,3)
          !     
          zww1forp=wtemp(1)
          zww2forp=wtemp(2)
          zww3forp=wtemp(3)
          !     
          !     the final runoff [m per time step]
          !     for a purly explicit solution this should satisfied:
          !     
          !     zruno1opl=zq3opl*dtime
          !     zruno1for=zq3for*dtime
          !     
          !     however, the final values of zww1oplp etc solved implicitly may not give
          !     a closed water balance compared to the runoff zq3opl and zq3for, respectively.
          !     therefore we recalculate the final runoff as a residual of the sum of
          !     the water fluxes and the changes in soil moisture.
          !     
          zslask=zfrop/(zfrop+zsnw+zlandoff)
          !     
          zruno1opl=dtime*(zi1opl+                                       &
               (1._realkind-zvegopl)*zslask*latfnsbs(jl)/(zlatns*rhoh2o)-   &
               zvegopl*zslask*etropl1(jl)/(zlatns*rhoh2o))         &
               -dz1w*(zww1oplp-ww1opl)-                             &
               dtime*zvegopl*zslask*etropl2(jl)/(zlatns*rhoh2o)    &
               -dz2w*(zww2oplp-ww2opl)-                             &
               dtime*zvegopl*zslask*etropl3(jl)/(zlatns*rhoh2o)    &
               -z3wopl*(zww3oplp-ww3opl)
          !     
          zruno1for=dtime*(zi1for+                                &
               (1._realkind-zfrsnfor)*latfsc(jl)/(zlatsc*rhoh2o)-    &
               etrfor1(jl)/(zlatc*rhoh2o))                  &
               -dz1w*(zww1forp-ww1for)-                      &
               dtime*etrfor2(jl)/(zlatc*rhoh2o)             &
               -dz2w*(zww2forp-ww2for)-                      &
               dtime*etrfor3(jl)/(zlatc*rhoh2o)             &
               -z3wfor*(zww3forp-ww3for)
          !     
          !     check that the final values of zww1oplp etc not exceed field capacity
          !     
          zflt=max(0._realkind,zww1oplp-vcc_mix1(jl)) ! cj
          zww1oplp=zww1oplp-zflt
          zww2oplp=zww2oplp+zflt*dz1w/dz2w
          !     
          zflt=max(0._realkind,zww2oplp-vcc_mix2(jl)) ! cj
          zww2oplp=zww2oplp-zflt
          zww3oplp=zww3oplp+zflt*dz2w/z3wopl
          !     
          zflt=max(0._realkind,zww3oplp-vcc(isoil))
          zww3oplp=zww3oplp-zflt
          !     
          zrunoopl=zruno1opl+zflt*z3wopl
          !     
          !     
          zflt=max(0._realkind,zww1forp-vcc_mix1(jl)) ! cj
          zww1forp=zww1forp-zflt
          zww2forp=zww2forp+zflt*dz1w/dz2w
          !     
          zflt=max(0._realkind,zww2forp-vcc_mix2(jl)) ! cj
          zww2forp=zww2forp-zflt
          zww3forp=zww3forp+zflt*dz2w/z3wfor
          !     
          zflt=max(0._realkind,zww3forp-vcc(isoil))
          zww3forp=zww3forp-zflt
          !     
          zrunofor=zruno1for+zflt*z3wfor
          !     
          !     
          !     corrections for negative swe values
          !     
          zww1oplp=zww1oplp + min(zsnoplp/(1._realkind-zcw)/dz1w,0._realkind)
          zww1forp=zww1forp + min(zsnforp*zcwinv/dz1w,0._realkind)
          zsnoplp=max(zsnoplp,0._realkind)
          zsnforp=max(zsnforp,0._realkind)
          !     zswp=max(zswp,1.e-10)
          !     zswdp=max(zswdp,1.e-10)
          !     
          !     new values for soil moisture
          !     
          zsw1oplp=zww1oplp*dz1w
          zsw1forp=zww1forp*dz1w
          zsw2oplp=zww2oplp*dz1w
          zsw2forp=zww2forp*dz1w
          zsw3oplp=zww3oplp*dz1w
          zsw3forp=zww3forp*dz1w
          !     
          !     total soil moisture (kg m-2 = mm)
          !     
          soilwmm(jl)=zcw*(ww1for*dz1w+ww2for*dz2w+ww3for*z3wfor) + (1._realkind-zcw)*(ww1opl*dz1w+ww2opl*dz2w+ww3opl*z3wopl)
          soilwmm(jl)=soilwmm(jl)*rhoh2o
          !     
          !     total frozen soil moisture (kg m-2 = mm)
          !     
          soilfrwmm(jl)=zcw*zsoilfrwmmfor + (1._realkind-zcw)*zsoilfrwmmopl
          soilfrwmm(jl)=soilfrwmm(jl)*rhoh2o
          soilfrwmm(jl)=min(soilfrwmm(jl),soilwmm(jl))
          !     
          !     runoff [mm per time step] scaled with area fraction.
          !     thus total contribution from land runoff is
          !     accrunoffopl(jl)+accrunofffor(jl)
          !     
          !     accrunoffopl(jl)=accrunoffopl(jl)+max(zrunoopl,0._realkind)*rhoh2o*conacc
          accrunoffopl(jl)=accrunoffopl(jl)+ zrunoopl*(1._realkind-zcw)*  frland(jl)*rhoh2o
          accrunofffor(jl)=accrunofffor(jl)+ zrunofor*zcw* frland(jl)*rhoh2o
          !
          !     snow melt water for land (mm/timestep)
          !     
          snowmeltland(jl)=(zsn2sw+zsnc2sw)*rhoh2o
          !     
          !     l  soil water availablility (swa)
          !     
          !     for all three layers:
          !     
          swaopl(jl)=(zbet1opl*dz1w+zbet2opl*dz2w+zbet3opl*z3wopl)/(dz1w+dz2w+z3wopl)
          swafor(jl)=(zbet1for*dz1w+zbet2for*dz2w+zbet3for*z3wfor)/(dz1w+dz2w+z3wfor)
          swa(jl)=swafor(jl)*zcw+swaopl(jl)*(1._realkind-zcw)
          !     
          !     for layers 1 and 2:
          !     
          swaopl12(jl)=(zbet1opl*dz1w+zbet2opl*dz2w)/(dz1w+dz2w)
          swafor12(jl)=(zbet1for*dz1w+zbet2for*dz2w)/(dz1w+dz2w)
          !     
          !     for layer 3:
          !     
          swaopl3(jl)=zbet3opl
          swafor3(jl)=zbet3for

          !     soil water availability in the upper 50 cm for guess use
          !     ps         swa50(jl)=((dz1w*sw(jl)+0.5_realkind*swd(jl))/dz1w/(dz1w+0.5_realkind)-vfl(isoil))/
          !     ps     &           (vcc(isoil)-vfl(isoil))
          !     ps         swa150(jl)=(swd(jl)/dz1w-vfl(isoil))/(vcc(isoil)-vfl(isoil))
          !     
          !     
          !     l  land-averaged lai

          lwlai(jl)=zlaifor_int*zcw+zlaiopn_int*(1._realkind-zcw)
          !     
          if(lprint)write(925,'(2i6,2f8.3,55(1pe12.4))')                      &
               jl,kstep,zalat,along(jl),                                &
               ww1opl,ww1for,ww2opl,ww2for,ww3opl,ww3for,               &
               zi1opl,zi1for,                                           &
               zq1opl,zq1for,zq2opl,zq2for,zq3opl,zq3for,               &
               zflux1opl,zflux2opl,zflux3opl,zflux1for,zflux2for,       &
               zflux3for,                                               &
               zww1oplp,zww2oplp,zww3oplp,zww1forp,zww2forp,zww3forp,   &
               zruno1opl,zruno1for,zrunoopl,zrunofor,                   &
               accrunoffopl(jl),accrunofffor(jl),                       &
               swaopl(jl),swafor(jl),swa(jl),swaopl12(jl),              &
               swafor12(jl),                                            &
               swaopl3(jl),swafor3(jl),                                 &
               zrainop,zfzbr,zmelbs,zsn2sw,                             &
               zrainf,zfzbrc,zmelbsc,zsnc2sw,                           &
               swsn(jl),swsnc(jl)
          !     
          !     ----- energy balance -----
          !ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
          !     ps
          !     ps      snofrak=zsnw
          !     ps
          !     ps      etsnow=ztsnp*snofrak*c1sn-tsnow(jl)*zsnw*c1sn
          !     ps
          !     ps      snofrak=zfrsnfor
          !     ps      etsnc=ztsncp*c1snc*zcw*snofrak-tsnc(jl)*zcw*zfrsnfor*c1snc
          !     ps
          !     ps      etc=(ztcp-tc(jl))*c2*zcw
          !     ps
          !     ps      etsns=ztsp*zfrop*ro_cgns*dz1-tsns(jl)*zfrop*ro_cgns*dz1
          !     ps      etssn=ztssnp*zsnw*ro_cgsn*dz1-tssn(jl)*zsnw*ro_cgsn*dz1
          !     ps      etsc=ztscp*zcw*(1._realkind-zfrsnfor)*ro_cgc*dz1-tsc(jl)*zcw*
          !     ps     &     (1._realkind-zfrsnfor)*ro_cgc*dz1
          !     ps      etscsn=ztscsnp*zcw*zfrsnfor*ro_cgcsn*dz1-tscsn(jl)*zcw*
          !     ps     &       zfrsnfor*ro_cgcsn*dz1
          !     ps
          !     ps      etsns2=ztsns2p*zfrop*ro_cgns2*dz2-tsns2(jl)*zfrop*ro_cgns2*dz2
          !     ps      etsns3=ztsns3p*zfrop*ro_cgns3*dz3-tsns3(jl)*zfrop*ro_cgns3*dz3
          !     ps      etsns4=ztsns4p*zfrop*ro_cgns4*dz4-tsns4(jl)*zfrop*ro_cgns4*dz4
          !     ps      etsns5=ztsns5p*zfrop*ro_cgns5*dz5-tsns5(jl)*zfrop*ro_cgns5*dz5
          !     ps
          !     ps      etssn2=ztssn2p*zsnw*ro_cgsn2*dz2-tssn2(jl)*zsnw*ro_cgsn2*dz2
          !     ps      etssn3=ztssn3p*zsnw*ro_cgsn3*dz3-tssn3(jl)*zsnw*ro_cgsn3*dz3
          !     ps      etssn4=ztssn4p*zsnw*ro_cgsn4*dz4-tssn4(jl)*zsnw*ro_cgsn4*dz4
          !     ps      etssn5=ztssn5p*zsnw*ro_cgsn5*dz5-tssn5(jl)*zsnw*ro_cgsn5*dz5
          !     ps
          !     ps      etsc2=ztsc2p*zcw*(1._realkind-zfrsnfor)*ro_cgc2*dz2-tsc2(jl)*zcw*
          !     ps     &      (1._realkind-zfrsnfor)*ro_cgc2*dz2
          !     ps      etsc3=ztsc3p*zcw*(1._realkind-zfrsnfor)*ro_cgc3*dz3-tsc3(jl)*zcw*
          !     ps     &      (1._realkind-zfrsnfor)*ro_cgc3*dz3
          !     ps      etsc4=ztsc4p*zcw*(1._realkind-zfrsnfor)*ro_cgc4*dz4-tsc4(jl)*zcw*
          !     ps     &      (1._realkind-zfrsnfor)*ro_cgc4*dz4
          !     ps      etsc5=ztsc5p*zcw*(1._realkind-zfrsnfor)*ro_cgc5*dz5-tsc5(jl)*zcw*
          !     ps     &      (1._realkind-zfrsnfor)*ro_cgc5*dz5
          !     ps
          !     ps      etscsn2=ztscsn2p*zcw*zfrsnfor*ro_cgcsn2*dz2-tscsn2(jl)*zcw*
          !     ps     &      zfrsnfor*ro_cgcsn2*dz2
          !     ps      etscsn3=ztscsn3p*zcw*zfrsnfor*ro_cgcsn3*dz3-tscsn3(jl)*zcw*
          !     ps     &      zfrsnfor*ro_cgcsn3*dz3
          !     ps      etscsn4=ztscsn4p*zcw*zfrsnfor*ro_cgcsn4*dz4-tscsn4(jl)*zcw*
          !     ps     &      zfrsnfor*ro_cgcsn4*dz4
          !     ps      etscsn5=ztscsn5p*zcw*zfrsnfor*ro_cgcsn5*dz5-tscsn5(jl)*zcw*
          !     ps     &      zfrsnfor*ro_cgcsn5*dz5
          !     ps
          !     ps
          !     ps      etot=(etc+(etsc+etsc2+etsc3+etsc4+etsc5)+
          !     ps     &     (etscsn+etscsn2+etscsn3+etscsn4+etscsn5+etsnc))+
          !     ps     &     (etsns+etsns2+etsns3+etsns4+etsns5)+
          !     ps     &     (etsnow+etssn+etssn2+etssn3+etssn4+etssn5)
          !     ps
          !     ps      etot=etot/dtime
          !     ps
          !     ps        if(lprint5)write(349,'(2i6,2f8.3,20(1pe12.4))')
          !     ps     &        jl,kstep,zalat,along(jl),
          !     ps     &        etot,
          !     ps     &        etsns,etsns2,etsns3,etsns4,etsns5,
          !     ps     &        etssn,etssn2,etssn3,etssn4,etssn5
          !     ps
          !     --------------------------


          !     
          !     
          !     *         4.      corrections in soil temperatures for energy conservation
          !     ----------------------------------------------------------------
          !     
          !     calculate changes in snowcover for open land and forest zdsnw and zdfrsnf
          !     
          zsfdist=0.6_realkind+0.001_realkind*orosigm(jl)
          zsfdist=min(zsfdist,0.8_realkind)

          loldlim = .false.
          call surf_land_tiles_splitup(zcw,       zsnoplp,   zsnmaxp,  zsnforp,   zsnmaxfp, &
               zlandon,   zsfdist,   zfrlim,   loldlim, zfropp,    zsnwp,     zfrsnp,   zfrsnforp, &
               zsnmaxpu,  zsnmaxfpu  )

          zsnmaxp  = zsnmaxpu
          zsnmaxfp = zsnmaxfpu

          !     compute actual open land / forest snow depth (not in water equivalents)
          !     maximize it at 10m, because we are not interested in the snowheights at greenland
          if ( zfrsnp>zfrinsg ) then
             dzsnowopl(jl) = min(10._realkind, zsnoplp*rhoh2o/(zsnwp*zrhosnp) )
          else
             dzsnowopl(jl) = 0._realkind
          endif
          if ( zcw*zfrsnforp>0.001_realkind ) then
             dzsnowfor(jl) = min(10._realkind,zsnforp*rhoh2o/(zcw*zfrsnforp*zrhosncp) )
          else
             dzsnowfor(jl) = 0._realkind
          endif
          !     
          zdsnw=zsnwp-zsnw
          zdfrsnf=zfrsnforp-zfrsnfor
          !     
          jqsnp=0
          if(zsnwp>0._realkind) jqsnp=1
          zsnoplpdepth=zsnoplp/(zsnwp+real(1-jqsnp,realkind))
          zdsnp=rhoh2o/zrhosn*zsnoplpdepth
          zdsnstp=min(zdsnp,zsnlayer)
          !     
          jqsncp=0
          if(zcw*zfrsnforp>0._realkind) jqsncp=1
          zsnforpdepth=zsnforp/(zfrsnforp*zcw+real(1-jqsncp,realkind))
          zdsncp=rhoh2o/zrhosnc*zsnforpdepth
          zdsncstp=min(zdsncp,zsnlayer)
          !     
          !     open land corrections
          !     if snowcover is increasing, let the new area feel the old no-snow history,
          !     applied below the snow only
          !     
          !     
          jq=0
          if(zdsnw>0._realkind) jq=1

          nc1sn=c1sn
          !     
          !ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
          zslask=ro_cgsn*zsnw/(ro_cgsn*zsnw+ro_cgns*zdsnw+ 1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztssnp=zweight*ztssnp + (1._realkind-zweight)*ztsp
          nro_cgsn=(ro_cgsn*zsnw+ro_cgns*zdsnw)/(zsnw+zdsnw+real(1-jq,realkind))
          nro_cgsn=nro_cgsn*real(jq,realkind)+ro_cgsn*real((1-jq),realkind)
          !     
          zslask=ro_cgsn2*zsnw/(ro_cgsn2*zsnw+ro_cgns2*zdsnw+1.e5_realkind*(real(1-jq,realkind)))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztssn2p=zweight*ztssn2p + (1._realkind-zweight)*ztsns2p
          nro_cgsn2=(ro_cgsn2*zsnw+ro_cgns2*zdsnw)/(zsnw+zdsnw+real(1-jq,realkind))
          nro_cgsn2=nro_cgsn2*real(jq,realkind)+ro_cgsn2*(real(1-jq,realkind))
          !     
          zslask=ro_cgsn3*zsnw/(ro_cgsn3*zsnw+ro_cgns3*zdsnw+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztssn3p=zweight*ztssn3p + (1._realkind-zweight)*ztsns3p
          nro_cgsn3=(ro_cgsn3*zsnw+ro_cgns3*zdsnw)/(zsnw+zdsnw+real(1-jq,realkind))
          nro_cgsn3=nro_cgsn3*real(jq,realkind)+ro_cgsn3*real((1-jq),realkind)
          !     
          zslask=ro_cgsn4*zsnw/(ro_cgsn4*zsnw+ro_cgns4*zdsnw+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztssn4p=zweight*ztssn4p + (1._realkind-zweight)*ztsns4p
          nro_cgsn4=(ro_cgsn4*zsnw+ro_cgns4*zdsnw)/(zsnw+zdsnw+real(1-jq,realkind))
          nro_cgsn4=nro_cgsn4*real(jq,realkind)+ro_cgsn4*real((1-jq),realkind)
          !     
          zslask=ro_cgsn5*zsnw/(ro_cgsn5*zsnw+ro_cgns5*zdsnw+ 1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztssn5p=zweight*ztssn5p + (1._realkind-zweight)*ztsns5p
          nro_cgsn5=(ro_cgsn5*zsnw+ro_cgns5*zdsnw)/(zsnw+zdsnw+real(1-jq,realkind))
          nro_cgsn5=nro_cgsn5*real(jq,realkind)+ro_cgsn5*real((1-jq),realkind)
          !     
          zsnwpst=zsnwp*real(jq,realkind)+zsnw*real((1-jq),realkind)
          zfroppst=((1._realkind-zcw)-zsnwp)*real(jq,realkind)+real((1-jq),realkind)*zfrop

          !     
          !     if snowcover is decreasing, let the new area feel the old snow history,
          !     applied below the snow only
          !     
          jq=0
          if(zdsnw<0._realkind) jq=1
          !     
          !ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
          zslask=ro_cgns*zfrop/(ro_cgns*zfrop-ro_cgsn*zdsnw+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztsp=zweight*ztsp + (1._realkind-zweight)*ztssnp
          nro_cgns=(ro_cgns*zfrop-ro_cgsn*zdsnw)/(zfrop-zdsnw+real(1-jq,realkind))
          nro_cgns=nro_cgns*real(jq,realkind)+ro_cgns*real((1-jq),realkind)
          !     
          zslask=ro_cgns2*zfrop/(ro_cgns2*zfrop-ro_cgsn2*zdsnw+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztsns2p=zweight*ztsns2p + (1._realkind-zweight)*ztssn2p
          nro_cgns2=(ro_cgns2*zfrop-ro_cgsn2*zdsnw)/(zfrop-zdsnw+real(1-jq,realkind))
          nro_cgns2=nro_cgns2*real(jq,realkind)+ro_cgns2*real((1-jq),realkind)
          !     
          zslask=ro_cgns3*zfrop/(ro_cgns3*zfrop-ro_cgsn3*zdsnw+ 1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztsns3p=zweight*ztsns3p + (1._realkind-zweight)*ztssn3p
          nro_cgns3=(ro_cgns3*zfrop-ro_cgsn3*zdsnw)/(zfrop-zdsnw+real(1-jq,realkind))
          nro_cgns3=nro_cgns3*real(jq,realkind)+ro_cgns3*real((1-jq),realkind)
          !     
          zslask=ro_cgns4*zfrop/(ro_cgns4*zfrop-ro_cgsn4*zdsnw+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztsns4p=zweight*ztsns4p + (1._realkind-zweight)*ztssn4p
          nro_cgns4=(ro_cgns4*zfrop-ro_cgsn4*zdsnw)/(zfrop-zdsnw+real(1-jq,realkind))
          nro_cgns4=nro_cgns4*real(jq,realkind)+ro_cgns4*real((1-jq),realkind)
          !     
          zslask=ro_cgns5*zfrop/(ro_cgns5*zfrop-ro_cgsn5*zdsnw+ 1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztsns5p=zweight*ztsns5p + (1._realkind-zweight)*ztssn5p
          nro_cgns5=(ro_cgns5*zfrop-ro_cgsn5*zdsnw)/(zfrop-zdsnw+real(1-jq,realkind))
          nro_cgns5=nro_cgns5*real(jq,realkind)+ro_cgns5*(real(1-jq,realkind))
          !     
          zsnwp=zsnwp*real(jq,realkind)+zsnwpst*(real(1-jq,realkind))
          zfropp=((1._realkind-zcw)-zsnwp)*real(jq,realkind)+(real(1-jq,realkind))*zfroppst
          !     
          !     
          !     forest corrections
          !     if snowcover is increasing, let the new area feel the old no-snow history,
          !     applied below the snow only
          !     
          jq=0
          if(zdfrsnf>0._realkind) jq=1
          !     
          !     ps      nc1snc=vhcice*zrhosnc/rhoice*zdsncstp
          !     ps      nc1snc=nc1snc*jq+(1-jq)*c1snc
          nc1snc=c1snc
          !     
          !ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
          zslask=ro_cgcsn*zfrsnfor/(ro_cgcsn*zfrsnfor+ ro_cgc*zdfrsnf+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztscsnp=zweight*ztscsnp + (1._realkind-zweight)*ztscp
          nro_cgcsn=(ro_cgcsn*zfrsnfor+ro_cgc*zdfrsnf)/(zfrsnfor+zdfrsnf+real(1-jq,realkind))
          nro_cgcsn=nro_cgcsn*real(jq,realkind)+ro_cgcsn*(real(1-jq,realkind))
          !     
          zslask=ro_cgcsn2*zfrsnfor/(ro_cgcsn2*zfrsnfor+ ro_cgc2*zdfrsnf+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztscsn2p=zweight*ztscsn2p + (1._realkind-zweight)*ztsc2p
          nro_cgcsn2=(ro_cgcsn2*zfrsnfor+ro_cgc2*zdfrsnf)/(zfrsnfor+zdfrsnf+real(1-jq,realkind))
          nro_cgcsn2=nro_cgcsn2*real(jq,realkind)+ro_cgcsn2*(real(1-jq,realkind))
          !     
          zslask=ro_cgcsn3*zfrsnfor/(ro_cgcsn3*zfrsnfor+ ro_cgc3*zdfrsnf+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztscsn3p=zweight*ztscsn3p + (1._realkind-zweight)*ztsc3p
          nro_cgcsn3=(ro_cgcsn3*zfrsnfor+ro_cgc3*zdfrsnf)/(zfrsnfor+zdfrsnf+real(1-jq,realkind))
          nro_cgcsn3=nro_cgcsn3*real(jq,realkind)+ro_cgcsn3*(real(1-jq,realkind))
          !     
          zslask=ro_cgcsn4*zfrsnfor/(ro_cgcsn4*zfrsnfor+ ro_cgc4*zdfrsnf+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztscsn4p=zweight*ztscsn4p + (1._realkind-zweight)*ztsc4p
          nro_cgcsn4=(ro_cgcsn4*zfrsnfor+ro_cgc4*zdfrsnf)/(zfrsnfor+zdfrsnf+real(1-jq,realkind))
          nro_cgcsn4=nro_cgcsn4*real(jq,realkind)+ro_cgcsn4*(real(1-jq,realkind))
          !     
          zslask=ro_cgcsn5*zfrsnfor/(ro_cgcsn5*zfrsnfor+ ro_cgc5*zdfrsnf+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztscsn5p=zweight*ztscsn5p + (1._realkind-zweight)*ztsc5p
          nro_cgcsn5=(ro_cgcsn5*zfrsnfor+ro_cgc5*zdfrsnf)/(zfrsnfor+zdfrsnf+real(1-jq,realkind))
          nro_cgcsn5=nro_cgcsn5*real(jq,realkind)+ro_cgcsn5*(real(1-jq,realkind))
          !     
          zfrsnforpst=zfrsnforp*real(jq,realkind)+zfrsnfor*(real(1-jq,realkind))
          !     
          !     if snowcover is decreasing, let the new area feel the old snow history,
          !     applied below the snow only
          !     
          jq=0
          if(zdfrsnf<0._realkind) jq=1
          !     
          !ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
          zslask=ro_cgc*(1._realkind-zfrsnfor)/(ro_cgc*(1._realkind-zfrsnfor) - ro_cgcsn*zdfrsnf+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztscp=zweight*ztscp + (1._realkind-zweight)*ztscsnp
          nro_cgc=(ro_cgc*(1._realkind-zfrsnfor)-ro_cgcsn*zdfrsnf)/ ((1._realkind-zfrsnfor)-zdfrsnf+real(1-jq,realkind))
          nro_cgc=nro_cgc*real(jq,realkind)+ro_cgc*(real(1-jq,realkind))
          !     
          zslask=ro_cgc2*(1._realkind-zfrsnfor)/(ro_cgc2*(1._realkind-zfrsnfor) - &
               ro_cgcsn2*zdfrsnf+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztsc2p=zweight*ztsc2p + (1._realkind-zweight)*ztscsn2p
          nro_cgc2=(ro_cgc2*(1._realkind-zfrsnfor)-ro_cgcsn2*zdfrsnf)/((1._realkind-zfrsnfor)-zdfrsnf+real(1-jq,realkind))
          nro_cgc2=nro_cgc2*real(jq,realkind)+ro_cgc2*(real(1-jq,realkind))
          !     
          zslask=ro_cgc3*(1._realkind-zfrsnfor)/(ro_cgc3*(1._realkind-zfrsnfor) -&
               ro_cgcsn3*zdfrsnf+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztsc3p=zweight*ztsc3p + (1._realkind-zweight)*ztscsn3p
          nro_cgc3=(ro_cgc3*(1._realkind-zfrsnfor)-ro_cgcsn3*zdfrsnf)/&
               ((1._realkind-zfrsnfor)-zdfrsnf+real(1-jq,realkind))
          nro_cgc3=nro_cgc3*real(jq,realkind)+ro_cgc3*(real(1-jq,realkind))
          !     
          zslask=ro_cgc4*(1._realkind-zfrsnfor)/(ro_cgc4*(1._realkind-zfrsnfor) - &
               ro_cgcsn4*zdfrsnf+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztsc4p=zweight*ztsc4p + (1._realkind-zweight)*ztscsn4p
          nro_cgc4=(ro_cgc4*(1._realkind-zfrsnfor)-ro_cgcsn4*zdfrsnf)/ &
               ((1._realkind-zfrsnfor)-zdfrsnf+real(1-jq,realkind))
          nro_cgc4=nro_cgc4*real(jq,realkind)+ro_cgc4*(real(1-jq,realkind))
          !     
          zslask=ro_cgc5*(1._realkind-zfrsnfor)/(ro_cgc5*(1._realkind-zfrsnfor) - &
               ro_cgcsn5*zdfrsnf+1.e5_realkind*real(1-jq,realkind))
          zweight=real(jq,realkind)*zslask+real(1-jq,realkind)
          !     
          ztsc5p=zweight*ztsc5p + (1._realkind-zweight)*ztscsn5p
          nro_cgc5=(ro_cgc5*(1._realkind-zfrsnfor)-ro_cgcsn5*zdfrsnf)/&
               ((1._realkind-zfrsnfor)-zdfrsnf+real(1-jq,realkind))
          nro_cgc5=nro_cgc5*real(jq,realkind)+ro_cgc5*(real(1-jq,realkind))
          !     
          zfrsnforp=zfrsnforp*real(jq,realkind)+zfrsnforpst*(real(1-jq,realkind))
          !     
          !     
          !     
          !     copy values from snow free / snow covered tile parts around 
          !     if one of those was non-existent in this time step. in case of  
          !     appearance in the next time step, the tile part is initialized.   
          if(zsnw<zfrinsg)then
             ztssnp=ztsp
             ztssn2p=ztsns2p
             ztssn3p=ztsns3p
             ztssn4p=ztsns4p
             ztssn5p=ztsns5p
             ztsnp=min(ztssnp,tmelt)
          endif
          if(zfrop<zfrinsg)then
             ztsp=ztssnp
             ztsns2p=ztssn2p
             ztsns3p=ztssn3p
             ztsns4p=ztssn4p
             ztsns5p=ztssn5p
          endif
          if(zcw<zfrlim)then
             ztscp=ztsp
             ztsc2p=ztsns2p
             ztsc3p=ztsns3p
             ztsc4p=ztsns4p
             ztsc5p=ztsns5p
             ztcp=ztscp
          endif
          if(zfrsnfor<zfrinsg)then
             ztscsnp=ztscp
             ztscsn2p=ztsc2p
             ztscsn3p=ztsc3p
             ztscsn4p=ztsc4p
             ztscsn5p=ztsc5p
             ztsncp=min(ztscsnp,tmelt)
          endif
          if(zfrsnfor>(1._realkind-zfrinsg))then
             ztscp=ztscsnp
             ztsc2p=ztscsn2p
             ztsc3p=ztscsn3p
             ztsc4p=ztscsn4p
             ztsc5p=ztscsn5p
          endif

          !     
          evapfor=-zfrsnfor*latfsnc(jl)/zlatsnc -zsvfor*rhoh2o/dtime*zcwinv &
               +(etrfor1(jl)+etrfor2(jl)+etrfor3(jl))/zlatc -latsnowcan(jl)/zlatc

          evapopn=-zsnw*latfsn(jl)/zlatsn/(zsnw+zfrop)
          !     
          srfliqfracifor=0._realkind
          if(zsnforp>0._realkind)srfliqfracifor=zswsncp/zsnforp
          srfliqfraciopl=0._realkind
          if(zsnoplp>0._realkind)srfliqfraciopl=zswsnp/zsnoplp
          !     
          !     energy balance components
          !     forest
          !     ps         if(lprint)write(371,100)
          !     ps     & (1._realkind-zfrsnfor)*(radfsc(jl)+senfsc(jl)+latfsc(jl))+
          !     ps     & zfrsnfor*zgroundsnc,
          !     ps     & snowcanmel(jl)*latice*rhoh2o/dtime,
          !     ps     & zfrsnfor*(zsnmelf*latice*rhoh2o/dtime-zfzbrsnc*latice),
          !     ps     & 0._realkind,0._realkind,
          !     ps     & c2*(ztcp-tc(jl)),c1snc*(ztsncp-tsnc(jl))*zfrsnfor
          !     open land
          !     ps         if(lprint)write(381,100)
          !     ps     & (zfrop*(radfns(jl)+senfns(jl)+latfns(jl))+
          !     ps     & zsnw*zgroundsn)/(zfrop+zsnw),
          !     ps     & 0._realkind,zsnw/(zfrop+zsnw)*(zsnmel*latice*rhoh2o/dtime-latice*zfzsnr),
          !     ps     & 0._realkind,0._realkind,
          !     ps     & 0._realkind,c1sn*(ztsnp-tsnow(jl))*zsnw/(zsnw+zfrop)
          !     ps 100  format(5(1x,f9.3),2(1x,f12.3))
          !     
          !     water balance components
          !     forest
          !     ps      if(lprint)write(372,200) 1,1._realkind,
          !     ps     & evapfor,-zsvfor*rhoh2o/dtime*zcwinv,0._realkind,zi1for,0._realkind,
          !     ps     & zsnowf,-latsnowcan(jl)/zlatc,-latfsnc(jl)/zlatsnc*zfrsnfor,
          !     ps     & zrainf,snowcanmel(jl)/zrsfl/zvegfor,
          !     ps     & zfrsnfor*(zsnmelf*rhoh2o/dtime-zfzbrsnc),
          !     pscps     & (etrfors(jl)+etrford(jl))/zlatc,
          !     ps     & (etrfor1(jl)+etrfor2(jl)+etrfor3(jl))/zlatc,
          !     ps     & (zsnowcanp-snowcan(jl))*rhoh2o,(zvegpfor-svegfor(jl))*rhoh2o,
          !     ps     & (zsnforp-snfor(jl))*zcwinv*rhoh2o,0._realkind
          !     open land
          !     ps      if(lprint)write(382,200) 1,1._realkind,
          !     ps     & evapopn,0._realkind,0._realkind,zi1opl,0._realkind,
          !     ps     & dsnowdt,0._realkind,-latfsn(jl)/zlatsn*zsnw/(zsnw+zfrop),
          !     ps     & draindt,0._realkind,zsnw/(zfrop+zsnw)*(zsnmel*rhoh2o/dtime-zfzsnr),0._realkind,
          !     ps     & 0._realkind,0._realkind,(zsnoplp-snopl(jl))/(1._realkind-zcw)*rhoh2o,0._realkind
          !     ps 200  format(i4,1x,f7.3,12(1x,e10.3),4(1x,f8.3))
          !     
          !     state variables
          !     forest
          !     ps      if(lprint)write(374,300) 1,1._realkind,
          !     ps     & zfrsnforp*ztsncp+(1._realkind-zfrsnforp)*ztscp,ztcp,ztsncp,
          !     ps     & zfrsnforp*ztscsnp+(1._realkind-zfrsnforp)*ztscp,
          !     ps     & zsnowcanp*rhoh2o,zvegpfor*rhoh2o,zsnforp*zcwinv*rhoh2o,
          !     ps     & 0._realkind,zsw1forp*rhoh2o,
          !     ps     & zdsncp,zfrsnforp,0._realkind,
          !     ps     & srfliqfracifor,0._realkind
          !     open land
          !     ps      if(lprint)write(384,300) 1,1._realkind,
          !     ps     & (zsnwp*ztsnp+zfropp*ztsp)/(zsnwp+zfropp),0._realkind,ztsnp,
          !     ps     & (zsnwp*ztssnp+zfropp*ztsp)/(zsnwp+zfropp),
          !     ps     & 0._realkind,0._realkind,zsnoplp/(1._realkind-zcw)*rhoh2o,0._realkind,zsw1oplp*rhoh2o,
          !     ps     & zdsnp,zsnwp/(zsnwp+zfropp),0._realkind,
          !     ps     & srfliqfraciopl,0._realkind
          !     ps 300  format(i4,1x,f7.3,9(1x,f8.3),5(1x,f5.3))
          !     
          !     
          !     water balance open land
          !     
          if(lprint)write(935,'(2i6,2f8.3,30(1pe12.4))')                    &
               jl,kstep,zalat,along(jl),                              &
               ww1opl*dz1w,ww2opl*dz2w,ww3opl*z3wopl,                   &
               snopl(jl)/(1._realkind-zcw),                                    &
               svegopl(jl)*zfrop/(zfrop+zsnw),                        &
               latfsn(jl)/zlatsn*zsnw/(zsnw+zfrop)*dtime/rhoh2o,      &
               zsvopl/(zsnw+zfrop),                                   &
               (1._realkind-zvegopl)*zfrop/(zfrop+zsnw)*latfnsbs(jl)/          &
               zlatns*dtime/rhoh2o,                                   &
               -zvegopl*zfrop/(zfrop+zsnw)*etropl1(jl)/               &
               zlatns*dtime/rhoh2o,                                   &
               -zvegopl*zfrop/(zfrop+zsnw)*etropl2(jl)/               &
               zlatns*dtime/rhoh2o,                                   &
               -zvegopl*zfrop/(zfrop+zsnw)*etropl3(jl)/               &
               zlatns*dtime/rhoh2o,                                   &
               zrunoopl
          !     
          !     water balance forest
          !     
          if(lprint)write(936,'(2i6,2f8.3,30(1pe12.4))')                 &
               jl,kstep,zalat,along(jl),                           &
               ww1for*dz1w,ww2for*dz2w,ww3for*z3wfor,                &
               snfor(jl)*zcwinv,                                   &
               svegfor(jl),                                        &
               latfsnc(jl)/zlatsnc*zfrsnfor*dtime/rhoh2o,          &
               zsvfor*zcwinv,                                      &
               (1._realkind-zfrsnfor)*latfsc(jl)/zlatsc*dtime/rhoh2o,       &
               -etrfor1(jl)/zlatc*dtime/rhoh2o,                    &
               -etrfor2(jl)/zlatc*dtime/rhoh2o,                    &
               -etrfor3(jl)/zlatc*dtime/rhoh2o,                    &
               zrunofor
          !     
          !ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
          !     ----- water balance -----
          !     
          !     
          !     storage terms
          !     
          storage_w(jl)= (1._realkind-zcw)*(ww1opl*dz1w+ww2opl*dz2w+ww3opl*z3wopl+ &
               snopl(jl)/(1._realkind-zcw)+svegopl(jl)*zfrop/(zfrop+zsnw) )   &   !     open land
               +zcw*(ww1for*dz1w+ww2for*dz2w+ww3for*z3wfor+  snfor(jl)*zcwinv+svegfor(jl) ) !     forest

          !     flux terms
          zprec=(draindt(jl)+dsnowdt(jl))*zrsfl
          !     evaporation fluxes (zevap>0 means that amount of water increases at surface)
          zevap=(1._realkind-zcw)*( +latfsn(jl)/zlatsn*zsnw/(zsnw+zfrop)*dtime/rhoh2o &
               +zsvopl/(zsnw+zfrop) &
               +(1._realkind-zvegopl)*zfrop/(zfrop+zsnw)*latfnsbs(jl)/ &
               zlatns*dtime/rhoh2o &
               -zvegopl*zfrop/(zfrop+zsnw)*etropl1(jl)/ &
               zlatns*dtime/rhoh2o &
               -zvegopl*zfrop/(zfrop+zsnw)*etropl2(jl)/ &
               zlatns*dtime/rhoh2o &
               -zvegopl*zfrop/(zfrop+zsnw)*etropl3(jl)/ &
               zlatns*dtime/rhoh2o)  &!     open land
               +zcw*(+latfsnc(jl)/zlatsnc*zfrsnfor*dtime/rhoh2o +zsvfor*zcwinv +&
               (1._realkind-zfrsnfor)*latfsc(jl)/zlatsc*dtime/rhoh2o &
               -etrfor1(jl)/zlatc*dtime/rhoh2o  -etrfor2(jl)/zlatc*dtime/rhoh2o  -&
               etrfor3(jl)/zlatc*dtime/rhoh2o     )        !     forest
          !     
          zruno=(1._realkind-zcw)*zrunoopl+zcw*zrunofor
          !     
          !     total flux of water
          flux_w(jl)=flux_w(jl) + zprec+zevap-zruno
          !     
          !ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
          !     
!!$          if(lprint)write(915,'(2i6,2f8.3,30(1pe12.4))')                     &
!!$               jl,kstep,zalat,along(jl),                               &
!!$               tsns(jl),tssn(jl),tc(jl),tsc(jl),tscsn(jl),tsnow(jl),   &
!!$               tsns2(jl),tsns3(jl),                                    &
!!$               tsns4(jl),tsns5(jl),                                    &
!!$               tssn2(jl),tssn3(jl),                                    &
!!$               tssn4(jl),tssn5(jl),                                    &
!!$               tsc2(jl),tsc3(jl),                                      &
!!$               tsc4(jl),tsc5(jl),                                      &
!!$               tscsn2(jl),tscsn3(jl),                                  &
!!$               tscsn4(jl),tscsn5(jl)
!!$          !     
!!$          if(lprint2)write(215,'(2i6,2f8.3,30(1pe12.4))')                   &
!!$               jl,kstep,zalat,along(jl),                              &
!!$               tsns(jl),tssn(jl),tc(jl),tsc(jl),tscsn(jl),tsnow(jl),  &
!!$               tsns2(jl),tsns3(jl),                                   &
!!$               tsns4(jl),tsns5(jl),                                   &
!!$               tssn2(jl),tssn3(jl),                                   &
!!$               tssn4(jl),tssn5(jl),                                   &
!!$               tsc2(jl),tsc3(jl),                                     &
!!$               tsc4(jl),tsc5(jl),                                     &
!!$               tscsn2(jl),tscsn3(jl),                                 &
!!$               tscsn4(jl),tscsn5(jl)
!!$          !     
!!$          if(lprint3)write(315,'(2i6,2f8.3,30(1pe12.4))')                   &
!!$               jl,kstep,zalat,along(jl),                              &
!!$               tsns(jl),tssn(jl),tc(jl),tsc(jl),tscsn(jl),tsnow(jl),  &
!!$               tsns2(jl),tsns3(jl),                                   &
!!$               tsns4(jl),tsns5(jl),                                   &
!!$               tssn2(jl),tssn3(jl),                                   &
!!$               tssn4(jl),tssn5(jl),                                   &
!!$               tsc2(jl),tsc3(jl),                                     &
!!$               tsc4(jl),tsc5(jl),                                     &
!!$               tscsn2(jl),tscsn3(jl),                                 &
!!$               tscsn4(jl),tscsn5(jl)
          !     
          !     
          !     
          !     *         5.     time tendencies
          !     ---------------

          dtsnsdt(jl)  = zrdt * (ztsp   -   tsns(jl))
          dsw1opldt(jl)= zrdt * (zsw1oplp   -   sw1opl(jl))
          dsw2opldt(jl)= zrdt * (zsw2oplp   -   sw2opl(jl))
          dsw3opldt(jl)= zrdt * (zsw3oplp   -   sw3opl(jl))
          
          if(frcw(jl)<0.001_realkind) then !cj111013
             dsw1fordt(jl) = dsw1opldt(jl)
             dsw2fordt(jl) = dsw2opldt(jl)
             dsw3fordt(jl) = dsw3opldt(jl)
          else
             dsw1fordt(jl)= zrdt * (zsw1forp   -   sw1for(jl))          
             dsw2fordt(jl)= zrdt * (zsw2forp   -   sw2for(jl))          
             dsw3fordt(jl)= zrdt * (zsw3forp   -   sw3for(jl))
          endif
          
          dsnopldt(jl)  = zrdt * (zsnoplp   -   snopl(jl))
          dsnfordt(jl)  = zrdt * (zsnforp   -   snfor(jl))
          dsnmaxdt(jl)  = zrdt * (zsnmaxp   -   snmax(jl))
          dsnmaxfdt(jl)  = zrdt * (zsnmaxfp   -   snmaxf(jl))
          dsvegfordt(jl)  = zrdt * (zvegpfor   -   svegfor(jl))
          dsvegopldt(jl)  = zrdt * (zvegpopl   -   svegopl(jl))
          dtsndt(jl)= zrdt * (ztsnp - tsnow(jl))
          dtssndt(jl)= zrdt * (ztssnp - tssn(jl))
          dtcdt(jl)  = zrdt * (ztcp   -   tc(jl))
          dtscdt(jl)  = zrdt * (ztscp   -   tsc(jl))
          dswsndt(jl)= zrdt * (zswsnp - swsn(jl))
          drhosndt(jl)= zrdt * (zrhosnp - rhosn(jl))
          !     
          !     new forest snow
          !     
          dtsncdt(jl)= zrdt * (ztsncp   -   tsnc(jl))
          dtscsndt(jl)= zrdt * (ztscsnp   -   tscsn(jl))
          dswsncdt(jl)= zrdt * (zswsncp - swsnc(jl))
          drhosncdt(jl)= zrdt * (zrhosncp - rhosnc(jl))
          !     df020218
          dsnowcandt(jl)=zrdt * (zsnowcanp - snowcan(jl))
          !     sg021024
          dtsns2dt(jl)= zrdt * (ztsns2p  -  tsns2(jl))
          dtssn2dt(jl)= zrdt * (ztssn2p  -  tssn2(jl))
          dtsc2dt(jl)= zrdt * (ztsc2p  -  tsc2(jl))
          dtscsn2dt(jl)= zrdt * (ztscsn2p  -  tscsn2(jl))
          dtsns3dt(jl)= zrdt * (ztsns3p  -  tsns3(jl))
          dtssn3dt(jl)= zrdt * (ztssn3p  -  tssn3(jl))
          dtsc3dt(jl)= zrdt * (ztsc3p  -  tsc3(jl))
          dtscsn3dt(jl)= zrdt * (ztscsn3p  -  tscsn3(jl))
          dtsns4dt(jl)= zrdt * (ztsns4p  -  tsns4(jl))
          dtssn4dt(jl)= zrdt * (ztssn4p  -  tssn4(jl))
          dtsc4dt(jl)= zrdt * (ztsc4p  -  tsc4(jl))
          dtscsn4dt(jl)= zrdt * (ztscsn4p  -  tscsn4(jl))
          dtsns5dt(jl)= zrdt * (ztsns5p  -  tsns5(jl))
          dtssn5dt(jl)= zrdt * (ztssn5p  -  tssn5(jl))
          dtsc5dt(jl)= zrdt * (ztsc5p  -  tsc5(jl))
          dtscsn5dt(jl)= zrdt * (ztscsn5p  -  tscsn5(jl))
          !     sg021024
          !     
!!$          if(lprint)write(916,'(2i6,2f8.3,30(1pe12.4))')              &
!!$               jl,kstep,zalat,along(jl),                        &
!!$               dtsnsdt(jl),dtssndt(jl),dtcdt(jl),dtscdt(jl),    &
!!$               dtscsndt(jl),dtsndt(jl),                         &
!!$               dtsns2dt(jl),dtsns3dt(jl),                       &
!!$               dtsns4dt(jl),dtsns5dt(jl),                       &
!!$               dtssn2dt(jl),dtssn3dt(jl),                       &
!!$               dtssn4dt(jl),dtssn5dt(jl),                       &
!!$               dtsc2dt(jl),dtsc3dt(jl),                         &
!!$               dtsc4dt(jl),dtsc5dt(jl),                         &
!!$               dtscsn2dt(jl),dtscsn3dt(jl),                     &
!!$               dtscsn4dt(jl),dtscsn5dt(jl)
          !     
          !     
          !ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
          !     ----- water balance -----
          !     
          !     
          !ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
          !     ----- energy balance -----
          !     ps
          !     psc      zfropp=zfrop
          !     psc      zsnwp=zsnw
          !     psc      zfrsnforp=zfrsnfor
          !     ps
          !     pscps      snofrak=max(zsnwp,zsnw)
          !     ps      snofrak=zsnw
          !     ps
          !     ps      etsnow=ztsnp*snofrak*nc1sn-tsnow(jl)*zsnw*c1sn
          !     ps
          !     ps
          !     ps        if(lprint5)write(330,'(2i6,2f8.3,20(1pe12.4))')
          !     ps     &    jl,kstep,zalat,along(jl),
          !     ps     &    ztsp,ztssnp,
          !     ps     &    ztsns2p,ztssn2p,
          !     ps     &    ztsns3p,ztssn3p,
          !     ps     &    ztsns4p,ztssn4p,
          !     ps     &    ztsns5p,ztssn5p
          !     ps
          !     ps
          !     ps
          !     ps
          !     pscps      snofrak=max(zfrsnforp,zfrsnfor)
          !     ps      snofrak=zfrsnfor
          !     ps      etsnc=ztsncp*nc1snc*zcw*snofrak-tsnc(jl)*zcw*zfrsnfor*c1snc
          !     ps
          !     ps      etc=(ztcp-tc(jl))*c2*zcw
          !     ps
          !     ps      etsns=ztsp*zfropp*nro_cgns*dz1-tsns(jl)*zfrop*ro_cgns*dz1
          !     ps      etssn=ztssnp*zsnwp*nro_cgsn*dz1-tssn(jl)*zsnw*ro_cgsn*dz1
          !     ps      etsc=ztscp*zcw*(1._realkind-zfrsnforp)*nro_cgc*dz1-tsc(jl)*zcw*
          !     ps     &     (1._realkind-zfrsnfor)*ro_cgc*dz1
          !     ps      etscsn=ztscsnp*zcw*zfrsnforp*nro_cgcsn*dz1-tscsn(jl)*zcw*
          !     ps     &       zfrsnfor*ro_cgcsn*dz1
          !     ps
          !     ps      etsns2=ztsns2p*zfropp*nro_cgns2*dz2-tsns2(jl)*zfrop*ro_cgns2*dz2
          !     ps      etsns3=ztsns3p*zfropp*nro_cgns3*dz3-tsns3(jl)*zfrop*ro_cgns3*dz3
          !     ps      etsns4=ztsns4p*zfropp*nro_cgns4*dz4-tsns4(jl)*zfrop*ro_cgns4*dz4
          !     ps      etsns5=ztsns5p*zfropp*nro_cgns5*dz5-tsns5(jl)*zfrop*ro_cgns5*dz5
          !     ps
          !     ps      etssn2=ztssn2p*zsnwp*nro_cgsn2*dz2-tssn2(jl)*zsnw*ro_cgsn2*dz2
          !     ps      etssn3=ztssn3p*zsnwp*nro_cgsn3*dz3-tssn3(jl)*zsnw*ro_cgsn3*dz3
          !     ps      etssn4=ztssn4p*zsnwp*nro_cgsn4*dz4-tssn4(jl)*zsnw*ro_cgsn4*dz4
          !     ps      etssn5=ztssn5p*zsnwp*nro_cgsn5*dz5-tssn5(jl)*zsnw*ro_cgsn5*dz5
          !     ps
          !     ps      etsc2=ztsc2p*zcw*(1._realkind-zfrsnforp)*nro_cgc2*dz2-tsc2(jl)*zcw*
          !     ps     &      (1._realkind-zfrsnfor)*ro_cgc2*dz2
          !     ps      etsc3=ztsc3p*zcw*(1._realkind-zfrsnforp)*nro_cgc3*dz3-tsc3(jl)*zcw*
          !     ps     &      (1._realkind-zfrsnfor)*ro_cgc3*dz3
          !     ps      etsc4=ztsc4p*zcw*(1._realkind-zfrsnforp)*nro_cgc4*dz4-tsc4(jl)*zcw*
          !     ps     &      (1._realkind-zfrsnfor)*ro_cgc4*dz4
          !     ps      etsc5=ztsc5p*zcw*(1._realkind-zfrsnforp)*nro_cgc5*dz5-tsc5(jl)*zcw*
          !     ps     &      (1._realkind-zfrsnfor)*ro_cgc5*dz5
          !     ps
          !     ps      etscsn2=ztscsn2p*zcw*zfrsnforp*nro_cgcsn2*dz2-tscsn2(jl)*zcw*
          !     ps     &      zfrsnfor*ro_cgcsn2*dz2
          !     ps      etscsn3=ztscsn3p*zcw*zfrsnforp*nro_cgcsn3*dz3-tscsn3(jl)*zcw*
          !     ps     &      zfrsnfor*ro_cgcsn3*dz3
          !     ps      etscsn4=ztscsn4p*zcw*zfrsnforp*nro_cgcsn4*dz4-tscsn4(jl)*zcw*
          !     ps     &      zfrsnfor*ro_cgcsn4*dz4
          !     ps      etscsn5=ztscsn5p*zcw*zfrsnforp*nro_cgcsn5*dz5-tscsn5(jl)*zcw*
          !     ps     &      zfrsnfor*ro_cgcsn5*dz5
          !     ps
          !     ps
          !     ps      etot=(etc+(etsc+etsc2+etsc3+etsc4+etsc5)+
          !     ps     &     (etscsn+etscsn2+etscsn3+etscsn4+etscsn5+etsnc))+
          !     ps     &     (etsns+etsns2+etsns3+etsns4+etsns5)+
          !     ps     &     (etsnow+etssn+etssn2+etssn3+etssn4+etssn5)
          !     ps
          !     ps      etot=etot/dtime
          !     ps
          !     ps        if(lprint)write(950,'(2i6,2f8.3,5(1pe12.4))')
          !     ps     &        jl,kstep,zalat,along(jl),
          !     ps     &        etot
          !     ps        if(lprint2)write(250,'(2i6,2f8.3,5(1pe12.4))')
          !     ps     &        jl,kstep,zalat,along(jl),
          !     ps     &        etot
          !     ps        if(lprint3)write(350,'(2i6,2f8.3,5(1pe12.4))')
          !     ps     &        jl,kstep,zalat,along(jl),
          !     ps     &        etot
          !     ps
          !     --------------------------
          !     
          !     if only ice
          if(frice(jl)*(1._realkind-frland(jl)) > 0.99_realkind) then
             svegfor(jl) = 0._realkind
             svegopl(jl) = 0._realkind
          endif
          !     
       else
          !     
          dtsnsdt(jl)=0._realkind
          dsw1opldt(jl)=0._realkind
          dsw1fordt(jl)=0._realkind
          dsw2opldt(jl)=0._realkind
          dsw2fordt(jl)=0._realkind
          dsw3opldt(jl)=0._realkind
          dsw3fordt(jl)=0._realkind
          dsnopldt(jl)=0._realkind
          dsnfordt(jl)=0._realkind
          dsnmaxdt(jl)=0._realkind
          dsnmaxfdt(jl)=0._realkind
          dsvegfordt(jl)=0._realkind
          dsvegopldt(jl)=0._realkind
          dtsndt(jl)=0._realkind
          dtssndt(jl)=0._realkind
          dtcdt(jl)=0._realkind
          dtscdt(jl)=0._realkind
          dswsndt(jl)=0._realkind
          drhosndt(jl)=0._realkind
          !     
          !     new forest snow
          !     
          dtsncdt(jl)=0._realkind
          dtscsndt(jl)=0._realkind
          dswsncdt(jl)=0._realkind
          drhosncdt(jl)=0._realkind
          !     df020218
          dsnowcandt(jl)=0._realkind
          !     sg021024
          dtsns2dt(jl)= 0._realkind
          dtssn2dt(jl)= 0._realkind
          dtsc2dt(jl)= 0._realkind
          dtscsn2dt(jl)= 0._realkind
          dtsns3dt(jl)= 0._realkind
          dtssn3dt(jl)= 0._realkind
          dtsc3dt(jl)= 0._realkind
          dtscsn3dt(jl)= 0._realkind
          dtsns4dt(jl)= 0._realkind
          dtssn4dt(jl)= 0._realkind
          dtsc4dt(jl)= 0._realkind
          dtscsn4dt(jl)= 0._realkind
          dtsns5dt(jl)= 0._realkind
          dtssn5dt(jl)= 0._realkind
          dtsc5dt(jl)= 0._realkind
          dtscsn5dt(jl)= 0._realkind

          !     au980616. if open water surface, no snow cover is allowed c.f.
          !     the use of soil temperatures to swicth sea/lake ice on and off.
          !     
          snopl(jl)=0._realkind
          snfor(jl)=0._realkind
          snmax(jl)=0._realkind
          snmaxf(jl)=0._realkind
          svegopl(jl)=0._realkind
          svegfor(jl)=0._realkind
          snowcan(jl)=0._realkind
          dzsnowopl(jl) = 0._realkind
          dzsnowfor(jl) = 0._realkind
          !     
       endif
       !     
1   enddo
    !     
    !     --------------------------------------------------
    return
  end subroutine surf

